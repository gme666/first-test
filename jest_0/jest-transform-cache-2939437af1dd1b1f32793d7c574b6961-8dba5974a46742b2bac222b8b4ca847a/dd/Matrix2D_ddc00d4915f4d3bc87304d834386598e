4c56f92d78695149a5eaed1de12bd6c3
Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}



var DEG_TO_RAD=Math.PI/180;var





















Matrix2D=
function Matrix2D(a,b,c,d,tx,ty){_classCallCheck(this,Matrix2D);_initialiseProps.call(this);
this.setTransform(a,b,c,d,tx,ty);






































};var _initialiseProps=function _initialiseProps(){this.












setTransform=function(a,b,c,d,tx,ty){

this.a=a==null?1:a;
this.b=b||0;
this.c=c||0;
this.d=d==null?1:d;
this.tx=tx||0;
this.ty=ty||0;
return this;
};this.






reset=function(){
this.a=this.d=1;
this.b=this.c=this.tx=this.ty=0;
return this;
};this.






toArray=function(){
return[this.a,this.b,this.c,this.d,this.tx,this.ty];
};this.







copy=function(matrix){
return this.setTransform(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
};this.






clone=function(){
return new Matrix2D(this.a,this.b,this.c,this.d,this.tx,this.ty);
};this.














prepend=function(a,b,c,d,tx,ty){
var a1=this.a;
var c1=this.c;
var tx1=this.tx;

this.a=a*a1+c*this.b;
this.b=b*a1+d*this.b;
this.c=a*c1+c*this.d;
this.d=b*c1+d*this.d;
this.tx=a*tx1+c*this.ty+tx;
this.ty=b*tx1+d*this.ty+ty;
return this;
};this.













append=function(a,b,c,d,tx,ty){
var a1=this.a;
var b1=this.b;
var c1=this.c;
var d1=this.d;
if(a!==1||b!==0||c!==0||d!==1){
this.a=a1*a+c1*b;
this.b=b1*a+d1*b;
this.c=a1*c+c1*d;
this.d=b1*c+d1*d;
}
this.tx=a1*tx+c1*ty+this.tx;
this.ty=b1*tx+d1*ty+this.ty;
return this;
};this.



















appendTransform=function(x,y,scaleX,scaleY,rotation,skewX,skewY,regX,regY){
if(rotation%360){
var r=rotation*DEG_TO_RAD;
var cos=Math.cos(r);
var sin=Math.sin(r);
}else{
cos=1;
sin=0;
}

if(skewX||skewY){

skewX*=DEG_TO_RAD;
skewY*=DEG_TO_RAD;
this.append(Math.cos(skewY),Math.sin(skewY),-Math.sin(skewX),Math.cos(skewX),x,y);
this.append(cos*scaleX,sin*scaleX,-sin*scaleY,cos*scaleY,0,0);
}else{
this.append(cos*scaleX,sin*scaleX,-sin*scaleY,cos*scaleY,x,y);
}

if(regX||regY){

this.tx-=regX*this.a+regY*this.c;
this.ty-=regX*this.b+regY*this.d;
}
return this;
};this.


























prependTransform=function(x,y,scaleX,scaleY,rotation,skewX,skewY,regX,regY){
if(rotation%360){
var r=rotation*DEG_TO_RAD;
var cos=Math.cos(r);
var sin=Math.sin(r);
}else{
cos=1;
sin=0;
}

if(regX||regY){

this.tx-=regX;this.ty-=regY;
}
if(skewX||skewY){

skewX*=DEG_TO_RAD;
skewY*=DEG_TO_RAD;
this.prepend(cos*scaleX,sin*scaleX,-sin*scaleY,cos*scaleY,0,0);
this.prepend(Math.cos(skewY),Math.sin(skewY),-Math.sin(skewX),Math.cos(skewX),x,y);
}else{
this.prepend(cos*scaleX,sin*scaleX,-sin*scaleY,cos*scaleY,x,y);
}
return this;
};};exports.default=Matrix2D;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,