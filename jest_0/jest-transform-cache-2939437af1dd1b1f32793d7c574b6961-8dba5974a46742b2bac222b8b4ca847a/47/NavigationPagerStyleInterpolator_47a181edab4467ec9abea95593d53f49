5e1befeaa294b659e65c6a4cd52ae96d
































'use strict';























function forInitial(props){var

navigationState=

props.navigationState,scene=props.scene;

var focused=navigationState.index===scene.index;
var opacity=focused?1:0;

var dir=scene.index>navigationState.index?1:-1;
var translate=focused?0:1000000*dir;
return{
opacity:opacity,
transform:[
{translateX:translate},
{translateY:translate}]};


}

function forHorizontal(props){var

layout=


props.layout,position=props.position,scene=props.scene;

if(!layout.isMeasured){
return forInitial(props);
}

var index=scene.index;
var inputRange=[index-1,index,index+1];

var width=layout.initWidth;
var translateX=position.interpolate({
inputRange:inputRange,
outputRange:[width,0,-width]});


return{
opacity:1,
shadowColor:'transparent',
shadowRadius:0,
transform:[
{scale:1},
{translateX:translateX},
{translateY:0}]};


}

module.exports={
forHorizontal:forHorizontal};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5hdmlnYXRpb25QYWdlclN0eWxlSW50ZXJwb2xhdG9yLmpzIl0sIm5hbWVzIjpbImZvckluaXRpYWwiLCJwcm9wcyIsIm5hdmlnYXRpb25TdGF0ZSIsInNjZW5lIiwiZm9jdXNlZCIsImluZGV4Iiwib3BhY2l0eSIsImRpciIsInRyYW5zbGF0ZSIsInRyYW5zZm9ybSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwiZm9ySG9yaXpvbnRhbCIsImxheW91dCIsInBvc2l0aW9uIiwiaXNNZWFzdXJlZCIsImlucHV0UmFuZ2UiLCJ3aWR0aCIsImluaXRXaWR0aCIsImludGVycG9sYXRlIiwib3V0cHV0UmFuZ2UiLCJzaGFkb3dDb2xvciIsInNoYWRvd1JhZGl1cyIsInNjYWxlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCQSxRQUFTQSxXQUFULENBQW9CQyxLQUFwQixDQUFpRTs7QUFFN0RDLGVBRjZEOztBQUkzREQsS0FKMkQsQ0FFN0RDLGVBRjZELENBRzdEQyxLQUg2RCxDQUkzREYsS0FKMkQsQ0FHN0RFLEtBSDZEOztBQU0vRCxHQUFNQyxTQUFVRixnQkFBZ0JHLEtBQWhCLEdBQTBCRixNQUFNRSxLQUFoRDtBQUNBLEdBQU1DLFNBQVVGLFFBQVUsQ0FBVixDQUFjLENBQTlCOztBQUVBLEdBQU1HLEtBQU1KLE1BQU1FLEtBQU4sQ0FBY0gsZ0JBQWdCRyxLQUE5QixDQUFzQyxDQUF0QyxDQUEwQyxDQUFDLENBQXZEO0FBQ0EsR0FBTUcsV0FBWUosUUFBVSxDQUFWLENBQWUsUUFBVUcsR0FBM0M7QUFDQSxNQUFPO0FBQ0xELGVBREs7QUFFTEcsVUFBVztBQUNULENBQUVDLFdBQVlGLFNBQWQsQ0FEUztBQUVULENBQUVHLFdBQVlILFNBQWQsQ0FGUyxDQUZOLENBQVA7OztBQU9EOztBQUVELFFBQVNJLGNBQVQsQ0FBdUJYLEtBQXZCLENBQW9FOztBQUVoRVksTUFGZ0U7OztBQUs5RFosS0FMOEQsQ0FFaEVZLE1BRmdFLENBR2hFQyxRQUhnRSxDQUs5RGIsS0FMOEQsQ0FHaEVhLFFBSGdFLENBSWhFWCxLQUpnRSxDQUs5REYsS0FMOEQsQ0FJaEVFLEtBSmdFOztBQU9sRSxHQUFJLENBQUNVLE9BQU9FLFVBQVosQ0FBd0I7QUFDdEIsTUFBT2YsWUFBV0MsS0FBWCxDQUFQO0FBQ0Q7O0FBRUQsR0FBTUksT0FBUUYsTUFBTUUsS0FBcEI7QUFDQSxHQUFNVyxZQUFhLENBQUNYLE1BQVEsQ0FBVCxDQUFZQSxLQUFaLENBQW1CQSxNQUFRLENBQTNCLENBQW5COztBQUVBLEdBQU1ZLE9BQVFKLE9BQU9LLFNBQXJCO0FBQ0EsR0FBTVIsWUFBYUksU0FBU0ssV0FBVCxDQUFxQjtBQUN0Q0gscUJBRHNDO0FBRXRDSSxZQUFhLENBQUNILEtBQUQsQ0FBUSxDQUFSLENBQVcsQ0FBQ0EsS0FBWixDQUZ5QixDQUFyQixDQUFuQjs7O0FBS0EsTUFBTztBQUNMWCxRQUFVLENBREw7QUFFTGUsWUFBYSxhQUZSO0FBR0xDLGFBQWMsQ0FIVDtBQUlMYixVQUFXO0FBQ1QsQ0FBRWMsTUFBTyxDQUFULENBRFM7QUFFVCxDQUFFYixxQkFBRixDQUZTO0FBR1QsQ0FBRUMsV0FBWSxDQUFkLENBSFMsQ0FKTixDQUFQOzs7QUFVRDs7QUFFRGEsT0FBT0MsT0FBUCxDQUFpQjtBQUNmYiwyQkFEZSxDQUFqQiIsImZpbGUiOiJOYXZpZ2F0aW9uUGFnZXJTdHlsZUludGVycG9sYXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBGYWNlYm9vaywgSW5jLiAoXCJGYWNlYm9va1wiKSBvd25zIGFsbCByaWdodCwgdGl0bGUgYW5kIGludGVyZXN0LCBpbmNsdWRpbmdcbiAqIGFsbCBpbnRlbGxlY3R1YWwgcHJvcGVydHkgYW5kIG90aGVyIHByb3ByaWV0YXJ5IHJpZ2h0cywgaW4gYW5kIHRvIHRoZSBSZWFjdFxuICogTmF0aXZlIEN1c3RvbUNvbXBvbmVudHMgc29mdHdhcmUgKHRoZSBcIlNvZnR3YXJlXCIpLiAgU3ViamVjdCB0byB5b3VyXG4gKiBjb21wbGlhbmNlIHdpdGggdGhlc2UgdGVybXMsIHlvdSBhcmUgaGVyZWJ5IGdyYW50ZWQgYSBub24tZXhjbHVzaXZlLFxuICogd29ybGR3aWRlLCByb3lhbHR5LWZyZWUgY29weXJpZ2h0IGxpY2Vuc2UgdG8gKDEpIHVzZSBhbmQgY29weSB0aGUgU29mdHdhcmU7XG4gKiBhbmQgKDIpIHJlcHJvZHVjZSBhbmQgZGlzdHJpYnV0ZSB0aGUgU29mdHdhcmUgYXMgcGFydCBvZiB5b3VyIG93biBzb2Z0d2FyZVxuICogKFwiWW91ciBTb2Z0d2FyZVwiKS4gIEZhY2Vib29rIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvXG4gKiB5b3UgaW4gdGhpcyBsaWNlbnNlIGFncmVlbWVudC5cbiAqXG4gKiBUSEUgU09GVFdBUkUgQU5EIERPQ1VNRU5UQVRJT04sIElGIEFOWSwgQVJFIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1NcbiAqIE9SIElNUExJRUQgV0FSUkFOVElFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVNcbiAqIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UpIEFSRSBESVNDTEFJTUVELlxuICogSU4gTk8gRVZFTlQgU0hBTEwgRkFDRUJPT0sgT1IgSVRTIEFGRklMSUFURVMsIE9GRklDRVJTLCBESVJFQ1RPUlMgT1JcbiAqIEVNUExPWUVFUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLFxuICogRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLFxuICogUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7XG4gKiBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSxcbiAqIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SXG4gKiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSEUgU09GVFdBUkUsIEVWRU4gSUZcbiAqIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBOYXZpZ2F0aW9uUGFnZXJTdHlsZUludGVycG9sYXRvclxuICogQGZsb3dcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHlwZSAge1xuICBOYXZpZ2F0aW9uU2NlbmVSZW5kZXJlclByb3BzLFxufSBmcm9tICdOYXZpZ2F0aW9uVHlwZURlZmluaXRpb24nO1xuXG4vKipcbiAqIFV0aWxpdHkgdGhhdCBidWlsZHMgdGhlIHN0eWxlIGZvciB0aGUgY2FyZCBpbiB0aGUgY2FyZHMgbGlzdC5cbiAqXG4gKiArLS0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tKy0tLS0tLS0tLS0tLS0rXG4gKiB8ICAgICAgICAgICAgIHwgICAgICAgICAgICAgfCAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgIHwgICAgICAgICAgICAgfCAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgIHwgICAgICAgICAgICAgfCAgICAgICAgICAgICB8XG4gKiB8ICAgIE5leHQgICAgIHwgICBGb2N1c2VkICAgfCAgUHJldmlvdXMgICB8XG4gKiB8ICAgIENhcmQgICAgIHwgICAgQ2FyZCAgICAgfCAgICBDYXJkICAgICB8XG4gKiB8ICAgICAgICAgICAgIHwgICAgICAgICAgICAgfCAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgIHwgICAgICAgICAgICAgfCAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgIHwgICAgICAgICAgICAgfCAgICAgICAgICAgICB8XG4gKiArLS0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tKy0tLS0tLS0tLS0tLS0rXG4gKi9cblxuLyoqXG4gKiBSZW5kZXIgdGhlIGluaXRpYWwgc3R5bGUgd2hlbiB0aGUgaW5pdGlhbCBsYXlvdXQgaXNuJ3QgbWVhc3VyZWQgeWV0LlxuICovXG5mdW5jdGlvbiBmb3JJbml0aWFsKHByb3BzOiBOYXZpZ2F0aW9uU2NlbmVSZW5kZXJlclByb3BzKTogT2JqZWN0IHtcbiAgY29uc3Qge1xuICAgIG5hdmlnYXRpb25TdGF0ZSxcbiAgICBzY2VuZSxcbiAgfSA9IHByb3BzO1xuXG4gIGNvbnN0IGZvY3VzZWQgPSBuYXZpZ2F0aW9uU3RhdGUuaW5kZXggPT09IHNjZW5lLmluZGV4O1xuICBjb25zdCBvcGFjaXR5ID0gZm9jdXNlZCA/IDEgOiAwO1xuICAvLyBJZiBub3QgZm9jdXNlZCwgbW92ZSB0aGUgc2NlbmUgdG8gdGhlIGZhciBhd2F5LlxuICBjb25zdCBkaXIgPSBzY2VuZS5pbmRleCA+IG5hdmlnYXRpb25TdGF0ZS5pbmRleCA/IDEgOiAtMTtcbiAgY29uc3QgdHJhbnNsYXRlID0gZm9jdXNlZCA/IDAgOiAoMTAwMDAwMCAqIGRpcik7XG4gIHJldHVybiB7XG4gICAgb3BhY2l0eSxcbiAgICB0cmFuc2Zvcm06IFtcbiAgICAgIHsgdHJhbnNsYXRlWDogdHJhbnNsYXRlIH0sXG4gICAgICB7IHRyYW5zbGF0ZVk6IHRyYW5zbGF0ZSB9LFxuICAgIF0sXG4gIH07XG59XG5cbmZ1bmN0aW9uIGZvckhvcml6b250YWwocHJvcHM6IE5hdmlnYXRpb25TY2VuZVJlbmRlcmVyUHJvcHMpOiBPYmplY3Qge1xuICBjb25zdCB7XG4gICAgbGF5b3V0LFxuICAgIHBvc2l0aW9uLFxuICAgIHNjZW5lLFxuICB9ID0gcHJvcHM7XG5cbiAgaWYgKCFsYXlvdXQuaXNNZWFzdXJlZCkge1xuICAgIHJldHVybiBmb3JJbml0aWFsKHByb3BzKTtcbiAgfVxuXG4gIGNvbnN0IGluZGV4ID0gc2NlbmUuaW5kZXg7XG4gIGNvbnN0IGlucHV0UmFuZ2UgPSBbaW5kZXggLSAxLCBpbmRleCwgaW5kZXggKyAxXTtcblxuICBjb25zdCB3aWR0aCA9IGxheW91dC5pbml0V2lkdGg7XG4gIGNvbnN0IHRyYW5zbGF0ZVggPSBwb3NpdGlvbi5pbnRlcnBvbGF0ZSh7XG4gICAgaW5wdXRSYW5nZSxcbiAgICBvdXRwdXRSYW5nZTogW3dpZHRoLCAwLCAtd2lkdGhdLFxuICB9KTtcblxuICByZXR1cm4ge1xuICAgIG9wYWNpdHkgOiAxLFxuICAgIHNoYWRvd0NvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIHNoYWRvd1JhZGl1czogMCxcbiAgICB0cmFuc2Zvcm06IFtcbiAgICAgIHsgc2NhbGU6IDEgfSxcbiAgICAgIHsgdHJhbnNsYXRlWCB9LFxuICAgICAgeyB0cmFuc2xhdGVZOiAwIH0sXG4gICAgXSxcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZvckhvcml6b250YWwsXG59O1xuIl19