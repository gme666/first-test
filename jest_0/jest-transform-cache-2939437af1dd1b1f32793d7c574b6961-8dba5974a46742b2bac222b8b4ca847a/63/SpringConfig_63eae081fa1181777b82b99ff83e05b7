d4d0a589f7401b27d3ce1b0a34624008












'use strict';






function tensionFromOrigamiValue(oValue){
return(oValue-30)*3.62+194;
}

function frictionFromOrigamiValue(oValue){
return(oValue-8)*3+25;
}

function fromOrigamiTensionAndFriction(
tension,
friction)
{
return{
tension:tensionFromOrigamiValue(tension),
friction:frictionFromOrigamiValue(friction)};

}

function fromBouncinessAndSpeed(
bounciness,
speed)
{
function normalize(value,startValue,endValue){
return(value-startValue)/(endValue-startValue);
}

function projectNormal(n,start,end){
return start+n*(end-start);
}

function linearInterpolation(t,start,end){
return t*end+(1-t)*start;
}

function quadraticOutInterpolation(t,start,end){
return linearInterpolation(2*t-t*t,start,end);
}

function b3Friction1(x){
return 0.0007*Math.pow(x,3)-
0.031*Math.pow(x,2)+0.64*x+1.28;
}

function b3Friction2(x){
return 0.000044*Math.pow(x,3)-
0.006*Math.pow(x,2)+0.36*x+2;
}

function b3Friction3(x){
return 0.00000045*Math.pow(x,3)-
0.000332*Math.pow(x,2)+0.1078*x+5.84;
}

function b3Nobounce(tension){
if(tension<=18){
return b3Friction1(tension);
}else if(tension>18&&tension<=44){
return b3Friction2(tension);
}else{
return b3Friction3(tension);
}
}

var b=normalize(bounciness/1.7,0,20);
b=projectNormal(b,0,0.8);
var s=normalize(speed/1.7,0,20);
var bouncyTension=projectNormal(s,0.5,200);
var bouncyFriction=quadraticOutInterpolation(
b,
b3Nobounce(bouncyTension),
0.01);


return{
tension:tensionFromOrigamiValue(bouncyTension),
friction:frictionFromOrigamiValue(bouncyFriction)};

}

module.exports={
fromOrigamiTensionAndFriction:fromOrigamiTensionAndFriction,
fromBouncinessAndSpeed:fromBouncinessAndSpeed};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNwcmluZ0NvbmZpZy5qcyJdLCJuYW1lcyI6WyJ0ZW5zaW9uRnJvbU9yaWdhbWlWYWx1ZSIsIm9WYWx1ZSIsImZyaWN0aW9uRnJvbU9yaWdhbWlWYWx1ZSIsImZyb21PcmlnYW1pVGVuc2lvbkFuZEZyaWN0aW9uIiwidGVuc2lvbiIsImZyaWN0aW9uIiwiZnJvbUJvdW5jaW5lc3NBbmRTcGVlZCIsImJvdW5jaW5lc3MiLCJzcGVlZCIsIm5vcm1hbGl6ZSIsInZhbHVlIiwic3RhcnRWYWx1ZSIsImVuZFZhbHVlIiwicHJvamVjdE5vcm1hbCIsIm4iLCJzdGFydCIsImVuZCIsImxpbmVhckludGVycG9sYXRpb24iLCJ0IiwicXVhZHJhdGljT3V0SW50ZXJwb2xhdGlvbiIsImIzRnJpY3Rpb24xIiwieCIsIk1hdGgiLCJwb3ciLCJiM0ZyaWN0aW9uMiIsImIzRnJpY3Rpb24zIiwiYjNOb2JvdW5jZSIsImIiLCJzIiwiYm91bmN5VGVuc2lvbiIsImJvdW5jeUZyaWN0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7Ozs7QUFPQSxRQUFTQSx3QkFBVCxDQUFpQ0MsTUFBakMsQ0FBeUM7QUFDdkMsTUFBTyxDQUFDQSxPQUFTLEVBQVYsRUFBZ0IsSUFBaEIsQ0FBdUIsR0FBOUI7QUFDRDs7QUFFRCxRQUFTQyx5QkFBVCxDQUFrQ0QsTUFBbEMsQ0FBMEM7QUFDeEMsTUFBTyxDQUFDQSxPQUFTLENBQVYsRUFBZSxDQUFmLENBQW1CLEVBQTFCO0FBQ0Q7O0FBRUQsUUFBU0UsOEJBQVQ7QUFDRUMsT0FERjtBQUVFQyxRQUZGO0FBR29CO0FBQ2xCLE1BQU87QUFDTEQsUUFBU0osd0JBQXdCSSxPQUF4QixDQURKO0FBRUxDLFNBQVVILHlCQUF5QkcsUUFBekIsQ0FGTCxDQUFQOztBQUlEOztBQUVELFFBQVNDLHVCQUFUO0FBQ0VDLFVBREY7QUFFRUMsS0FGRjtBQUdvQjtBQUNsQixRQUFTQyxVQUFULENBQW1CQyxLQUFuQixDQUEwQkMsVUFBMUIsQ0FBc0NDLFFBQXRDLENBQWdEO0FBQzlDLE1BQU8sQ0FBQ0YsTUFBUUMsVUFBVCxHQUF3QkMsU0FBV0QsVUFBbkMsQ0FBUDtBQUNEOztBQUVELFFBQVNFLGNBQVQsQ0FBdUJDLENBQXZCLENBQTBCQyxLQUExQixDQUFpQ0MsR0FBakMsQ0FBc0M7QUFDcEMsTUFBT0QsT0FBU0QsR0FBS0UsSUFBTUQsS0FBWCxDQUFoQjtBQUNEOztBQUVELFFBQVNFLG9CQUFULENBQTZCQyxDQUE3QixDQUFnQ0gsS0FBaEMsQ0FBdUNDLEdBQXZDLENBQTRDO0FBQzFDLE1BQU9FLEdBQUlGLEdBQUosQ0FBVSxDQUFDLEVBQUlFLENBQUwsRUFBVUgsS0FBM0I7QUFDRDs7QUFFRCxRQUFTSSwwQkFBVCxDQUFtQ0QsQ0FBbkMsQ0FBc0NILEtBQXRDLENBQTZDQyxHQUE3QyxDQUFrRDtBQUNoRCxNQUFPQyxxQkFBb0IsRUFBSUMsQ0FBSixDQUFRQSxFQUFJQSxDQUFoQyxDQUFtQ0gsS0FBbkMsQ0FBMENDLEdBQTFDLENBQVA7QUFDRDs7QUFFRCxRQUFTSSxZQUFULENBQXFCQyxDQUFyQixDQUF3QjtBQUN0QixNQUFRLFFBQVNDLEtBQUtDLEdBQUwsQ0FBU0YsQ0FBVCxDQUFZLENBQVosQ0FBVjtBQUNKLE1BQVFDLEtBQUtDLEdBQUwsQ0FBU0YsQ0FBVCxDQUFZLENBQVosQ0FESixDQUNzQixLQUFPQSxDQUQ3QixDQUNpQyxJQUR4QztBQUVEOztBQUVELFFBQVNHLFlBQVQsQ0FBcUJILENBQXJCLENBQXdCO0FBQ3RCLE1BQVEsVUFBV0MsS0FBS0MsR0FBTCxDQUFTRixDQUFULENBQVksQ0FBWixDQUFaO0FBQ0osTUFBUUMsS0FBS0MsR0FBTCxDQUFTRixDQUFULENBQVksQ0FBWixDQURKLENBQ3NCLEtBQU9BLENBRDdCLENBQ2lDLENBRHhDO0FBRUQ7O0FBRUQsUUFBU0ksWUFBVCxDQUFxQkosQ0FBckIsQ0FBd0I7QUFDdEIsTUFBUSxZQUFhQyxLQUFLQyxHQUFMLENBQVNGLENBQVQsQ0FBWSxDQUFaLENBQWQ7QUFDSixTQUFXQyxLQUFLQyxHQUFMLENBQVNGLENBQVQsQ0FBWSxDQUFaLENBRFAsQ0FDeUIsT0FBU0EsQ0FEbEMsQ0FDc0MsSUFEN0M7QUFFRDs7QUFFRCxRQUFTSyxXQUFULENBQW9CdEIsT0FBcEIsQ0FBNkI7QUFDM0IsR0FBSUEsU0FBVyxFQUFmLENBQW1CO0FBQ2pCLE1BQU9nQixhQUFZaEIsT0FBWixDQUFQO0FBQ0QsQ0FGRCxJQUVPLElBQUlBLFFBQVUsRUFBVixFQUFnQkEsU0FBVyxFQUEvQixDQUFtQztBQUN4QyxNQUFPb0IsYUFBWXBCLE9BQVosQ0FBUDtBQUNELENBRk0sSUFFQTtBQUNMLE1BQU9xQixhQUFZckIsT0FBWixDQUFQO0FBQ0Q7QUFDRjs7QUFFRCxHQUFJdUIsR0FBSWxCLFVBQVVGLFdBQWEsR0FBdkIsQ0FBNEIsQ0FBNUIsQ0FBK0IsRUFBL0IsQ0FBUjtBQUNBb0IsRUFBSWQsY0FBY2MsQ0FBZCxDQUFpQixDQUFqQixDQUFvQixHQUFwQixDQUFKO0FBQ0EsR0FBSUMsR0FBSW5CLFVBQVVELE1BQVEsR0FBbEIsQ0FBdUIsQ0FBdkIsQ0FBMEIsRUFBMUIsQ0FBUjtBQUNBLEdBQUlxQixlQUFnQmhCLGNBQWNlLENBQWQsQ0FBaUIsR0FBakIsQ0FBc0IsR0FBdEIsQ0FBcEI7QUFDQSxHQUFJRSxnQkFBaUJYO0FBQ25CUSxDQURtQjtBQUVuQkQsV0FBV0csYUFBWCxDQUZtQjtBQUduQixJQUhtQixDQUFyQjs7O0FBTUEsTUFBTztBQUNMekIsUUFBU0osd0JBQXdCNkIsYUFBeEIsQ0FESjtBQUVMeEIsU0FBVUgseUJBQXlCNEIsY0FBekIsQ0FGTCxDQUFQOztBQUlEOztBQUVEQyxPQUFPQyxPQUFQLENBQWlCO0FBQ2Y3QiwyREFEZTtBQUVmRyw2Q0FGZSxDQUFqQiIsImZpbGUiOiJTcHJpbmdDb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFNwcmluZ0NvbmZpZ1xuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnR5cGUgU3ByaW5nQ29uZmlnVHlwZSA9IHtcbiAgdGVuc2lvbjogbnVtYmVyLFxuICBmcmljdGlvbjogbnVtYmVyLFxufTtcblxuZnVuY3Rpb24gdGVuc2lvbkZyb21PcmlnYW1pVmFsdWUob1ZhbHVlKSB7XG4gIHJldHVybiAob1ZhbHVlIC0gMzApICogMy42MiArIDE5NDtcbn1cblxuZnVuY3Rpb24gZnJpY3Rpb25Gcm9tT3JpZ2FtaVZhbHVlKG9WYWx1ZSkge1xuICByZXR1cm4gKG9WYWx1ZSAtIDgpICogMyArIDI1O1xufVxuXG5mdW5jdGlvbiBmcm9tT3JpZ2FtaVRlbnNpb25BbmRGcmljdGlvbihcbiAgdGVuc2lvbjogbnVtYmVyLFxuICBmcmljdGlvbjogbnVtYmVyLFxuKTogU3ByaW5nQ29uZmlnVHlwZSB7XG4gIHJldHVybiB7XG4gICAgdGVuc2lvbjogdGVuc2lvbkZyb21PcmlnYW1pVmFsdWUodGVuc2lvbiksXG4gICAgZnJpY3Rpb246IGZyaWN0aW9uRnJvbU9yaWdhbWlWYWx1ZShmcmljdGlvbilcbiAgfTtcbn1cblxuZnVuY3Rpb24gZnJvbUJvdW5jaW5lc3NBbmRTcGVlZChcbiAgYm91bmNpbmVzczogbnVtYmVyLFxuICBzcGVlZDogbnVtYmVyLFxuKTogU3ByaW5nQ29uZmlnVHlwZSB7XG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWx1ZSwgc3RhcnRWYWx1ZSwgZW5kVmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlIC0gc3RhcnRWYWx1ZSkgLyAoZW5kVmFsdWUgLSBzdGFydFZhbHVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2plY3ROb3JtYWwobiwgc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzdGFydCArIChuICogKGVuZCAtIHN0YXJ0KSk7XG4gIH1cblxuICBmdW5jdGlvbiBsaW5lYXJJbnRlcnBvbGF0aW9uKHQsIHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gdCAqIGVuZCArICgxIC0gdCkgKiBzdGFydDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHF1YWRyYXRpY091dEludGVycG9sYXRpb24odCwgc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBsaW5lYXJJbnRlcnBvbGF0aW9uKDIgKiB0IC0gdCAqIHQsIHN0YXJ0LCBlbmQpO1xuICB9XG5cbiAgZnVuY3Rpb24gYjNGcmljdGlvbjEoeCkge1xuICAgIHJldHVybiAoMC4wMDA3ICogTWF0aC5wb3coeCwgMykpIC1cbiAgICAgICgwLjAzMSAqIE1hdGgucG93KHgsIDIpKSArIDAuNjQgKiB4ICsgMS4yODtcbiAgfVxuXG4gIGZ1bmN0aW9uIGIzRnJpY3Rpb24yKHgpIHtcbiAgICByZXR1cm4gKDAuMDAwMDQ0ICogTWF0aC5wb3coeCwgMykpIC1cbiAgICAgICgwLjAwNiAqIE1hdGgucG93KHgsIDIpKSArIDAuMzYgKiB4ICsgMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGIzRnJpY3Rpb24zKHgpIHtcbiAgICByZXR1cm4gKDAuMDAwMDAwNDUgKiBNYXRoLnBvdyh4LCAzKSkgLVxuICAgICAgKDAuMDAwMzMyICogTWF0aC5wb3coeCwgMikpICsgMC4xMDc4ICogeCArIDUuODQ7XG4gIH1cblxuICBmdW5jdGlvbiBiM05vYm91bmNlKHRlbnNpb24pIHtcbiAgICBpZiAodGVuc2lvbiA8PSAxOCkge1xuICAgICAgcmV0dXJuIGIzRnJpY3Rpb24xKHRlbnNpb24pO1xuICAgIH0gZWxzZSBpZiAodGVuc2lvbiA+IDE4ICYmIHRlbnNpb24gPD0gNDQpIHtcbiAgICAgIHJldHVybiBiM0ZyaWN0aW9uMih0ZW5zaW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGIzRnJpY3Rpb24zKHRlbnNpb24pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiID0gbm9ybWFsaXplKGJvdW5jaW5lc3MgLyAxLjcsIDAsIDIwKTtcbiAgYiA9IHByb2plY3ROb3JtYWwoYiwgMCwgMC44KTtcbiAgdmFyIHMgPSBub3JtYWxpemUoc3BlZWQgLyAxLjcsIDAsIDIwKTtcbiAgdmFyIGJvdW5jeVRlbnNpb24gPSBwcm9qZWN0Tm9ybWFsKHMsIDAuNSwgMjAwKTtcbiAgdmFyIGJvdW5jeUZyaWN0aW9uID0gcXVhZHJhdGljT3V0SW50ZXJwb2xhdGlvbihcbiAgICBiLFxuICAgIGIzTm9ib3VuY2UoYm91bmN5VGVuc2lvbiksXG4gICAgMC4wMVxuICApO1xuXG4gIHJldHVybiB7XG4gICAgdGVuc2lvbjogdGVuc2lvbkZyb21PcmlnYW1pVmFsdWUoYm91bmN5VGVuc2lvbiksXG4gICAgZnJpY3Rpb246IGZyaWN0aW9uRnJvbU9yaWdhbWlWYWx1ZShib3VuY3lGcmljdGlvbilcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZyb21PcmlnYW1pVGVuc2lvbkFuZEZyaWN0aW9uLFxuICBmcm9tQm91bmNpbmVzc0FuZFNwZWVkLFxufTtcbiJdfQ==