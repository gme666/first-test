ec6c680bc2af0c987ffe829102ba250c











'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}

var Blob=require('Blob');
var EventTarget=require('event-target-shim');
var NativeEventEmitter=require('NativeEventEmitter');
var NativeModules=require('NativeModules');
var Platform=require('Platform');
var WebSocketEvent=require('WebSocketEvent');

var base64=require('base64-js');
var binaryToBase64=require('binaryToBase64');
var invariant=require('fbjs/lib/invariant');var

WebSocketModule=NativeModules.WebSocketModule;

















var CONNECTING=0;
var OPEN=1;
var CLOSING=2;
var CLOSED=3;

var CLOSE_NORMAL=1000;

var WEBSOCKET_EVENTS=[
'close',
'error',
'message',
'open'];


var nextWebSocketId=0;var







WebSocket=function(_EventTarget){_inherits(WebSocket,_EventTarget);






























function WebSocket(url,protocols,options){_classCallCheck(this,WebSocket);var _this=_possibleConstructorReturn(this,(WebSocket.__proto__||Object.getPrototypeOf(WebSocket)).call(this));_this.CONNECTING=CONNECTING;_this.OPEN=OPEN;_this.CLOSING=CLOSING;_this.CLOSED=CLOSED;_this.readyState=CONNECTING;

if(typeof protocols==='string'){
protocols=[protocols];
}

if(!Array.isArray(protocols)){
protocols=null;
}

if(!WebSocket.isAvailable){
throw new Error('Cannot initialize WebSocket module. '+
'Native module WebSocketModule is missing.');
}

_this._eventEmitter=new NativeEventEmitter(WebSocketModule);
_this._socketId=nextWebSocketId++;
_this._registerEvents();
WebSocketModule.connect(url,protocols,options,_this._socketId);return _this;
}_createClass(WebSocket,[{key:'close',value:function close(























code,reason){
if(this.readyState===this.CLOSING||
this.readyState===this.CLOSED){
return;
}

this.readyState=this.CLOSING;
this._close(code,reason);
}},{key:'send',value:function send(

data){
if(this.readyState===this.CONNECTING){
throw new Error('INVALID_STATE_ERR');
}

if(data instanceof Blob){
var BlobModule=NativeModules.BlobModule;
invariant(BlobModule,'Native module BlobModule is required for blob support');
BlobModule.sendBlob(data,this._socketId);
return;
}

if(typeof data==='string'){
WebSocketModule.send(data,this._socketId);
return;
}

if(data instanceof ArrayBuffer||ArrayBuffer.isView(data)){
WebSocketModule.sendBinary(binaryToBase64(data),this._socketId);
return;
}

throw new Error('Unsupported data type');
}},{key:'ping',value:function ping()

{
if(this.readyState===this.CONNECTING){
throw new Error('INVALID_STATE_ERR');
}

WebSocketModule.ping(this._socketId);
}},{key:'_close',value:function _close(

code,reason){
if(Platform.OS==='android'){

var statusCode=typeof code==='number'?code:CLOSE_NORMAL;
var closeReason=typeof reason==='string'?reason:'';
WebSocketModule.close(statusCode,closeReason,this._socketId);
}else{
WebSocketModule.close(this._socketId);
}
}},{key:'_unregisterEvents',value:function _unregisterEvents()

{
this._subscriptions.forEach(function(e){return e.remove();});
this._subscriptions=[];
}},{key:'_registerEvents',value:function _registerEvents()

{var _this2=this;
this._subscriptions=[
this._eventEmitter.addListener('websocketMessage',function(ev){
if(ev.id!==_this2._socketId){
return;
}
var data=ev.data;
switch(ev.type){
case'binary':
data=base64.toByteArray(ev.data).buffer;
break;
case'blob':
data=Blob.create(ev.data);
break;}

_this2.dispatchEvent(new WebSocketEvent('message',{data:data}));
}),
this._eventEmitter.addListener('websocketOpen',function(ev){
if(ev.id!==_this2._socketId){
return;
}
_this2.readyState=_this2.OPEN;
_this2.dispatchEvent(new WebSocketEvent('open'));
}),
this._eventEmitter.addListener('websocketClosed',function(ev){
if(ev.id!==_this2._socketId){
return;
}
_this2.readyState=_this2.CLOSED;
_this2.dispatchEvent(new WebSocketEvent('close',{
code:ev.code,
reason:ev.reason}));

_this2._unregisterEvents();
_this2.close();
}),
this._eventEmitter.addListener('websocketFailed',function(ev){
if(ev.id!==_this2._socketId){
return;
}
_this2.readyState=_this2.CLOSED;
_this2.dispatchEvent(new WebSocketEvent('error',{
message:ev.message}));

_this2.dispatchEvent(new WebSocketEvent('close',{
message:ev.message}));

_this2._unregisterEvents();
_this2.close();
})];

}},{key:'binaryType',get:function get(){return this._binaryType;},set:function set(binaryType){if(binaryType!=='blob'&&binaryType!=='arraybuffer'){throw new Error('binaryType must be either \'blob\' or \'arraybuffer\'');}if(this._binaryType==='blob'||binaryType==='blob'){var BlobModule=NativeModules.BlobModule;invariant(BlobModule,'Native module BlobModule is required for blob support');if(BlobModule){if(binaryType==='blob'){BlobModule.enableBlobSupport(this._socketId);}else{BlobModule.disableBlobSupport(this._socketId);}}}this._binaryType=binaryType;}}]);return WebSocket;}(EventTarget.apply(undefined,WEBSOCKET_EVENTS));WebSocket.CONNECTING=CONNECTING;WebSocket.OPEN=OPEN;WebSocket.CLOSING=CLOSING;WebSocket.CLOSED=CLOSED;WebSocket.isAvailable=!!WebSocketModule;


module.exports=WebSocket;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,