8c0521116020ed9606512f44fe02dfe4
Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=require('react');var _react2=_interopRequireDefault(_react);
var _reactNative=require('react-native');



var _propTypes=require('prop-types');var _propTypes2=_interopRequireDefault(_propTypes);

var _xdate=require('xdate');var _xdate2=_interopRequireDefault(_xdate);
var _dateutils=require('../dateutils');var _dateutils2=_interopRequireDefault(_dateutils);
var _interface=require('../interface');
var _style=require('./style');var _style2=_interopRequireDefault(_style);
var _basic=require('./day/basic');var _basic2=_interopRequireDefault(_basic);
var _interactive=require('./day/interactive');var _interactive2=_interopRequireDefault(_interactive);
var _header=require('./header');var _header2=_interopRequireDefault(_header);
var _updater=require('./updater');var _updater2=_interopRequireDefault(_updater);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}


var viewPropTypes=_reactNative.ViewPropTypes||_reactNative.View.propTypes;

var EmptyArray=[];var

Calendar=function(_Component){_inherits(Calendar,_Component);














































function Calendar(props){_classCallCheck(this,Calendar);var _this=_possibleConstructorReturn(this,(Calendar.__proto__||Object.getPrototypeOf(Calendar)).call(this,
props));
_this.style=(0,_style2.default)(_this.props.theme);
var currentMonth=void 0;
if(props.current){
currentMonth=(0,_interface.parseDate)(props.current);
}else{
currentMonth=props.selected&&props.selected[0]?(0,_interface.parseDate)(props.selected[0]):(0,_xdate2.default)();
}
_this.state={
currentMonth:currentMonth};


_this.updateMonth=_this.updateMonth.bind(_this);
_this.addMonth=_this.addMonth.bind(_this);
_this.isSelected=_this.isSelected.bind(_this);
_this.pressDay=_this.pressDay.bind(_this);
_this.shouldComponentUpdate=_updater2.default;return _this;
}_createClass(Calendar,[{key:'componentWillReceiveProps',value:function componentWillReceiveProps(

nextProps){
var current=(0,_interface.parseDate)(nextProps.current);
if(current&&current.toString('yyyy MM')!==this.state.currentMonth.toString('yyyy MM')){
this.setState({
currentMonth:current.clone()});

}
}},{key:'updateMonth',value:function updateMonth(

day,doNotTriggerListeners){var _this2=this;
if(day.toString('yyyy MM')===this.state.currentMonth.toString('yyyy MM')){
return;
}
this.setState({
currentMonth:day.clone()},
function(){
if(!doNotTriggerListeners){
var currMont=_this2.state.currentMonth.clone();
if(_this2.props.onMonthChange){
_this2.props.onMonthChange((0,_interface.xdateToData)(currMont));
}
if(_this2.props.onVisibleMonthsChange){
_this2.props.onVisibleMonthsChange([(0,_interface.xdateToData)(currMont)]);
}
}
});
}},{key:'pressDay',value:function pressDay(

day){
var minDate=(0,_interface.parseDate)(this.props.minDate);
var maxDate=(0,_interface.parseDate)(this.props.maxDate);
if(!(minDate&&!_dateutils2.default.isGTE(day,minDate))&&!(maxDate&&!_dateutils2.default.isLTE(day,maxDate))){
var shouldUpdateMonth=this.props.disableMonthChange===undefined||!this.props.disableMonthChange;
if(shouldUpdateMonth){
this.updateMonth(day);
}
if(this.props.onDayPress){
this.props.onDayPress((0,_interface.xdateToData)(day));
}
}
}},{key:'addMonth',value:function addMonth(

count){
this.updateMonth(this.state.currentMonth.clone().addMonths(count,true));
}},{key:'isSelected',value:function isSelected(

day){
var selectedDays=[];
if(this.props.selected){
selectedDays=this.props.selected;
}
for(var i=0;i<selectedDays.length;i++){
if(_dateutils2.default.sameDate(day,(0,_interface.parseDate)(selectedDays[i]))){
return true;
}
}
return false;
}},{key:'renderDay',value:function renderDay(

day,id){
var minDate=(0,_interface.parseDate)(this.props.minDate);
var maxDate=(0,_interface.parseDate)(this.props.maxDate);
var state='';
if(this.isSelected(day)){
state='selected';
}else if(minDate&&!_dateutils2.default.isGTE(day,minDate)||maxDate&&!_dateutils2.default.isLTE(day,maxDate)){
state='disabled';
}else if(!_dateutils2.default.sameMonth(day,this.state.currentMonth)){
state='disabled';
}else if(_dateutils2.default.sameDate(day,(0,_xdate2.default)())){
state='today';
}
var dayComp=void 0;
if(!_dateutils2.default.sameMonth(day,this.state.currentMonth)&&this.props.hideExtraDays){
if(this.props.markingType==='interactive'){
dayComp=_react2.default.createElement(_reactNative.View,{key:id,style:{flex:1}});
}else{
dayComp=_react2.default.createElement(_reactNative.View,{key:id,style:{width:32}});
}
}else{
var DayComp=this.props.markingType==='interactive'?_interactive2.default:_basic2.default;
var markingExists=this.props.markedDates?true:false;
dayComp=
_react2.default.createElement(DayComp,{
key:id,
state:state,
theme:this.props.theme,
onPress:this.pressDay,
day:day,
marked:this.getDateMarking(day),
markingExists:markingExists},

day.getDate());


}
return dayComp;
}},{key:'getDateMarking',value:function getDateMarking(

day){
if(!this.props.markedDates){
return false;
}
var dates=this.props.markedDates[day.toString('yyyy-MM-dd')]||EmptyArray;
if(dates.length||dates){
return dates;
}else{
return false;
}
}},{key:'renderWeek',value:function renderWeek(

days,id){var _this3=this;
var week=[];
days.forEach(function(day,id2){
week.push(_this3.renderDay(day,id2));
},this);
return _react2.default.createElement(_reactNative.View,{style:this.style.week,key:id},week);
}},{key:'render',value:function render()

{

var days=_dateutils2.default.page(this.state.currentMonth,this.props.firstDay);
var weeks=[];
while(days.length){
weeks.push(this.renderWeek(days.splice(0,7),weeks.length));
}
var indicator=void 0;
var current=(0,_interface.parseDate)(this.props.current);
if(current){
var lastMonthOfDay=current.clone().addMonths(1,true).setDate(1).addDays(-1).toString('yyyy-MM-dd');
if(this.props.displayLoadingIndicator&&
!(this.props.markedDates&&this.props.markedDates[lastMonthOfDay])){
indicator=true;
}
}
return(
_react2.default.createElement(_reactNative.View,{style:[this.style.container,this.props.style]},
_react2.default.createElement(_header2.default,{
theme:this.props.theme,
hideArrows:this.props.hideArrows,
month:this.state.currentMonth,
addMonth:this.addMonth,
showIndicator:indicator,
firstDay:this.props.firstDay,
renderArrow:this.props.renderArrow,
monthFormat:this.props.monthFormat,
hideDayNames:this.props.hideDayNames}),

weeks));

}}]);return Calendar;}(_react.Component);Calendar.propTypes={theme:_propTypes2.default.object,markedDates:_propTypes2.default.object,style:viewPropTypes.style,selected:_propTypes2.default.array,current:_propTypes2.default.any,minDate:_propTypes2.default.any,maxDate:_propTypes2.default.any,firstDay:_propTypes2.default.number,markingType:_propTypes2.default.string,hideArrows:_propTypes2.default.bool,displayLoadingIndicator:_propTypes2.default.bool,hideExtraDays:_propTypes2.default.bool,onDayPress:_propTypes2.default.func,onMonthChange:_propTypes2.default.func,onVisibleMonthsChange:_propTypes2.default.func,renderArrow:_propTypes2.default.func,monthFormat:_propTypes2.default.string,disableMonthChange:_propTypes2.default.bool,hideDayNames:_propTypes2.default.bool};exports.default=


Calendar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,