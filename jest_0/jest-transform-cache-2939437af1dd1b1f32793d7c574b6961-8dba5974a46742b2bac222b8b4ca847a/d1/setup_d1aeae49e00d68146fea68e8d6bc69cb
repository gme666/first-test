5691595f738db52c29d1d3e4a7761445








'use strict';



















jest.
mock('setupDevtools').
mock('npmlog');




jest.
mock('InitializeCore').
mock('Image',function(){return mockComponent('Image');}).
mock('Text',function(){return mockComponent('Text');}).
mock('TextInput',function(){return mockComponent('TextInput');}).
mock('Modal',function(){return mockComponent('Modal');}).
mock('View',function(){return mockComponent('View');}).
mock('RefreshControl',function(){return require.requireMock('RefreshControlMock');}).
mock('ScrollView',function(){return require.requireMock('ScrollViewMock');}).
mock(
'ActivityIndicator',
function(){return mockComponent('ActivityIndicator');}).

mock('ListView',function(){return require.requireMock('ListViewMock');}).
mock('ListViewDataSource',function(){
var DataSource=require.requireActual('ListViewDataSource');
DataSource.prototype.toJSON=function(){
function ListViewDataSource(dataBlob){var _this=this;
this.items=0;

try{
Object.keys(dataBlob).forEach(function(key){
_this.items+=dataBlob[key]&&(
dataBlob[key].length||dataBlob[key].size||0);

});
}catch(e){
this.items='unknown';
}
}

return new ListViewDataSource(this._dataBlob);
};
return DataSource;
}).
mock('ensureComponentIsNative',function(){return function(){return true;};});var mockComponent=require.requireActual('./mockComponent');require.requireActual('../Libraries/polyfills/babelHelpers.js');require.requireActual('../Libraries/polyfills/Object.es7.js');require.requireActual('../Libraries/polyfills/error-guard');global.__DEV__=true;global.Promise=require.requireActual('promise');global.regeneratorRuntime=require.requireActual('regenerator-runtime/runtime');global.requestAnimationFrame=function(callback){setTimeout(callback,0);};global.cancelAnimationFrame=function(id){clearTimeout(id);};jest.setMock('ErrorUtils',require('ErrorUtils'));

var mockEmptyObject={};
var mockNativeModules={
AlertManager:{
alertWithArgs:jest.fn()},

AppState:{
addEventListener:jest.fn()},

AsyncLocalStorage:{
multiGet:jest.fn(function(keys,callback){return process.nextTick(function(){return callback(null,[]);});}),
multiSet:jest.fn(function(entries,callback){return process.nextTick(function(){return callback(null);});}),
multiRemove:jest.fn(function(keys,callback){return process.nextTick(function(){return callback(null);});}),
multiMerge:jest.fn(function(entries,callback){return process.nextTick(function(){return callback(null);});}),
clear:jest.fn(function(callback){return process.nextTick(function(){return callback(null);});}),
getAllKeys:jest.fn(function(callback){return process.nextTick(function(){return callback(null,[]);});})},

BuildInfo:{
appVersion:'0',
buildVersion:'0'},

Clipboard:{
setString:jest.fn()},

DataManager:{
queryData:jest.fn()},

DeviceInfo:{
Dimensions:{
window:{
fontScale:2,
height:1334,
scale:2,
width:750}}},



FacebookSDK:{
login:jest.fn(),
logout:jest.fn(),
queryGraphPath:jest.fn(function(path,method,params,callback){return callback();})},

FbRelayNativeAdapter:{
updateCLC:jest.fn()},

GraphPhotoUpload:{
upload:jest.fn()},

I18n:{
translationsDictionary:JSON.stringify({
'Good bye, {name}!|Bye message':'\xA1Adi\xF3s {name}!'})},


ImageLoader:{
getSize:jest.fn(
function(url){return new Promise(function(){return{width:320,height:240};});}),

prefetchImage:jest.fn()},

ImageViewManager:{
getSize:jest.fn(
function(uri,success){return process.nextTick(function(){return success(320,240);});}),

prefetchImage:jest.fn()},

KeyboardObserver:{
addListener:jest.fn(),
removeListeners:jest.fn()},

Linking:{
openURL:jest.fn(),
canOpenURL:jest.fn(
function(){return new Promise(function(resolve){return resolve(true);});}),

addEventListener:jest.fn(),
getInitialURL:jest.fn(
function(){return new Promise(function(resolve){return resolve();});}),

removeEventListener:jest.fn()},

LocationObserver:{
getCurrentPosition:jest.fn(),
startObserving:jest.fn(),
stopObserving:jest.fn()},

ModalFullscreenViewManager:{},
NetInfo:{
fetch:jest.fn(
function(){return new Promise(function(resolve){return resolve();});}),

addEventListener:jest.fn(),
isConnected:{
fetch:jest.fn(
function(){return new Promise(function(resolve){return resolve();});}),

addEventListener:jest.fn()}},


Networking:{
sendRequest:jest.fn(),
abortRequest:jest.fn(),
addListener:jest.fn(),
removeListeners:jest.fn()},

PushNotificationManager:{
presentLocalNotification:jest.fn(),
scheduleLocalNotification:jest.fn(),
cancelAllLocalNotifications:jest.fn(),
removeAllDeliveredNotifications:jest.fn(),
getDeliveredNotifications:jest.fn(function(callback){return process.nextTick(function(){return[];});}),
removeDeliveredNotifications:jest.fn(),
setApplicationIconBadgeNumber:jest.fn(),
getApplicationIconBadgeNumber:jest.fn(function(callback){return process.nextTick(function(){return callback(0);});}),
cancelLocalNotifications:jest.fn(),
getScheduledLocalNotifications:jest.fn(function(callback){return process.nextTick(function(){return callback();});}),
requestPermissions:jest.fn(function(){return Promise.resolve({alert:true,badge:true,sound:true});}),
abandonPermissions:jest.fn(),
checkPermissions:jest.fn(function(callback){return process.nextTick(function(){return callback({alert:true,badge:true,sound:true});});}),
getInitialNotification:jest.fn(function(){return Promise.resolve(null);}),
addListener:jest.fn(),
removeListeners:jest.fn()},

SourceCode:{
scriptURL:null},

StatusBarManager:{
setColor:jest.fn(),
setStyle:jest.fn(),
setHidden:jest.fn(),
setNetworkActivityIndicatorVisible:jest.fn(),
setBackgroundColor:jest.fn(),
setTranslucent:jest.fn()},

Timing:{
createTimer:jest.fn(),
deleteTimer:jest.fn()},

UIManager:{
AndroidViewPager:{
Commands:{
setPage:jest.fn(),
setPageWithoutAnimation:jest.fn()}},


blur:jest.fn(),
createView:jest.fn(),
dispatchViewManagerCommand:jest.fn(),
focus:jest.fn(),
setChildren:jest.fn(),
manageChildren:jest.fn(),
updateView:jest.fn(),
removeSubviewsFromContainerWithID:jest.fn(),
replaceExistingNonRootView:jest.fn(),
customBubblingEventTypes:{},
customDirectEventTypes:{},
AndroidTextInput:{
Commands:{}},

ModalFullscreenView:{
Constants:{}},

ScrollView:{
Constants:{}},

View:{
Constants:{}}},


WebSocketModule:{
connect:jest.fn(),
send:jest.fn(),
sendBinary:jest.fn(),
ping:jest.fn(),
close:jest.fn(),
addListener:jest.fn(),
removeListeners:jest.fn()}};



Object.keys(mockNativeModules).forEach(function(module){
try{
jest.doMock(module,function(){return mockNativeModules[module];});
}catch(e){
jest.doMock(module,function(){return mockNativeModules[module];},{virtual:true});
}
});

jest.
doMock('NativeModules',function(){return mockNativeModules;}).
doMock('ReactNativePropRegistry',function(){return{
register:function register(id){return id;},
getByID:function getByID(){return mockEmptyObject;}};});


jest.doMock('requireNativeComponent',function(){
var React=require('react');

return function(viewName){return function(props){return React.createElement(
viewName,
props,
props.children);};};

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNldHVwLmpzIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwibW9ja0NvbXBvbmVudCIsInJlcXVpcmUiLCJyZXF1aXJlTW9jayIsIkRhdGFTb3VyY2UiLCJyZXF1aXJlQWN0dWFsIiwicHJvdG90eXBlIiwidG9KU09OIiwiTGlzdFZpZXdEYXRhU291cmNlIiwiZGF0YUJsb2IiLCJpdGVtcyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwibGVuZ3RoIiwic2l6ZSIsImUiLCJfZGF0YUJsb2IiLCJnbG9iYWwiLCJfX0RFVl9fIiwiUHJvbWlzZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbGxiYWNrIiwic2V0VGltZW91dCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiaWQiLCJjbGVhclRpbWVvdXQiLCJzZXRNb2NrIiwibW9ja0VtcHR5T2JqZWN0IiwibW9ja05hdGl2ZU1vZHVsZXMiLCJBbGVydE1hbmFnZXIiLCJhbGVydFdpdGhBcmdzIiwiZm4iLCJBcHBTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJBc3luY0xvY2FsU3RvcmFnZSIsIm11bHRpR2V0IiwicHJvY2VzcyIsIm5leHRUaWNrIiwibXVsdGlTZXQiLCJlbnRyaWVzIiwibXVsdGlSZW1vdmUiLCJtdWx0aU1lcmdlIiwiY2xlYXIiLCJnZXRBbGxLZXlzIiwiQnVpbGRJbmZvIiwiYXBwVmVyc2lvbiIsImJ1aWxkVmVyc2lvbiIsIkNsaXBib2FyZCIsInNldFN0cmluZyIsIkRhdGFNYW5hZ2VyIiwicXVlcnlEYXRhIiwiRGV2aWNlSW5mbyIsIkRpbWVuc2lvbnMiLCJ3aW5kb3ciLCJmb250U2NhbGUiLCJoZWlnaHQiLCJzY2FsZSIsIndpZHRoIiwiRmFjZWJvb2tTREsiLCJsb2dpbiIsImxvZ291dCIsInF1ZXJ5R3JhcGhQYXRoIiwicGF0aCIsIm1ldGhvZCIsInBhcmFtcyIsIkZiUmVsYXlOYXRpdmVBZGFwdGVyIiwidXBkYXRlQ0xDIiwiR3JhcGhQaG90b1VwbG9hZCIsInVwbG9hZCIsIkkxOG4iLCJ0cmFuc2xhdGlvbnNEaWN0aW9uYXJ5IiwiSlNPTiIsInN0cmluZ2lmeSIsIkltYWdlTG9hZGVyIiwiZ2V0U2l6ZSIsInVybCIsInByZWZldGNoSW1hZ2UiLCJJbWFnZVZpZXdNYW5hZ2VyIiwidXJpIiwic3VjY2VzcyIsIktleWJvYXJkT2JzZXJ2ZXIiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVycyIsIkxpbmtpbmciLCJvcGVuVVJMIiwiY2FuT3BlblVSTCIsInJlc29sdmUiLCJnZXRJbml0aWFsVVJMIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIkxvY2F0aW9uT2JzZXJ2ZXIiLCJnZXRDdXJyZW50UG9zaXRpb24iLCJzdGFydE9ic2VydmluZyIsInN0b3BPYnNlcnZpbmciLCJNb2RhbEZ1bGxzY3JlZW5WaWV3TWFuYWdlciIsIk5ldEluZm8iLCJmZXRjaCIsImlzQ29ubmVjdGVkIiwiTmV0d29ya2luZyIsInNlbmRSZXF1ZXN0IiwiYWJvcnRSZXF1ZXN0IiwiUHVzaE5vdGlmaWNhdGlvbk1hbmFnZXIiLCJwcmVzZW50TG9jYWxOb3RpZmljYXRpb24iLCJzY2hlZHVsZUxvY2FsTm90aWZpY2F0aW9uIiwiY2FuY2VsQWxsTG9jYWxOb3RpZmljYXRpb25zIiwicmVtb3ZlQWxsRGVsaXZlcmVkTm90aWZpY2F0aW9ucyIsImdldERlbGl2ZXJlZE5vdGlmaWNhdGlvbnMiLCJyZW1vdmVEZWxpdmVyZWROb3RpZmljYXRpb25zIiwic2V0QXBwbGljYXRpb25JY29uQmFkZ2VOdW1iZXIiLCJnZXRBcHBsaWNhdGlvbkljb25CYWRnZU51bWJlciIsImNhbmNlbExvY2FsTm90aWZpY2F0aW9ucyIsImdldFNjaGVkdWxlZExvY2FsTm90aWZpY2F0aW9ucyIsInJlcXVlc3RQZXJtaXNzaW9ucyIsImFsZXJ0IiwiYmFkZ2UiLCJzb3VuZCIsImFiYW5kb25QZXJtaXNzaW9ucyIsImNoZWNrUGVybWlzc2lvbnMiLCJnZXRJbml0aWFsTm90aWZpY2F0aW9uIiwiU291cmNlQ29kZSIsInNjcmlwdFVSTCIsIlN0YXR1c0Jhck1hbmFnZXIiLCJzZXRDb2xvciIsInNldFN0eWxlIiwic2V0SGlkZGVuIiwic2V0TmV0d29ya0FjdGl2aXR5SW5kaWNhdG9yVmlzaWJsZSIsInNldEJhY2tncm91bmRDb2xvciIsInNldFRyYW5zbHVjZW50IiwiVGltaW5nIiwiY3JlYXRlVGltZXIiLCJkZWxldGVUaW1lciIsIlVJTWFuYWdlciIsIkFuZHJvaWRWaWV3UGFnZXIiLCJDb21tYW5kcyIsInNldFBhZ2UiLCJzZXRQYWdlV2l0aG91dEFuaW1hdGlvbiIsImJsdXIiLCJjcmVhdGVWaWV3IiwiZGlzcGF0Y2hWaWV3TWFuYWdlckNvbW1hbmQiLCJmb2N1cyIsInNldENoaWxkcmVuIiwibWFuYWdlQ2hpbGRyZW4iLCJ1cGRhdGVWaWV3IiwicmVtb3ZlU3Vidmlld3NGcm9tQ29udGFpbmVyV2l0aElEIiwicmVwbGFjZUV4aXN0aW5nTm9uUm9vdFZpZXciLCJjdXN0b21CdWJibGluZ0V2ZW50VHlwZXMiLCJjdXN0b21EaXJlY3RFdmVudFR5cGVzIiwiQW5kcm9pZFRleHRJbnB1dCIsIk1vZGFsRnVsbHNjcmVlblZpZXciLCJDb25zdGFudHMiLCJTY3JvbGxWaWV3IiwiVmlldyIsIldlYlNvY2tldE1vZHVsZSIsImNvbm5lY3QiLCJzZW5kIiwic2VuZEJpbmFyeSIsInBpbmciLCJjbG9zZSIsImRvTW9jayIsIm1vZHVsZSIsInZpcnR1YWwiLCJyZWdpc3RlciIsImdldEJ5SUQiLCJSZWFjdCIsImNyZWF0ZUVsZW1lbnQiLCJ2aWV3TmFtZSIsInByb3BzIiwiY2hpbGRyZW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0JBQTtBQUNHQyxJQURILENBQ1EsZUFEUjtBQUVHQSxJQUZILENBRVEsUUFGUjs7Ozs7QUFPQUQ7QUFDR0MsSUFESCxDQUNRLGdCQURSO0FBRUdBLElBRkgsQ0FFUSxPQUZSLENBRWlCLGlCQUFNQyxlQUFjLE9BQWQs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RDBCO0FBRTFCQyxLQUYwQjtBQUcxQkEsTUFBTUMsUUFIb0IsQ0FBVCxFQUFaLEVBQVA7O0FBS0QsQ0FSRCIsImZpbGUiOiJzZXR1cC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBtb2NrQ29tcG9uZW50ID0gcmVxdWlyZS5yZXF1aXJlQWN0dWFsKCcuL21vY2tDb21wb25lbnQnKTtcblxucmVxdWlyZS5yZXF1aXJlQWN0dWFsKCcuLi9MaWJyYXJpZXMvcG9seWZpbGxzL2JhYmVsSGVscGVycy5qcycpO1xucmVxdWlyZS5yZXF1aXJlQWN0dWFsKCcuLi9MaWJyYXJpZXMvcG9seWZpbGxzL09iamVjdC5lczcuanMnKTtcbnJlcXVpcmUucmVxdWlyZUFjdHVhbCgnLi4vTGlicmFyaWVzL3BvbHlmaWxscy9lcnJvci1ndWFyZCcpO1xuXG5nbG9iYWwuX19ERVZfXyA9IHRydWU7XG5cbmdsb2JhbC5Qcm9taXNlID0gcmVxdWlyZS5yZXF1aXJlQWN0dWFsKCdwcm9taXNlJyk7XG5nbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gcmVxdWlyZS5yZXF1aXJlQWN0dWFsKCdyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUnKTtcblxuZ2xvYmFsLnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xufTtcbmdsb2JhbC5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGlkKSB7XG4gIGNsZWFyVGltZW91dChpZCk7XG59O1xuXG5qZXN0XG4gIC5tb2NrKCdzZXR1cERldnRvb2xzJylcbiAgLm1vY2soJ25wbWxvZycpO1xuXG4vLyB0aGVyZSdzIGEgX19tb2NrX18gZm9yIGl0LlxuamVzdC5zZXRNb2NrKCdFcnJvclV0aWxzJywgcmVxdWlyZSgnRXJyb3JVdGlscycpKTtcblxuamVzdFxuICAubW9jaygnSW5pdGlhbGl6ZUNvcmUnKVxuICAubW9jaygnSW1hZ2UnLCAoKSA9PiBtb2NrQ29tcG9uZW50KCdJbWFnZScpKVxuICAubW9jaygnVGV4dCcsICgpID0+IG1vY2tDb21wb25lbnQoJ1RleHQnKSlcbiAgLm1vY2soJ1RleHRJbnB1dCcsICgpID0+IG1vY2tDb21wb25lbnQoJ1RleHRJbnB1dCcpKVxuICAubW9jaygnTW9kYWwnLCAoKSA9PiBtb2NrQ29tcG9uZW50KCdNb2RhbCcpKVxuICAubW9jaygnVmlldycsICgpID0+IG1vY2tDb21wb25lbnQoJ1ZpZXcnKSlcbiAgLm1vY2soJ1JlZnJlc2hDb250cm9sJywgKCkgPT4gcmVxdWlyZS5yZXF1aXJlTW9jaygnUmVmcmVzaENvbnRyb2xNb2NrJykpXG4gIC5tb2NrKCdTY3JvbGxWaWV3JywgKCkgPT4gcmVxdWlyZS5yZXF1aXJlTW9jaygnU2Nyb2xsVmlld01vY2snKSlcbiAgLm1vY2soXG4gICAgJ0FjdGl2aXR5SW5kaWNhdG9yJyxcbiAgICAoKSA9PiBtb2NrQ29tcG9uZW50KCdBY3Rpdml0eUluZGljYXRvcicpLFxuICApXG4gIC5tb2NrKCdMaXN0VmlldycsICgpID0+IHJlcXVpcmUucmVxdWlyZU1vY2soJ0xpc3RWaWV3TW9jaycpKVxuICAubW9jaygnTGlzdFZpZXdEYXRhU291cmNlJywgKCkgPT4ge1xuICAgIGNvbnN0IERhdGFTb3VyY2UgPSByZXF1aXJlLnJlcXVpcmVBY3R1YWwoJ0xpc3RWaWV3RGF0YVNvdXJjZScpO1xuICAgIERhdGFTb3VyY2UucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gTGlzdFZpZXdEYXRhU291cmNlKGRhdGFCbG9iKSB7XG4gICAgICAgIHRoaXMuaXRlbXMgPSAwO1xuICAgICAgICAvLyBFbnN1cmUgdGhpcyBkb2Vzbid0IHRocm93LlxuICAgICAgICB0cnkge1xuICAgICAgICAgIE9iamVjdC5rZXlzKGRhdGFCbG9iKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICB0aGlzLml0ZW1zICs9IGRhdGFCbG9iW2tleV0gJiYgKFxuICAgICAgICAgICAgICBkYXRhQmxvYltrZXldLmxlbmd0aCB8fCBkYXRhQmxvYltrZXldLnNpemUgfHwgMFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRoaXMuaXRlbXMgPSAndW5rbm93bic7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBMaXN0Vmlld0RhdGFTb3VyY2UodGhpcy5fZGF0YUJsb2IpO1xuICAgIH07XG4gICAgcmV0dXJuIERhdGFTb3VyY2U7XG4gIH0pXG4gIC5tb2NrKCdlbnN1cmVDb21wb25lbnRJc05hdGl2ZScsICgpID0+ICgpID0+IHRydWUpO1xuXG5jb25zdCBtb2NrRW1wdHlPYmplY3QgPSB7fTtcbmNvbnN0IG1vY2tOYXRpdmVNb2R1bGVzID0ge1xuICBBbGVydE1hbmFnZXI6IHtcbiAgICBhbGVydFdpdGhBcmdzOiBqZXN0LmZuKCksXG4gIH0sXG4gIEFwcFN0YXRlOiB7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICB9LFxuICBBc3luY0xvY2FsU3RvcmFnZToge1xuICAgIG11bHRpR2V0OiBqZXN0LmZuKChrZXlzLCBjYWxsYmFjaykgPT4gcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBjYWxsYmFjayhudWxsLCBbXSkpKSxcbiAgICBtdWx0aVNldDogamVzdC5mbigoZW50cmllcywgY2FsbGJhY2spID0+IHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2sobnVsbCkpKSxcbiAgICBtdWx0aVJlbW92ZTogamVzdC5mbigoa2V5cywgY2FsbGJhY2spID0+IHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2sobnVsbCkpKSxcbiAgICBtdWx0aU1lcmdlOiBqZXN0LmZuKChlbnRyaWVzLCBjYWxsYmFjaykgPT4gcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBjYWxsYmFjayhudWxsKSkpLFxuICAgIGNsZWFyOiBqZXN0LmZuKGNhbGxiYWNrID0+IHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2sobnVsbCkpKSxcbiAgICBnZXRBbGxLZXlzOiBqZXN0LmZuKGNhbGxiYWNrID0+IHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2sobnVsbCwgW10pKSksXG4gIH0sXG4gIEJ1aWxkSW5mbzoge1xuICAgIGFwcFZlcnNpb246ICcwJyxcbiAgICBidWlsZFZlcnNpb246ICcwJyxcbiAgfSxcbiAgQ2xpcGJvYXJkOiB7XG4gICAgc2V0U3RyaW5nOiBqZXN0LmZuKCksXG4gIH0sXG4gIERhdGFNYW5hZ2VyOiB7XG4gICAgcXVlcnlEYXRhOiBqZXN0LmZuKCksXG4gIH0sXG4gIERldmljZUluZm86IHtcbiAgICBEaW1lbnNpb25zOiB7XG4gICAgICB3aW5kb3c6IHtcbiAgICAgICAgZm9udFNjYWxlOiAyLFxuICAgICAgICBoZWlnaHQ6IDEzMzQsXG4gICAgICAgIHNjYWxlOiAyLFxuICAgICAgICB3aWR0aDogNzUwLFxuICAgICAgfSxcbiAgICB9LFxuICB9LFxuICBGYWNlYm9va1NESzoge1xuICAgIGxvZ2luOiBqZXN0LmZuKCksXG4gICAgbG9nb3V0OiBqZXN0LmZuKCksXG4gICAgcXVlcnlHcmFwaFBhdGg6IGplc3QuZm4oKHBhdGgsIG1ldGhvZCwgcGFyYW1zLCBjYWxsYmFjaykgPT4gY2FsbGJhY2soKSksXG4gIH0sXG4gIEZiUmVsYXlOYXRpdmVBZGFwdGVyOiB7XG4gICAgdXBkYXRlQ0xDOiBqZXN0LmZuKCksXG4gIH0sXG4gIEdyYXBoUGhvdG9VcGxvYWQ6IHtcbiAgICB1cGxvYWQ6IGplc3QuZm4oKSxcbiAgfSxcbiAgSTE4bjoge1xuICAgIHRyYW5zbGF0aW9uc0RpY3Rpb25hcnk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICdHb29kIGJ5ZSwge25hbWV9IXxCeWUgbWVzc2FnZSc6ICdcXHV7MDBBMX1BZGlcXHV7MDBGM31zIHtuYW1lfSEnLFxuICAgIH0pLFxuICB9LFxuICBJbWFnZUxvYWRlcjoge1xuICAgIGdldFNpemU6IGplc3QuZm4oXG4gICAgICAodXJsKSA9PiBuZXcgUHJvbWlzZSgoKSA9PiAoe3dpZHRoOiAzMjAsIGhlaWdodDogMjQwfSkpXG4gICAgKSxcbiAgICBwcmVmZXRjaEltYWdlOiBqZXN0LmZuKCksXG4gIH0sXG4gIEltYWdlVmlld01hbmFnZXI6IHtcbiAgICBnZXRTaXplOiBqZXN0LmZuKFxuICAgICAgKHVyaSwgc3VjY2VzcykgPT4gcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBzdWNjZXNzKDMyMCwgMjQwKSlcbiAgICApLFxuICAgIHByZWZldGNoSW1hZ2U6IGplc3QuZm4oKSxcbiAgfSxcbiAgS2V5Ym9hcmRPYnNlcnZlcjoge1xuICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgcmVtb3ZlTGlzdGVuZXJzOiBqZXN0LmZuKCksXG4gIH0sXG4gIExpbmtpbmc6IHtcbiAgICBvcGVuVVJMOiBqZXN0LmZuKCksXG4gICAgY2FuT3BlblVSTDogamVzdC5mbihcbiAgICAgICgpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiByZXNvbHZlKHRydWUpKVxuICAgICksXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIGdldEluaXRpYWxVUkw6IGplc3QuZm4oXG4gICAgICAoKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gcmVzb2x2ZSgpKVxuICAgICksXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICB9LFxuICBMb2NhdGlvbk9ic2VydmVyOiB7XG4gICAgZ2V0Q3VycmVudFBvc2l0aW9uOiBqZXN0LmZuKCksXG4gICAgc3RhcnRPYnNlcnZpbmc6IGplc3QuZm4oKSxcbiAgICBzdG9wT2JzZXJ2aW5nOiBqZXN0LmZuKCksXG4gIH0sXG4gIE1vZGFsRnVsbHNjcmVlblZpZXdNYW5hZ2VyOiB7fSxcbiAgTmV0SW5mbzoge1xuICAgIGZldGNoOiBqZXN0LmZuKFxuICAgICAgKCkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHJlc29sdmUoKSlcbiAgICApLFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICBpc0Nvbm5lY3RlZDoge1xuICAgICAgZmV0Y2g6IGplc3QuZm4oXG4gICAgICAgICgpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiByZXNvbHZlKCkpXG4gICAgICApLFxuICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIH0sXG4gIH0sXG4gIE5ldHdvcmtpbmc6IHtcbiAgICBzZW5kUmVxdWVzdDogamVzdC5mbigpLFxuICAgIGFib3J0UmVxdWVzdDogamVzdC5mbigpLFxuICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgcmVtb3ZlTGlzdGVuZXJzOiBqZXN0LmZuKCksXG4gIH0sXG4gIFB1c2hOb3RpZmljYXRpb25NYW5hZ2VyOiB7XG4gICAgcHJlc2VudExvY2FsTm90aWZpY2F0aW9uOiBqZXN0LmZuKCksXG4gICAgc2NoZWR1bGVMb2NhbE5vdGlmaWNhdGlvbjogamVzdC5mbigpLFxuICAgIGNhbmNlbEFsbExvY2FsTm90aWZpY2F0aW9uczogamVzdC5mbigpLFxuICAgIHJlbW92ZUFsbERlbGl2ZXJlZE5vdGlmaWNhdGlvbnM6IGplc3QuZm4oKSxcbiAgICBnZXREZWxpdmVyZWROb3RpZmljYXRpb25zOiBqZXN0LmZuKGNhbGxiYWNrID0+IHByb2Nlc3MubmV4dFRpY2soKCkgPT4gW10pKSxcbiAgICByZW1vdmVEZWxpdmVyZWROb3RpZmljYXRpb25zOiBqZXN0LmZuKCksXG4gICAgc2V0QXBwbGljYXRpb25JY29uQmFkZ2VOdW1iZXI6IGplc3QuZm4oKSxcbiAgICBnZXRBcHBsaWNhdGlvbkljb25CYWRnZU51bWJlcjogamVzdC5mbihjYWxsYmFjayA9PiBwcm9jZXNzLm5leHRUaWNrKCgpID0+IGNhbGxiYWNrKDApKSksXG4gICAgY2FuY2VsTG9jYWxOb3RpZmljYXRpb25zOiBqZXN0LmZuKCksXG4gICAgZ2V0U2NoZWR1bGVkTG9jYWxOb3RpZmljYXRpb25zOiBqZXN0LmZuKGNhbGxiYWNrID0+IHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2soKSkpLFxuICAgIHJlcXVlc3RQZXJtaXNzaW9uczogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoe2FsZXJ0OiB0cnVlLCBiYWRnZTogdHJ1ZSwgc291bmQ6IHRydWV9KSksXG4gICAgYWJhbmRvblBlcm1pc3Npb25zOiBqZXN0LmZuKCksXG4gICAgY2hlY2tQZXJtaXNzaW9uczogamVzdC5mbihjYWxsYmFjayA9PiBwcm9jZXNzLm5leHRUaWNrKCgpID0+IGNhbGxiYWNrKHthbGVydDogdHJ1ZSwgYmFkZ2U6IHRydWUsIHNvdW5kOiB0cnVlfSkpKSxcbiAgICBnZXRJbml0aWFsTm90aWZpY2F0aW9uOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZShudWxsKSksXG4gICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICByZW1vdmVMaXN0ZW5lcnM6IGplc3QuZm4oKSxcbiAgfSxcbiAgU291cmNlQ29kZToge1xuICAgIHNjcmlwdFVSTDogbnVsbCxcbiAgfSxcbiAgU3RhdHVzQmFyTWFuYWdlcjoge1xuICAgIHNldENvbG9yOiBqZXN0LmZuKCksXG4gICAgc2V0U3R5bGU6IGplc3QuZm4oKSxcbiAgICBzZXRIaWRkZW46IGplc3QuZm4oKSxcbiAgICBzZXROZXR3b3JrQWN0aXZpdHlJbmRpY2F0b3JWaXNpYmxlOiBqZXN0LmZuKCksXG4gICAgc2V0QmFja2dyb3VuZENvbG9yOiBqZXN0LmZuKCksXG4gICAgc2V0VHJhbnNsdWNlbnQ6IGplc3QuZm4oKSxcbiAgfSxcbiAgVGltaW5nOiB7XG4gICAgY3JlYXRlVGltZXI6IGplc3QuZm4oKSxcbiAgICBkZWxldGVUaW1lcjogamVzdC5mbigpLFxuICB9LFxuICBVSU1hbmFnZXI6IHtcbiAgICBBbmRyb2lkVmlld1BhZ2VyOiB7XG4gICAgICBDb21tYW5kczoge1xuICAgICAgICBzZXRQYWdlOiBqZXN0LmZuKCksXG4gICAgICAgIHNldFBhZ2VXaXRob3V0QW5pbWF0aW9uOiBqZXN0LmZuKCksXG4gICAgICB9LFxuICAgIH0sXG4gICAgYmx1cjogamVzdC5mbigpLFxuICAgIGNyZWF0ZVZpZXc6IGplc3QuZm4oKSxcbiAgICBkaXNwYXRjaFZpZXdNYW5hZ2VyQ29tbWFuZDogamVzdC5mbigpLFxuICAgIGZvY3VzOiBqZXN0LmZuKCksXG4gICAgc2V0Q2hpbGRyZW46IGplc3QuZm4oKSxcbiAgICBtYW5hZ2VDaGlsZHJlbjogamVzdC5mbigpLFxuICAgIHVwZGF0ZVZpZXc6IGplc3QuZm4oKSxcbiAgICByZW1vdmVTdWJ2aWV3c0Zyb21Db250YWluZXJXaXRoSUQ6IGplc3QuZm4oKSxcbiAgICByZXBsYWNlRXhpc3RpbmdOb25Sb290VmlldzogamVzdC5mbigpLFxuICAgIGN1c3RvbUJ1YmJsaW5nRXZlbnRUeXBlczoge30sXG4gICAgY3VzdG9tRGlyZWN0RXZlbnRUeXBlczoge30sXG4gICAgQW5kcm9pZFRleHRJbnB1dDoge1xuICAgICAgQ29tbWFuZHM6IHt9LFxuICAgIH0sXG4gICAgTW9kYWxGdWxsc2NyZWVuVmlldzoge1xuICAgICAgQ29uc3RhbnRzOiB7fSxcbiAgICB9LFxuICAgIFNjcm9sbFZpZXc6IHtcbiAgICAgIENvbnN0YW50czoge30sXG4gICAgfSxcbiAgICBWaWV3OiB7XG4gICAgICBDb25zdGFudHM6IHt9LFxuICAgIH0sXG4gIH0sXG4gIFdlYlNvY2tldE1vZHVsZToge1xuICAgIGNvbm5lY3Q6IGplc3QuZm4oKSxcbiAgICBzZW5kOiBqZXN0LmZuKCksXG4gICAgc2VuZEJpbmFyeTogamVzdC5mbigpLFxuICAgIHBpbmc6IGplc3QuZm4oKSxcbiAgICBjbG9zZTogamVzdC5mbigpLFxuICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgcmVtb3ZlTGlzdGVuZXJzOiBqZXN0LmZuKCksXG4gIH0sXG59O1xuXG5PYmplY3Qua2V5cyhtb2NrTmF0aXZlTW9kdWxlcykuZm9yRWFjaChtb2R1bGUgPT4ge1xuICB0cnkge1xuICAgIGplc3QuZG9Nb2NrKG1vZHVsZSwgKCkgPT4gbW9ja05hdGl2ZU1vZHVsZXNbbW9kdWxlXSk7IC8vIG5lZWRlZCBieSBGYWNlYm9va1NESy10ZXN0XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBqZXN0LmRvTW9jayhtb2R1bGUsICgpID0+IG1vY2tOYXRpdmVNb2R1bGVzW21vZHVsZV0sIHt2aXJ0dWFsOiB0cnVlfSk7XG4gIH1cbn0pO1xuXG5qZXN0XG4gIC5kb01vY2soJ05hdGl2ZU1vZHVsZXMnLCAoKSA9PiBtb2NrTmF0aXZlTW9kdWxlcylcbiAgLmRvTW9jaygnUmVhY3ROYXRpdmVQcm9wUmVnaXN0cnknLCAoKSA9PiAoe1xuICAgIHJlZ2lzdGVyOiBpZCA9PiBpZCxcbiAgICBnZXRCeUlEOiAoKSA9PiBtb2NrRW1wdHlPYmplY3QsXG4gIH0pKTtcblxuamVzdC5kb01vY2soJ3JlcXVpcmVOYXRpdmVDb21wb25lbnQnLCAoKSA9PiB7XG4gIGNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuICByZXR1cm4gdmlld05hbWUgPT4gcHJvcHMgPT4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICB2aWV3TmFtZSxcbiAgICBwcm9wcyxcbiAgICBwcm9wcy5jaGlsZHJlbixcbiAgKTtcbn0pO1xuIl19