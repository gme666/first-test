9e7e79da46b6a6027cc80178d8bd842d















var _inGuard=0;






var _globalHandler=function onError(e){
throw e;
};









var ErrorUtils={
setGlobalHandler:function setGlobalHandler(fun){
_globalHandler=fun;
},
getGlobalHandler:function getGlobalHandler(){
return _globalHandler;
},
reportError:function reportError(error){
_globalHandler&&_globalHandler(error);
},
reportFatalError:function reportFatalError(error){
_globalHandler&&_globalHandler(error,true);
},
applyWithGuard:function applyWithGuard(fun,context,args){
try{
_inGuard++;
return fun.apply(context,args);
}catch(e){
ErrorUtils.reportError(e);
}finally{
_inGuard--;
}
return null;
},
applyWithGuardIfNeeded:function applyWithGuardIfNeeded(fun,context,args){
if(ErrorUtils.inGuard()){
return fun.apply(context,args);
}else{
ErrorUtils.applyWithGuard(fun,context,args);
}
return null;
},
inGuard:function inGuard(){
return _inGuard;
},
guard:function guard(fun,name,context){
if(typeof fun!=='function'){
console.warn('A function must be passed to ErrorUtils.guard, got ',fun);
return null;
}
name=name||fun.name||'<generated guard>';
function guarded(){
return(
ErrorUtils.applyWithGuard(
fun,
context||this,
arguments,
null,
name));


}

return guarded;
}};


global.ErrorUtils=ErrorUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVycm9yLWd1YXJkLmpzIl0sIm5hbWVzIjpbIl9pbkd1YXJkIiwiX2dsb2JhbEhhbmRsZXIiLCJvbkVycm9yIiwiZSIsIkVycm9yVXRpbHMiLCJzZXRHbG9iYWxIYW5kbGVyIiwiZnVuIiwiZ2V0R2xvYmFsSGFuZGxlciIsInJlcG9ydEVycm9yIiwiZXJyb3IiLCJyZXBvcnRGYXRhbEVycm9yIiwiYXBwbHlXaXRoR3VhcmQiLCJjb250ZXh0IiwiYXJncyIsImFwcGx5IiwiYXBwbHlXaXRoR3VhcmRJZk5lZWRlZCIsImluR3VhcmQiLCJndWFyZCIsIm5hbWUiLCJjb25zb2xlIiwid2FybiIsImd1YXJkZWQiLCJhcmd1bWVudHMiLCJnbG9iYWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQWVBLEdBQUlBLFVBQVcsQ0FBZjs7Ozs7OztBQU9BLEdBQUlDLGdCQUFpQixRQUFTQyxRQUFULENBQWlCQyxDQUFqQixDQUFvQjtBQUN2QyxLQUFNQSxFQUFOO0FBQ0QsQ0FGRDs7Ozs7Ozs7OztBQVlBLEdBQU1DLFlBQWE7QUFDakJDLGdCQURpQiwyQkFDQUMsR0FEQSxDQUNLO0FBQ3BCTCxlQUFpQkssR0FBakI7QUFDRCxDQUhnQjtBQUlqQkMsZ0JBSmlCLDRCQUlFO0FBQ2pCLE1BQU9OLGVBQVA7QUFDRCxDQU5nQjtBQU9qQk8sV0FQaUIsc0JBT0xDLEtBUEssQ0FPRTtBQUNqQlIsZ0JBQWtCQSxlQUFlUSxLQUFmLENBQWxCO0FBQ0QsQ0FUZ0I7QUFVakJDLGdCQVZpQiwyQkFVQUQsS0FWQSxDQVVPO0FBQ3RCUixnQkFBa0JBLGVBQWVRLEtBQWYsQ0FBc0IsSUFBdEIsQ0FBbEI7QUFDRCxDQVpnQjtBQWFqQkUsY0FiaUIseUJBYUZMLEdBYkUsQ0FhR00sT0FiSCxDQWFZQyxJQWJaLENBYWtCO0FBQ2pDLEdBQUk7QUFDRmI7QUFDQSxNQUFPTSxLQUFJUSxLQUFKLENBQVVGLE9BQVYsQ0FBbUJDLElBQW5CLENBQVA7QUFDRCxDQUFDLE1BQU9WLENBQVAsQ0FBVTtBQUNWQyxXQUFXSSxXQUFYLENBQXVCTCxDQUF2QjtBQUNELENBTEQsT0FLVTtBQUNSSDtBQUNEO0FBQ0QsTUFBTyxLQUFQO0FBQ0QsQ0F2QmdCO0FBd0JqQmUsc0JBeEJpQixpQ0F3Qk1ULEdBeEJOLENBd0JXTSxPQXhCWCxDQXdCb0JDLElBeEJwQixDQXdCMEI7QUFDekMsR0FBSVQsV0FBV1ksT0FBWCxFQUFKLENBQTBCO0FBQ3hCLE1BQU9WLEtBQUlRLEtBQUosQ0FBVUYsT0FBVixDQUFtQkMsSUFBbkIsQ0FBUDtBQUNELENBRkQsSUFFTztBQUNMVCxXQUFXTyxjQUFYLENBQTBCTCxHQUExQixDQUErQk0sT0FBL0IsQ0FBd0NDLElBQXhDO0FBQ0Q7QUFDRCxNQUFPLEtBQVA7QUFDRCxDQS9CZ0I7QUFnQ2pCRyxPQWhDaUIsbUJBZ0NQO0FBQ1IsTUFBT2hCLFNBQVA7QUFDRCxDQWxDZ0I7QUFtQ2pCaUIsS0FuQ2lCLGdCQW1DWFgsR0FuQ1csQ0FtQ05ZLElBbkNNLENBbUNBTixPQW5DQSxDQW1DUztBQUN4QixHQUFJLE1BQU9OLElBQVAsR0FBZSxVQUFuQixDQUErQjtBQUM3QmEsUUFBUUMsSUFBUixDQUFhLHFEQUFiLENBQW9FZCxHQUFwRTtBQUNBLE1BQU8sS0FBUDtBQUNEO0FBQ0RZLEtBQU9BLE1BQVFaLElBQUlZLElBQVosRUFBb0IsbUJBQTNCO0FBQ0EsUUFBU0csUUFBVCxFQUFtQjtBQUNqQjtBQUNFakIsV0FBV08sY0FBWDtBQUNFTCxHQURGO0FBRUVNLFNBQVcsSUFGYjtBQUdFVSxTQUhGO0FBSUUsSUFKRjtBQUtFSixJQUxGLENBREY7OztBQVNEOztBQUVELE1BQU9HLFFBQVA7QUFDRCxDQXREZ0IsQ0FBbkI7OztBQXlEQUUsT0FBT25CLFVBQVAsQ0FBb0JBLFVBQXBCIiwiZmlsZSI6ImVycm9yLWd1YXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBlcnJvci1ndWFyZFxuICogQHBvbHlmaWxsXG4gKiBAbm9saW50XG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgc3RyaWN0ICovXG5cbmxldCBfaW5HdWFyZCA9IDA7XG5cbi8qKlxuICogVGhpcyBpcyB0aGUgZXJyb3IgaGFuZGxlciB0aGF0IGlzIGNhbGxlZCB3aGVuIHdlIGVuY291bnRlciBhbiBleGNlcHRpb25cbiAqIHdoZW4gbG9hZGluZyBhIG1vZHVsZS4gVGhpcyB3aWxsIHJlcG9ydCBhbnkgZXJyb3JzIGVuY291bnRlcmVkIGJlZm9yZVxuICogRXhjZXB0aW9uc01hbmFnZXIgaXMgY29uZmlndXJlZC5cbiAqL1xubGV0IF9nbG9iYWxIYW5kbGVyID0gZnVuY3Rpb24gb25FcnJvcihlKSB7XG4gIHRocm93IGU7XG59O1xuXG4vKipcbiAqIFRoZSBwYXJ0aWN1bGFyIHJlcXVpcmUgcnVudGltZSB0aGF0IHdlIGFyZSB1c2luZyBsb29rcyBmb3IgYSBnbG9iYWxcbiAqIGBFcnJvclV0aWxzYCBvYmplY3QgYW5kIGlmIGl0IGV4aXN0cywgdGhlbiBpdCByZXF1aXJlcyBtb2R1bGVzIHdpdGggdGhlXG4gKiBlcnJvciBoYW5kbGVyIHNwZWNpZmllZCB2aWEgRXJyb3JVdGlscy5zZXRHbG9iYWxIYW5kbGVyIGJ5IGNhbGxpbmcgdGhlXG4gKiByZXF1aXJlIGZ1bmN0aW9uIHdpdGggYXBwbHlXaXRoR3VhcmQuIFNpbmNlIHRoZSByZXF1aXJlIG1vZHVsZSBpcyBsb2FkZWRcbiAqIGJlZm9yZSBhbnkgb2YgdGhlIG1vZHVsZXMsIHRoaXMgRXJyb3JVdGlscyBtdXN0IGJlIGRlZmluZWQgKGFuZCB0aGUgaGFuZGxlclxuICogc2V0KSBnbG9iYWxseSBiZWZvcmUgcmVxdWlyaW5nIGFueXRoaW5nLlxuICovXG5jb25zdCBFcnJvclV0aWxzID0ge1xuICBzZXRHbG9iYWxIYW5kbGVyKGZ1bikge1xuICAgIF9nbG9iYWxIYW5kbGVyID0gZnVuO1xuICB9LFxuICBnZXRHbG9iYWxIYW5kbGVyKCkge1xuICAgIHJldHVybiBfZ2xvYmFsSGFuZGxlcjtcbiAgfSxcbiAgcmVwb3J0RXJyb3IoZXJyb3IpIHtcbiAgICBfZ2xvYmFsSGFuZGxlciAmJiBfZ2xvYmFsSGFuZGxlcihlcnJvcik7XG4gIH0sXG4gIHJlcG9ydEZhdGFsRXJyb3IoZXJyb3IpIHtcbiAgICBfZ2xvYmFsSGFuZGxlciAmJiBfZ2xvYmFsSGFuZGxlcihlcnJvciwgdHJ1ZSk7XG4gIH0sXG4gIGFwcGx5V2l0aEd1YXJkKGZ1biwgY29udGV4dCwgYXJncykge1xuICAgIHRyeSB7XG4gICAgICBfaW5HdWFyZCsrO1xuICAgICAgcmV0dXJuIGZ1bi5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBFcnJvclV0aWxzLnJlcG9ydEVycm9yKGUpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaW5HdWFyZC0tO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgYXBwbHlXaXRoR3VhcmRJZk5lZWRlZChmdW4sIGNvbnRleHQsIGFyZ3MpIHtcbiAgICBpZiAoRXJyb3JVdGlscy5pbkd1YXJkKCkpIHtcbiAgICAgIHJldHVybiBmdW4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIEVycm9yVXRpbHMuYXBwbHlXaXRoR3VhcmQoZnVuLCBjb250ZXh0LCBhcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIGluR3VhcmQoKSB7XG4gICAgcmV0dXJuIF9pbkd1YXJkO1xuICB9LFxuICBndWFyZChmdW4sIG5hbWUsIGNvbnRleHQpIHtcbiAgICBpZiAodHlwZW9mIGZ1biAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKCdBIGZ1bmN0aW9uIG11c3QgYmUgcGFzc2VkIHRvIEVycm9yVXRpbHMuZ3VhcmQsIGdvdCAnLCBmdW4pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIG5hbWUgPSBuYW1lIHx8IGZ1bi5uYW1lIHx8ICc8Z2VuZXJhdGVkIGd1YXJkPic7XG4gICAgZnVuY3Rpb24gZ3VhcmRlZCgpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIEVycm9yVXRpbHMuYXBwbHlXaXRoR3VhcmQoXG4gICAgICAgICAgZnVuLFxuICAgICAgICAgIGNvbnRleHQgfHwgdGhpcyxcbiAgICAgICAgICBhcmd1bWVudHMsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBuYW1lXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGd1YXJkZWQ7XG4gIH0sXG59O1xuXG5nbG9iYWwuRXJyb3JVdGlscyA9IEVycm9yVXRpbHM7XG4iXX0=