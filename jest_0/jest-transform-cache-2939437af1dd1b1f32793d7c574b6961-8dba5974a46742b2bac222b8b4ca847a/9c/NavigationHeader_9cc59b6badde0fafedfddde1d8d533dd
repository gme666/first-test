e54453d92b438bf53f8a69c0b6bdc091
































'use strict';var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}

var React=require('react');
var ReactNative=require('react-native');
var NavigationContainer=require('./NavigationContainer');
var NavigationHeaderTitle=require('./NavigationHeaderTitle');
var NavigationHeaderBackButton=require('./NavigationHeaderBackButton');
var NavigationPropTypes=require('./NavigationPropTypes');
var NavigationHeaderStyleInterpolator=require('./NavigationHeaderStyleInterpolator');
var ReactComponentWithPureRenderMixin=require('react-addons-pure-render-mixin');var


Animated=



ReactNative.Animated,Platform=ReactNative.Platform,StyleSheet=ReactNative.StyleSheet,View=ReactNative.View;























var APPBAR_HEIGHT=Platform.OS==='ios'?44:56;
var STATUSBAR_HEIGHT=Platform.OS==='ios'?20:0;var
PropTypes=React.PropTypes;var

NavigationHeader=function(_React$Component){_inherits(NavigationHeader,_React$Component);function NavigationHeader(){_classCallCheck(this,NavigationHeader);return _possibleConstructorReturn(this,(NavigationHeader.__proto__||Object.getPrototypeOf(NavigationHeader)).apply(this,arguments));}_createClass(NavigationHeader,[{key:'shouldComponentUpdate',value:function shouldComponentUpdate(




























nextProps,nextState){
return ReactComponentWithPureRenderMixin.shouldComponentUpdate.call(
this,
nextProps,
nextState);

}},{key:'render',value:function render()

{var _this2=this;var _props=
this.props,scenes=_props.scenes,style=_props.style,viewProps=_props.viewProps;

var scenesProps=scenes.map(function(scene){
var props=NavigationPropTypes.extractSceneRendererProps(_this2.props);
props.scene=scene;
return props;
});

return(
React.createElement(View,_extends({style:[styles.appbar,style]},viewProps),
scenesProps.map(this._renderLeft,this),
scenesProps.map(this._renderTitle,this),
scenesProps.map(this._renderRight,this)));


}},{key:'_renderLeft',value:function _renderLeft(

props){
return this._renderSubView(
props,
'left',
this.props.renderLeftComponent,
NavigationHeaderStyleInterpolator.forLeft);

}},{key:'_renderTitle',value:function _renderTitle(

props){
return this._renderSubView(
props,
'title',
this.props.renderTitleComponent,
NavigationHeaderStyleInterpolator.forCenter);

}},{key:'_renderRight',value:function _renderRight(

props){
return this._renderSubView(
props,
'right',
this.props.renderRightComponent,
NavigationHeaderStyleInterpolator.forRight);

}},{key:'_renderSubView',value:function _renderSubView(


props,
name,
renderer,
styleInterpolator)
{var

scene=

props.scene,navigationState=props.navigationState;var


index=


scene.index,isStale=scene.isStale,key=scene.key;

var offset=navigationState.index-index;

if(Math.abs(offset)>2){


return null;
}

var subView=renderer(props);
if(subView===null){
return null;
}

var pointerEvents=offset!==0||isStale?'none':'box-none';
return(
React.createElement(Animated.View,{
pointerEvents:pointerEvents,
key:name+'_'+key,
style:[
styles[name],
styleInterpolator(props)]},

subView));


}}]);return NavigationHeader;}(React.Component);NavigationHeader.defaultProps={renderTitleComponent:function renderTitleComponent(props){var navigationState=props.navigationState;var title=String(navigationState.title||'');return React.createElement(NavigationHeaderTitle,null,title);},renderLeftComponent:function renderLeftComponent(props){return props.scene.index>0?React.createElement(NavigationHeaderBackButton,null):null;},renderRightComponent:function renderRightComponent(props){return null;}};NavigationHeader.propTypes=_extends({},NavigationPropTypes.SceneRendererProps,{renderLeftComponent:PropTypes.func,renderRightComponent:PropTypes.func,renderTitleComponent:PropTypes.func,style:View.propTypes.style,viewProps:PropTypes.shape(View.propTypes)});


var styles=StyleSheet.create({
appbar:{
alignItems:'center',
backgroundColor:Platform.OS==='ios'?'#EFEFF2':'#FFF',
borderBottomColor:'rgba(0, 0, 0, .15)',
borderBottomWidth:Platform.OS==='ios'?StyleSheet.hairlineWidth:0,
elevation:2,
flexDirection:'row',
height:APPBAR_HEIGHT+STATUSBAR_HEIGHT,
justifyContent:'flex-start',
left:0,
marginBottom:16,
position:'absolute',
right:0,
top:0},


title:{
bottom:0,
left:APPBAR_HEIGHT,
marginTop:STATUSBAR_HEIGHT,
position:'absolute',
right:APPBAR_HEIGHT,
top:0},


left:{
bottom:0,
left:0,
marginTop:STATUSBAR_HEIGHT,
position:'absolute',
top:0},


right:{
bottom:0,
marginTop:STATUSBAR_HEIGHT,
position:'absolute',
right:0,
top:0}});



var NavigationHeaderContainer=NavigationContainer.create(NavigationHeader);

NavigationHeaderContainer.HEIGHT=APPBAR_HEIGHT+STATUSBAR_HEIGHT;
NavigationHeaderContainer.Title=NavigationHeaderTitle;
NavigationHeaderContainer.BackButton=NavigationHeaderBackButton;

module.exports=NavigationHeaderContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5hdmlnYXRpb25IZWFkZXIuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJyZXF1aXJlIiwiUmVhY3ROYXRpdmUiLCJOYXZpZ2F0aW9uQ29udGFpbmVyIiwiTmF2aWdhdGlvbkhlYWRlclRpdGxlIiwiTmF2aWdhdGlvbkhlYWRlckJhY2tCdXR0b24iLCJOYXZpZ2F0aW9uUHJvcFR5cGVzIiwiTmF2aWdhdGlvbkhlYWRlclN0eWxlSW50ZXJwb2xhdG9yIiwiUmVhY3RDb21wb25lbnRXaXRoUHVyZVJlbmRlck1peGluIiwiQW5pbWF0ZWQiLCJQbGF0Zm9ybSIsIlN0eWxlU2hlZXQiLCJWaWV3IiwiQVBQQkFSX0hFSUdIVCIsIk9TIiwiU1RBVFVTQkFSX0hFSUdIVCIsIlByb3BUeXBlcyIsIk5hdmlnYXRpb25IZWFkZXIiLCJuZXh0UHJvcHMiLCJuZXh0U3RhdGUiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJjYWxsIiwicHJvcHMiLCJzY2VuZXMiLCJzdHlsZSIsInZpZXdQcm9wcyIsInNjZW5lc1Byb3BzIiwibWFwIiwiZXh0cmFjdFNjZW5lUmVuZGVyZXJQcm9wcyIsInNjZW5lIiwic3R5bGVzIiwiYXBwYmFyIiwiX3JlbmRlckxlZnQiLCJfcmVuZGVyVGl0bGUiLCJfcmVuZGVyUmlnaHQiLCJfcmVuZGVyU3ViVmlldyIsInJlbmRlckxlZnRDb21wb25lbnQiLCJmb3JMZWZ0IiwicmVuZGVyVGl0bGVDb21wb25lbnQiLCJmb3JDZW50ZXIiLCJyZW5kZXJSaWdodENvbXBvbmVudCIsImZvclJpZ2h0IiwibmFtZSIsInJlbmRlcmVyIiwic3R5bGVJbnRlcnBvbGF0b3IiLCJuYXZpZ2F0aW9uU3RhdGUiLCJpbmRleCIsImlzU3RhbGUiLCJrZXkiLCJvZmZzZXQiLCJNYXRoIiwiYWJzIiwic3ViVmlldyIsInBvaW50ZXJFdmVudHMiLCJDb21wb25lbnQiLCJkZWZhdWx0UHJvcHMiLCJ0aXRsZSIsIlN0cmluZyIsInByb3BUeXBlcyIsIlNjZW5lUmVuZGVyZXJQcm9wcyIsImZ1bmMiLCJzaGFwZSIsImNyZWF0ZSIsImFsaWduSXRlbXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJCb3R0b21Db2xvciIsImJvcmRlckJvdHRvbVdpZHRoIiwiaGFpcmxpbmVXaWR0aCIsImVsZXZhdGlvbiIsImZsZXhEaXJlY3Rpb24iLCJoZWlnaHQiLCJqdXN0aWZ5Q29udGVudCIsImxlZnQiLCJtYXJnaW5Cb3R0b20iLCJwb3NpdGlvbiIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwibWFyZ2luVG9wIiwiTmF2aWdhdGlvbkhlYWRlckNvbnRhaW5lciIsIkhFSUdIVCIsIlRpdGxlIiwiQmFja0J1dHRvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0NBLGE7O0FBRUEsR0FBTUEsT0FBUUMsUUFBUSxPQUFSLENBQWQ7QUFDQSxHQUFNQyxhQUFjRCxRQUFRLGNBQVIsQ0FBcEI7QUFDQSxHQUFNRSxxQkFBc0JGLFFBQVEsdUJBQVIsQ0FBNUI7QUFDQSxHQUFNRyx1QkFBd0JILFFBQVEseUJBQVIsQ0FBOUI7QUFDQSxHQUFNSSw0QkFBNkJKLFFBQVEsOEJBQVIsQ0FBbkM7QUFDQSxHQUFNSyxxQkFBc0JMLFFBQVEsdUJBQVIsQ0FBNUI7QUFDQSxHQUFNTSxtQ0FBb0NOLFFBQVEscUNBQVIsQ0FBMUM7QUFDQSxHQUFNTyxtQ0FBb0NQLFFBQVEsZ0NBQVIsQ0FBMUMsQzs7O0FBR0VRLFE7Ozs7QUFJRVAsVyxDQUpGTyxRLENBQ0FDLFEsQ0FHRVIsVyxDQUhGUSxRLENBQ0FDLFUsQ0FFRVQsVyxDQUZGUyxVLENBQ0FDLEksQ0FDRVYsVyxDQURGVSxJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QkYsR0FBTUMsZUFBZ0JILFNBQVNJLEVBQVQsR0FBZ0IsS0FBaEIsQ0FBd0IsRUFBeEIsQ0FBNkIsRUFBbkQ7QUFDQSxHQUFNQyxrQkFBbUJMLFNBQVNJLEVBQVQsR0FBZ0IsS0FBaEIsQ0FBd0IsRUFBeEIsQ0FBNkIs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QUFLLENBYkMsQ0FEdUI7OztBQWlCL0JwQixNQUFPO0FBQ0xxQixPQUFRLENBREg7QUFFTEwsS0FBTTNELGFBRkQ7QUFHTGlFLFVBQVcvRCxnQkFITjtBQUlMMkQsU0FBVSxVQUpMO0FBS0xDLE1BQU85RCxhQUxGO0FBTUwrRCxJQUFLLENBTkEsQ0FqQndCOzs7QUEwQi9CSixLQUFNO0FBQ0pLLE9BQVEsQ0FESjtBQUVKTCxLQUFNLENBRkY7QUFHSk0sVUFBVy9ELGdCQUhQO0FBSUoyRCxTQUFVLFVBSk47QUFLSkUsSUFBSyxDQUxELENBMUJ5Qjs7O0FBa0MvQkQsTUFBTztBQUNMRSxPQUFRLENBREg7QUFFTEMsVUFBVy9ELGdCQUZOO0FBR0wyRCxTQUFVLFVBSEw7QUFJTEMsTUFBTyxDQUpGO0FBS0xDLElBQUssQ0FMQSxDQWxDd0IsQ0FBbEIsQ0FBZjs7OztBQTJDQSxHQUFNRywyQkFBNEI1RSxvQkFBb0IyRCxNQUFwQixDQUEyQjdDLGdCQUEzQixDQUFsQzs7QUFFQThELDBCQUEwQkMsTUFBMUIsQ0FBbUNuRSxjQUFnQkUsZ0JBQW5EO0FBQ0FnRSwwQkFBMEJFLEtBQTFCLENBQWtDN0UscUJBQWxDO0FBQ0EyRSwwQkFBMEJHLFVBQTFCLENBQXVDN0UsMEJBQXZDOztBQUVBOEUsT0FBT0MsT0FBUCxDQUFpQkwseUJBQWpCIiwiZmlsZSI6Ik5hdmlnYXRpb25IZWFkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogRmFjZWJvb2ssIEluYy4gKFwiRmFjZWJvb2tcIikgb3ducyBhbGwgcmlnaHQsIHRpdGxlIGFuZCBpbnRlcmVzdCwgaW5jbHVkaW5nXG4gKiBhbGwgaW50ZWxsZWN0dWFsIHByb3BlcnR5IGFuZCBvdGhlciBwcm9wcmlldGFyeSByaWdodHMsIGluIGFuZCB0byB0aGUgUmVhY3RcbiAqIE5hdGl2ZSBDdXN0b21Db21wb25lbnRzIHNvZnR3YXJlICh0aGUgXCJTb2Z0d2FyZVwiKS4gIFN1YmplY3QgdG8geW91clxuICogY29tcGxpYW5jZSB3aXRoIHRoZXNlIHRlcm1zLCB5b3UgYXJlIGhlcmVieSBncmFudGVkIGEgbm9uLWV4Y2x1c2l2ZSxcbiAqIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlIGNvcHlyaWdodCBsaWNlbnNlIHRvICgxKSB1c2UgYW5kIGNvcHkgdGhlIFNvZnR3YXJlO1xuICogYW5kICgyKSByZXByb2R1Y2UgYW5kIGRpc3RyaWJ1dGUgdGhlIFNvZnR3YXJlIGFzIHBhcnQgb2YgeW91ciBvd24gc29mdHdhcmVcbiAqIChcIllvdXIgU29mdHdhcmVcIikuICBGYWNlYm9vayByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0b1xuICogeW91IGluIHRoaXMgbGljZW5zZSBhZ3JlZW1lbnQuXG4gKlxuICogVEhFIFNPRlRXQVJFIEFORCBET0NVTUVOVEFUSU9OLCBJRiBBTlksIEFSRSBQUk9WSURFRCBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTXG4gKiBPUiBJTVBMSUVEIFdBUlJBTlRJRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFKSBBUkUgRElTQ0xBSU1FRC5cbiAqIElOIE5PIEVWRU5UIFNIQUxMIEZBQ0VCT09LIE9SIElUUyBBRkZJTElBVEVTLCBPRkZJQ0VSUywgRElSRUNUT1JTIE9SXG4gKiBFTVBMT1lFRVMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCxcbiAqIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTyxcbiAqIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTO1xuICogT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksXG4gKiBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUlxuICogT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhFIFNPRlRXQVJFLCBFVkVOIElGXG4gKiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgTmF2aWdhdGlvbkhlYWRlclxuICogQGZsb3dcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBSZWFjdE5hdGl2ZSA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZScpO1xuY29uc3QgTmF2aWdhdGlvbkNvbnRhaW5lciA9IHJlcXVpcmUoJy4vTmF2aWdhdGlvbkNvbnRhaW5lcicpO1xuY29uc3QgTmF2aWdhdGlvbkhlYWRlclRpdGxlID0gcmVxdWlyZSgnLi9OYXZpZ2F0aW9uSGVhZGVyVGl0bGUnKTtcbmNvbnN0IE5hdmlnYXRpb25IZWFkZXJCYWNrQnV0dG9uID0gcmVxdWlyZSgnLi9OYXZpZ2F0aW9uSGVhZGVyQmFja0J1dHRvbicpO1xuY29uc3QgTmF2aWdhdGlvblByb3BUeXBlcyA9IHJlcXVpcmUoJy4vTmF2aWdhdGlvblByb3BUeXBlcycpO1xuY29uc3QgTmF2aWdhdGlvbkhlYWRlclN0eWxlSW50ZXJwb2xhdG9yID0gcmVxdWlyZSgnLi9OYXZpZ2F0aW9uSGVhZGVyU3R5bGVJbnRlcnBvbGF0b3InKTtcbmNvbnN0IFJlYWN0Q29tcG9uZW50V2l0aFB1cmVSZW5kZXJNaXhpbiA9IHJlcXVpcmUoJ3JlYWN0LWFkZG9ucy1wdXJlLXJlbmRlci1taXhpbicpO1xuXG5jb25zdCB7XG4gIEFuaW1hdGVkLFxuICBQbGF0Zm9ybSxcbiAgU3R5bGVTaGVldCxcbiAgVmlldyxcbn0gPSBSZWFjdE5hdGl2ZTtcblxuaW1wb3J0IHR5cGUgIHtcbiAgTmF2aWdhdGlvblNjZW5lUmVuZGVyZXIsXG4gIE5hdmlnYXRpb25TY2VuZVJlbmRlcmVyUHJvcHMsXG4gIE5hdmlnYXRpb25TdHlsZUludGVycG9sYXRvcixcbn0gZnJvbSAnTmF2aWdhdGlvblR5cGVEZWZpbml0aW9uJztcblxudHlwZSBEZWZhdWx0UHJvcHMgPSB7XG4gIHJlbmRlckxlZnRDb21wb25lbnQ6IE5hdmlnYXRpb25TY2VuZVJlbmRlcmVyLFxuICByZW5kZXJSaWdodENvbXBvbmVudDogTmF2aWdhdGlvblNjZW5lUmVuZGVyZXIsXG4gIHJlbmRlclRpdGxlQ29tcG9uZW50OiBOYXZpZ2F0aW9uU2NlbmVSZW5kZXJlcixcbn07XG5cbnR5cGUgUHJvcHMgPSBOYXZpZ2F0aW9uU2NlbmVSZW5kZXJlclByb3BzICYge1xuICByZW5kZXJMZWZ0Q29tcG9uZW50OiBOYXZpZ2F0aW9uU2NlbmVSZW5kZXJlcixcbiAgcmVuZGVyUmlnaHRDb21wb25lbnQ6IE5hdmlnYXRpb25TY2VuZVJlbmRlcmVyLFxuICByZW5kZXJUaXRsZUNvbXBvbmVudDogTmF2aWdhdGlvblNjZW5lUmVuZGVyZXIsXG4gIHN0eWxlPzogYW55O1xuICB2aWV3UHJvcHM/OiBhbnk7XG59O1xuXG50eXBlIFN1YlZpZXdOYW1lID0gJ2xlZnQnIHwgJ3RpdGxlJyB8ICdyaWdodCc7XG5cbmNvbnN0IEFQUEJBUl9IRUlHSFQgPSBQbGF0Zm9ybS5PUyA9PT0gJ2lvcycgPyA0NCA6IDU2O1xuY29uc3QgU1RBVFVTQkFSX0hFSUdIVCA9IFBsYXRmb3JtLk9TID09PSAnaW9zJyA/IDIwIDogMDtcbmNvbnN0IHtQcm9wVHlwZXN9ID0gUmVhY3Q7XG5cbmNsYXNzIE5hdmlnYXRpb25IZWFkZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8RGVmYXVsdFByb3BzLCBQcm9wcywgYW55PiB7XG4gIHByb3BzOiBQcm9wcztcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuXG4gICAgcmVuZGVyVGl0bGVDb21wb25lbnQ6IChwcm9wczogTmF2aWdhdGlvblNjZW5lUmVuZGVyZXJQcm9wcykgPT4ge1xuICAgICAgY29uc3Qge25hdmlnYXRpb25TdGF0ZX0gPSBwcm9wcztcbiAgICAgIGNvbnN0IHRpdGxlID0gU3RyaW5nKG5hdmlnYXRpb25TdGF0ZS50aXRsZSB8fCAnJyk7XG4gICAgICByZXR1cm4gPE5hdmlnYXRpb25IZWFkZXJUaXRsZT57dGl0bGV9PC9OYXZpZ2F0aW9uSGVhZGVyVGl0bGU+O1xuICAgIH0sXG5cbiAgICByZW5kZXJMZWZ0Q29tcG9uZW50OiAocHJvcHM6IE5hdmlnYXRpb25TY2VuZVJlbmRlcmVyUHJvcHMpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5zY2VuZS5pbmRleCA+IDAgPyA8TmF2aWdhdGlvbkhlYWRlckJhY2tCdXR0b24gLz4gOiBudWxsO1xuICAgIH0sXG5cbiAgICByZW5kZXJSaWdodENvbXBvbmVudDogKHByb3BzOiBOYXZpZ2F0aW9uU2NlbmVSZW5kZXJlclByb3BzKSA9PiB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICB9O1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLi4uTmF2aWdhdGlvblByb3BUeXBlcy5TY2VuZVJlbmRlcmVyUHJvcHMsXG4gICAgcmVuZGVyTGVmdENvbXBvbmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcmVuZGVyUmlnaHRDb21wb25lbnQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIHJlbmRlclRpdGxlQ29tcG9uZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzdHlsZTogVmlldy5wcm9wVHlwZXMuc3R5bGUsXG4gICAgdmlld1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoVmlldy5wcm9wVHlwZXMpLFxuICB9O1xuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHM6IFByb3BzLCBuZXh0U3RhdGU6IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBSZWFjdENvbXBvbmVudFdpdGhQdXJlUmVuZGVyTWl4aW4uc2hvdWxkQ29tcG9uZW50VXBkYXRlLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgbmV4dFByb3BzLFxuICAgICAgbmV4dFN0YXRlXG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpOiBSZWFjdEVsZW1lbnQge1xuICAgIGNvbnN0IHsgc2NlbmVzLCBzdHlsZSwgdmlld1Byb3BzIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3Qgc2NlbmVzUHJvcHMgPSBzY2VuZXMubWFwKHNjZW5lID0+IHtcbiAgICAgIGNvbnN0IHByb3BzID0gTmF2aWdhdGlvblByb3BUeXBlcy5leHRyYWN0U2NlbmVSZW5kZXJlclByb3BzKHRoaXMucHJvcHMpO1xuICAgICAgcHJvcHMuc2NlbmUgPSBzY2VuZTtcbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9KTtcblxuICAgIHJldHVybiAoXG4gICAgICA8VmlldyBzdHlsZT17WyBzdHlsZXMuYXBwYmFyLCBzdHlsZSBdfSB7Li4udmlld1Byb3BzfT5cbiAgICAgICAge3NjZW5lc1Byb3BzLm1hcCh0aGlzLl9yZW5kZXJMZWZ0LCB0aGlzKX1cbiAgICAgICAge3NjZW5lc1Byb3BzLm1hcCh0aGlzLl9yZW5kZXJUaXRsZSwgdGhpcyl9XG4gICAgICAgIHtzY2VuZXNQcm9wcy5tYXAodGhpcy5fcmVuZGVyUmlnaHQsIHRoaXMpfVxuICAgICAgPC9WaWV3PlxuICAgICk7XG4gIH1cblxuICBfcmVuZGVyTGVmdChwcm9wczogTmF2aWdhdGlvblNjZW5lUmVuZGVyZXJQcm9wcyk6ID9SZWFjdEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLl9yZW5kZXJTdWJWaWV3KFxuICAgICAgcHJvcHMsXG4gICAgICAnbGVmdCcsXG4gICAgICB0aGlzLnByb3BzLnJlbmRlckxlZnRDb21wb25lbnQsXG4gICAgICBOYXZpZ2F0aW9uSGVhZGVyU3R5bGVJbnRlcnBvbGF0b3IuZm9yTGVmdCxcbiAgICApO1xuICB9XG5cbiAgX3JlbmRlclRpdGxlKHByb3BzOiBOYXZpZ2F0aW9uU2NlbmVSZW5kZXJlclByb3BzKTogP1JlYWN0RWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMuX3JlbmRlclN1YlZpZXcoXG4gICAgICBwcm9wcyxcbiAgICAgICd0aXRsZScsXG4gICAgICB0aGlzLnByb3BzLnJlbmRlclRpdGxlQ29tcG9uZW50LFxuICAgICAgTmF2aWdhdGlvbkhlYWRlclN0eWxlSW50ZXJwb2xhdG9yLmZvckNlbnRlcixcbiAgICApO1xuICB9XG5cbiAgX3JlbmRlclJpZ2h0KHByb3BzOiBOYXZpZ2F0aW9uU2NlbmVSZW5kZXJlclByb3BzKTogP1JlYWN0RWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMuX3JlbmRlclN1YlZpZXcoXG4gICAgICBwcm9wcyxcbiAgICAgICdyaWdodCcsXG4gICAgICB0aGlzLnByb3BzLnJlbmRlclJpZ2h0Q29tcG9uZW50LFxuICAgICAgTmF2aWdhdGlvbkhlYWRlclN0eWxlSW50ZXJwb2xhdG9yLmZvclJpZ2h0LFxuICAgICk7XG4gIH1cblxuICBfcmVuZGVyU3ViVmlldyhcbiAgICBwcm9wczogTmF2aWdhdGlvblNjZW5lUmVuZGVyZXJQcm9wcyxcbiAgICBuYW1lOiBTdWJWaWV3TmFtZSxcbiAgICByZW5kZXJlcjogTmF2aWdhdGlvblNjZW5lUmVuZGVyZXIsXG4gICAgc3R5bGVJbnRlcnBvbGF0b3I6IE5hdmlnYXRpb25TdHlsZUludGVycG9sYXRvcixcbiAgKTogP1JlYWN0RWxlbWVudCB7XG4gICAgY29uc3Qge1xuICAgICAgc2NlbmUsXG4gICAgICBuYXZpZ2F0aW9uU3RhdGUsXG4gICAgfSA9IHByb3BzO1xuXG4gICAgY29uc3Qge1xuICAgICAgaW5kZXgsXG4gICAgICBpc1N0YWxlLFxuICAgICAga2V5LFxuICAgIH0gPSBzY2VuZTtcblxuICAgIGNvbnN0IG9mZnNldCA9IG5hdmlnYXRpb25TdGF0ZS5pbmRleCAtIGluZGV4O1xuXG4gICAgaWYgKE1hdGguYWJzKG9mZnNldCkgPiAyKSB7XG4gICAgICAvLyBTY2VuZSBpcyBmYXIgYXdheSBmcm9tIHRoZSBhY3RpdmUgc2NlbmUuIEhpZGVzIGl0IHRvIGF2b2lkIHVubmVjZXNzYXJ5XG4gICAgICAvLyByZW5kZXJpbmcuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBzdWJWaWV3ID0gcmVuZGVyZXIocHJvcHMpO1xuICAgIGlmIChzdWJWaWV3ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBwb2ludGVyRXZlbnRzID0gb2Zmc2V0ICE9PSAwIHx8IGlzU3RhbGUgPyAnbm9uZScgOiAnYm94LW5vbmUnO1xuICAgIHJldHVybiAoXG4gICAgICA8QW5pbWF0ZWQuVmlld1xuICAgICAgICBwb2ludGVyRXZlbnRzPXtwb2ludGVyRXZlbnRzfVxuICAgICAgICBrZXk9e25hbWUgKyAnXycgKyBrZXl9XG4gICAgICAgIHN0eWxlPXtbXG4gICAgICAgICAgc3R5bGVzW25hbWVdLFxuICAgICAgICAgIHN0eWxlSW50ZXJwb2xhdG9yKHByb3BzKSxcbiAgICAgICAgXX0+XG4gICAgICAgIHtzdWJWaWV3fVxuICAgICAgPC9BbmltYXRlZC5WaWV3PlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBhcHBiYXI6IHtcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFBsYXRmb3JtLk9TID09PSAnaW9zJyA/ICcjRUZFRkYyJyA6ICcjRkZGJyxcbiAgICBib3JkZXJCb3R0b21Db2xvcjogJ3JnYmEoMCwgMCwgMCwgLjE1KScsXG4gICAgYm9yZGVyQm90dG9tV2lkdGg6IFBsYXRmb3JtLk9TID09PSAnaW9zJyA/IFN0eWxlU2hlZXQuaGFpcmxpbmVXaWR0aCA6IDAsXG4gICAgZWxldmF0aW9uOiAyLFxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIGhlaWdodDogQVBQQkFSX0hFSUdIVCArIFNUQVRVU0JBUl9IRUlHSFQsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICBsZWZ0OiAwLFxuICAgIG1hcmdpbkJvdHRvbTogMTYsIC8vIFRoaXMgaXMgbmVlZGVkIGZvciBlbGV2YXRpb24gc2hhZG93XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgcmlnaHQ6IDAsXG4gICAgdG9wOiAwLFxuICB9LFxuXG4gIHRpdGxlOiB7XG4gICAgYm90dG9tOiAwLFxuICAgIGxlZnQ6IEFQUEJBUl9IRUlHSFQsXG4gICAgbWFyZ2luVG9wOiBTVEFUVVNCQVJfSEVJR0hULFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHJpZ2h0OiBBUFBCQVJfSEVJR0hULFxuICAgIHRvcDogMCxcbiAgfSxcblxuICBsZWZ0OiB7XG4gICAgYm90dG9tOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgbWFyZ2luVG9wOiBTVEFUVVNCQVJfSEVJR0hULFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRvcDogMCxcbiAgfSxcblxuICByaWdodDoge1xuICAgIGJvdHRvbTogMCxcbiAgICBtYXJnaW5Ub3A6IFNUQVRVU0JBUl9IRUlHSFQsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgcmlnaHQ6IDAsXG4gICAgdG9wOiAwLFxuICB9LFxufSk7XG5cbmNvbnN0IE5hdmlnYXRpb25IZWFkZXJDb250YWluZXIgPSBOYXZpZ2F0aW9uQ29udGFpbmVyLmNyZWF0ZShOYXZpZ2F0aW9uSGVhZGVyKTtcblxuTmF2aWdhdGlvbkhlYWRlckNvbnRhaW5lci5IRUlHSFQgPSBBUFBCQVJfSEVJR0hUICsgU1RBVFVTQkFSX0hFSUdIVDtcbk5hdmlnYXRpb25IZWFkZXJDb250YWluZXIuVGl0bGUgPSBOYXZpZ2F0aW9uSGVhZGVyVGl0bGU7XG5OYXZpZ2F0aW9uSGVhZGVyQ29udGFpbmVyLkJhY2tCdXR0b24gPSBOYXZpZ2F0aW9uSGVhZGVyQmFja0J1dHRvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBOYXZpZ2F0aW9uSGVhZGVyQ29udGFpbmVyO1xuIl19