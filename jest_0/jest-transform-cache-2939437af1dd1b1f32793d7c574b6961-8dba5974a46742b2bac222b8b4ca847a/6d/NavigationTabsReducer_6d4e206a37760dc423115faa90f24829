ec55cf84cc1aa8f162c1cbc41d6d9ae2











'use strict';var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};

var NavigationFindReducer=require('./NavigationFindReducer');
var NavigationStateUtils=require('./NavigationStateUtils');






var ActionTypes={
JUMP_TO:'react-native/NavigationExperimental/tabs-jumpTo'};






function NavigationTabsJumpToAction(index){
return{
type:ActionTypes.JUMP_TO,
index:index};

}







function NavigationTabsReducer(_ref){var key=_ref.key,initialIndex=_ref.initialIndex,tabReducers=_ref.tabReducers;
return function(lastNavState,action){
if(!lastNavState){
lastNavState={
children:tabReducers.map(function(reducer){return reducer(null,null);}),
index:initialIndex||0,
key:key};

}
var lastParentNavState=NavigationStateUtils.getParent(lastNavState);
if(!action||!lastParentNavState){
return lastNavState;
}
if(
action.type===ActionTypes.JUMP_TO&&
action.index!==lastParentNavState.index)
{
return NavigationStateUtils.jumpToIndex(
lastParentNavState,
action.index);

}
var subReducers=tabReducers.map(function(tabReducer,tabIndex){
return function(navState,tabAction){
if(!navState){
return lastParentNavState;
}
var parentState=NavigationStateUtils.getParent(navState);
var tabState=parentState&&parentState.children[tabIndex];
var nextTabState=tabReducer(tabState,tabAction);
if(nextTabState&&tabState!==nextTabState){
var tabs=parentState&&parentState.children||[];
tabs[tabIndex]=nextTabState;
return _extends({},
lastParentNavState,{
tabs:tabs,
index:tabIndex});

}
return lastParentNavState;
};
});
var selectedTabReducer=subReducers.splice(lastParentNavState.index,1)[0];
subReducers.unshift(function(navState,action){
if(navState&&action.type==='BackAction'){
return NavigationStateUtils.jumpToIndex(
lastParentNavState,
initialIndex||0);

}
return lastParentNavState;
});
subReducers.unshift(selectedTabReducer);
var findReducer=NavigationFindReducer(subReducers,lastParentNavState);
return findReducer(lastParentNavState,action);
};
}

NavigationTabsReducer.JumpToAction=NavigationTabsJumpToAction;

module.exports=NavigationTabsReducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5hdmlnYXRpb25UYWJzUmVkdWNlci5qcyJdLCJuYW1lcyI6WyJOYXZpZ2F0aW9uRmluZFJlZHVjZXIiLCJyZXF1aXJlIiwiTmF2aWdhdGlvblN0YXRlVXRpbHMiLCJBY3Rpb25UeXBlcyIsIkpVTVBfVE8iLCJOYXZpZ2F0aW9uVGFic0p1bXBUb0FjdGlvbiIsImluZGV4IiwidHlwZSIsIk5hdmlnYXRpb25UYWJzUmVkdWNlciIsImtleSIsImluaXRpYWxJbmRleCIsInRhYlJlZHVjZXJzIiwibGFzdE5hdlN0YXRlIiwiYWN0aW9uIiwiY2hpbGRyZW4iLCJtYXAiLCJyZWR1Y2VyIiwibGFzdFBhcmVudE5hdlN0YXRlIiwiZ2V0UGFyZW50IiwianVtcFRvSW5kZXgiLCJzdWJSZWR1Y2VycyIsInRhYlJlZHVjZXIiLCJ0YWJJbmRleCIsIm5hdlN0YXRlIiwidGFiQWN0aW9uIiwicGFyZW50U3RhdGUiLCJ0YWJTdGF0ZSIsIm5leHRUYWJTdGF0ZSIsInRhYnMiLCJzZWxlY3RlZFRhYlJlZHVjZXIiLCJzcGxpY2UiLCJ1bnNoaWZ0IiwiZmluZFJlZHVjZXIiLCJKdW1wVG9BY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQVdBLGE7O0FBRUEsR0FBTUEsdUJBQXdCQyxRQUFRLHlCQUFSLENBQTlCO0FBQ0EsR0FBTUMsc0JBQXVCRCxRQUFRLHdCQUFSLENBQTdCOzs7Ozs7O0FBT0EsR0FBTUUsYUFBYztBQUNsQkMsUUFBUyxpREFEUyxDQUFwQjs7Ozs7OztBQVFBLFFBQVNDLDJCQUFULENBQW9DQyxLQUFwQyxDQUFpRTtBQUMvRCxNQUFPO0FBQ0xDLEtBQU1KLFlBQVlDLE9BRGI7QUFFTEUsV0FGSyxDQUFQOztBQUlEOzs7Ozs7OztBQVFELFFBQVNFLHNCQUFULE1BQXVHLElBQXZFQyxJQUF1RSxNQUF2RUEsR0FBdUUsQ0FBbEVDLFlBQWtFLE1BQWxFQSxZQUFrRSxDQUFwREMsV0FBb0QsTUFBcERBLFdBQW9EO0FBQ3JHLE1BQU8sVUFBU0MsWUFBVCxDQUF5Q0MsTUFBekMsQ0FBd0U7QUFDN0UsR0FBSSxDQUFDRCxZQUFMLENBQW1CO0FBQ2pCQSxhQUFlO0FBQ2JFLFNBQVVILFlBQVlJLEdBQVosQ0FBZ0Isd0JBQVdDLFNBQVEsSUFBUixDQUFjLElBQWQsQ0FBWCxFQUFoQixDQURHO0FBRWJWLE1BQU9JLGNBQWdCLENBRlY7QUFHYkQsT0FIYSxDQUFmOztBQUtEO0FBQ0QsR0FBTVEsb0JBQXFCZixxQkFBcUJnQixTQUFyQixDQUErQk4sWUFBL0IsQ0FBM0I7QUFDQSxHQUFJLENBQUNDLE1BQUQsRUFBVyxDQUFDSSxrQkFBaEIsQ0FBb0M7QUFDbEMsTUFBT0wsYUFBUDtBQUNEO0FBQ0Q7QUFDRUMsT0FBT04sSUFBUCxHQUFnQkosWUFBWUMsT0FBNUI7QUFDQVMsT0FBT1AsS0FBUCxHQUFpQlcsbUJBQW1CWCxLQUZ0QztBQUdFO0FBQ0EsTUFBT0osc0JBQXFCaUIsV0FBckI7QUFDTEYsa0JBREs7QUFFTEosT0FBT1AsS0FGRixDQUFQOztBQUlEO0FBQ0QsR0FBTWMsYUFBY1QsWUFBWUksR0FBWixDQUFnQixTQUFDTSxVQUFELENBQWFDLFFBQWIsQ0FBMEI7QUFDNUQsTUFBTyxVQUFTQyxRQUFULENBQXFDQyxTQUFyQyxDQUFzRTtBQUMzRSxHQUFJLENBQUNELFFBQUwsQ0FBZTtBQUNiLE1BQU9OLG1CQUFQO0FBQ0Q7QUFDRCxHQUFNUSxhQUFjdkIscUJBQXFCZ0IsU0FBckIsQ0FBK0JLLFFBQS9CLENBQXBCO0FBQ0EsR0FBTUcsVUFBV0QsYUFBZUEsWUFBWVgsUUFBWixDQUFxQlEsUUFBckIsQ0FBaEM7QUFDQSxHQUFNSyxjQUFlTixXQUFXSyxRQUFYLENBQXFCRixTQUFyQixDQUFyQjtBQUNBLEdBQUlHLGNBQWdCRCxXQUFhQyxZQUFqQyxDQUErQztBQUM3QyxHQUFNQyxNQUFPSCxhQUFlQSxZQUFZWCxRQUEzQixFQUF1QyxFQUFwRDtBQUNBYyxLQUFLTixRQUFMLEVBQWlCSyxZQUFqQjtBQUNBO0FBQ0tWLGtCQURMO0FBRUVXLFNBRkY7QUFHRXRCLE1BQU9nQixRQUhUOztBQUtEO0FBQ0QsTUFBT0wsbUJBQVA7QUFDRCxDQWpCRDtBQWtCRCxDQW5CbUIsQ0FBcEI7QUFvQkEsR0FBSVksb0JBQXFCVCxZQUFZVSxNQUFaLENBQW1CYixtQkFBbUJYLEtBQXRDLENBQTZDLENBQTdDLEVBQWdELENBQWhELENBQXpCO0FBQ0FjLFlBQVlXLE9BQVosQ0FBb0IsU0FBU1IsUUFBVCxDQUFxQ1YsTUFBckMsQ0FBbUU7QUFDckYsR0FBSVUsVUFBWVYsT0FBT04sSUFBUCxHQUFnQixZQUFoQyxDQUE4QztBQUM1QyxNQUFPTCxzQkFBcUJpQixXQUFyQjtBQUNMRixrQkFESztBQUVMUCxjQUFnQixDQUZYLENBQVA7O0FBSUQ7QUFDRCxNQUFPTyxtQkFBUDtBQUNELENBUkQ7QUFTQUcsWUFBWVcsT0FBWixDQUFvQkYsa0JBQXBCO0FBQ0EsR0FBTUcsYUFBY2hDLHNCQUFzQm9CLFdBQXRCLENBQW1DSCxrQkFBbkMsQ0FBcEI7QUFDQSxNQUFPZSxhQUFZZixrQkFBWixDQUFnQ0osTUFBaEMsQ0FBUDtBQUNELENBdEREO0FBdUREOztBQUVETCxzQkFBc0J5QixZQUF0QixDQUFxQzVCLDBCQUFyQzs7QUFFQTZCLE9BQU9DLE9BQVAsQ0FBaUIzQixxQkFBakIiLCJmaWxlIjoiTmF2aWdhdGlvblRhYnNSZWR1Y2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBOYXZpZ2F0aW9uVGFic1JlZHVjZXJcbiAqIEBmbG93XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgTmF2aWdhdGlvbkZpbmRSZWR1Y2VyID0gcmVxdWlyZSgnLi9OYXZpZ2F0aW9uRmluZFJlZHVjZXInKTtcbmNvbnN0IE5hdmlnYXRpb25TdGF0ZVV0aWxzID0gcmVxdWlyZSgnLi9OYXZpZ2F0aW9uU3RhdGVVdGlscycpO1xuXG5pbXBvcnQgdHlwZSB7XG4gIE5hdmlnYXRpb25SZWR1Y2VyLFxuICBOYXZpZ2F0aW9uU3RhdGUsXG59IGZyb20gJ05hdmlnYXRpb25UeXBlRGVmaW5pdGlvbic7XG5cbmNvbnN0IEFjdGlvblR5cGVzID0ge1xuICBKVU1QX1RPOiAncmVhY3QtbmF0aXZlL05hdmlnYXRpb25FeHBlcmltZW50YWwvdGFicy1qdW1wVG8nLFxufTtcblxuZXhwb3J0IHR5cGUgSnVtcFRvQWN0aW9uID0ge1xuICB0eXBlOiB0eXBlb2YgQWN0aW9uVHlwZXMuSlVNUF9UTyxcbiAgaW5kZXg6IG51bWJlcixcbn07XG5mdW5jdGlvbiBOYXZpZ2F0aW9uVGFic0p1bXBUb0FjdGlvbihpbmRleDogbnVtYmVyKTogSnVtcFRvQWN0aW9uIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBBY3Rpb25UeXBlcy5KVU1QX1RPLFxuICAgIGluZGV4LFxuICB9O1xufVxuXG50eXBlIFRhYnNSZWR1Y2VyQ29uZmlnID0ge1xuICBrZXk6IHN0cmluZztcbiAgaW5pdGlhbEluZGV4OiBudW1iZXI7XG4gIHRhYlJlZHVjZXJzOiBBcnJheTxOYXZpZ2F0aW9uUmVkdWNlcj47XG59O1xuXG5mdW5jdGlvbiBOYXZpZ2F0aW9uVGFic1JlZHVjZXIoe2tleSwgaW5pdGlhbEluZGV4LCB0YWJSZWR1Y2Vyc306IFRhYnNSZWR1Y2VyQ29uZmlnKTogTmF2aWdhdGlvblJlZHVjZXIge1xuICByZXR1cm4gZnVuY3Rpb24obGFzdE5hdlN0YXRlOiA/TmF2aWdhdGlvblN0YXRlLCBhY3Rpb246ID9hbnkpOiBOYXZpZ2F0aW9uU3RhdGUge1xuICAgIGlmICghbGFzdE5hdlN0YXRlKSB7XG4gICAgICBsYXN0TmF2U3RhdGUgPSB7XG4gICAgICAgIGNoaWxkcmVuOiB0YWJSZWR1Y2Vycy5tYXAocmVkdWNlciA9PiByZWR1Y2VyKG51bGwsIG51bGwpKSxcbiAgICAgICAgaW5kZXg6IGluaXRpYWxJbmRleCB8fCAwLFxuICAgICAgICBrZXksXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBsYXN0UGFyZW50TmF2U3RhdGUgPSBOYXZpZ2F0aW9uU3RhdGVVdGlscy5nZXRQYXJlbnQobGFzdE5hdlN0YXRlKTtcbiAgICBpZiAoIWFjdGlvbiB8fCAhbGFzdFBhcmVudE5hdlN0YXRlKSB7XG4gICAgICByZXR1cm4gbGFzdE5hdlN0YXRlO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSlVNUF9UTyAmJlxuICAgICAgYWN0aW9uLmluZGV4ICE9PSBsYXN0UGFyZW50TmF2U3RhdGUuaW5kZXhcbiAgICApIHtcbiAgICAgIHJldHVybiBOYXZpZ2F0aW9uU3RhdGVVdGlscy5qdW1wVG9JbmRleChcbiAgICAgICAgbGFzdFBhcmVudE5hdlN0YXRlLFxuICAgICAgICBhY3Rpb24uaW5kZXgsXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBzdWJSZWR1Y2VycyA9IHRhYlJlZHVjZXJzLm1hcCgodGFiUmVkdWNlciwgdGFiSW5kZXgpID0+IHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihuYXZTdGF0ZTogP05hdmlnYXRpb25TdGF0ZSwgdGFiQWN0aW9uOiBhbnkpOiBOYXZpZ2F0aW9uU3RhdGUge1xuICAgICAgICBpZiAoIW5hdlN0YXRlKSB7XG4gICAgICAgICAgcmV0dXJuIGxhc3RQYXJlbnROYXZTdGF0ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJlbnRTdGF0ZSA9IE5hdmlnYXRpb25TdGF0ZVV0aWxzLmdldFBhcmVudChuYXZTdGF0ZSk7XG4gICAgICAgIGNvbnN0IHRhYlN0YXRlID0gcGFyZW50U3RhdGUgJiYgcGFyZW50U3RhdGUuY2hpbGRyZW5bdGFiSW5kZXhdO1xuICAgICAgICBjb25zdCBuZXh0VGFiU3RhdGUgPSB0YWJSZWR1Y2VyKHRhYlN0YXRlLCB0YWJBY3Rpb24pO1xuICAgICAgICBpZiAobmV4dFRhYlN0YXRlICYmIHRhYlN0YXRlICE9PSBuZXh0VGFiU3RhdGUpIHtcbiAgICAgICAgICBjb25zdCB0YWJzID0gcGFyZW50U3RhdGUgJiYgcGFyZW50U3RhdGUuY2hpbGRyZW4gfHwgW107XG4gICAgICAgICAgdGFic1t0YWJJbmRleF0gPSBuZXh0VGFiU3RhdGU7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmxhc3RQYXJlbnROYXZTdGF0ZSxcbiAgICAgICAgICAgIHRhYnMsXG4gICAgICAgICAgICBpbmRleDogdGFiSW5kZXgsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGFzdFBhcmVudE5hdlN0YXRlO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICBsZXQgc2VsZWN0ZWRUYWJSZWR1Y2VyID0gc3ViUmVkdWNlcnMuc3BsaWNlKGxhc3RQYXJlbnROYXZTdGF0ZS5pbmRleCwgMSlbMF07XG4gICAgc3ViUmVkdWNlcnMudW5zaGlmdChmdW5jdGlvbihuYXZTdGF0ZTogP05hdmlnYXRpb25TdGF0ZSwgYWN0aW9uOiBhbnkpOiBOYXZpZ2F0aW9uU3RhdGUge1xuICAgICAgaWYgKG5hdlN0YXRlICYmIGFjdGlvbi50eXBlID09PSAnQmFja0FjdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIE5hdmlnYXRpb25TdGF0ZVV0aWxzLmp1bXBUb0luZGV4KFxuICAgICAgICAgIGxhc3RQYXJlbnROYXZTdGF0ZSxcbiAgICAgICAgICBpbml0aWFsSW5kZXggfHwgMFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxhc3RQYXJlbnROYXZTdGF0ZTtcbiAgICB9KTtcbiAgICBzdWJSZWR1Y2Vycy51bnNoaWZ0KHNlbGVjdGVkVGFiUmVkdWNlcik7XG4gICAgY29uc3QgZmluZFJlZHVjZXIgPSBOYXZpZ2F0aW9uRmluZFJlZHVjZXIoc3ViUmVkdWNlcnMsIGxhc3RQYXJlbnROYXZTdGF0ZSk7XG4gICAgcmV0dXJuIGZpbmRSZWR1Y2VyKGxhc3RQYXJlbnROYXZTdGF0ZSwgYWN0aW9uKTtcbiAgfTtcbn1cblxuTmF2aWdhdGlvblRhYnNSZWR1Y2VyLkp1bXBUb0FjdGlvbiA9IE5hdmlnYXRpb25UYWJzSnVtcFRvQWN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5hdmlnYXRpb25UYWJzUmVkdWNlcjtcbiJdfQ==