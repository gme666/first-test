62fa9559fa64cab7474a090509b83b97
Object.defineProperty(exports,"__esModule",{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();

















var _react=require('react');var _react2=_interopRequireDefault(_react);
var _reactNative=require('react-native');
var _reactNativeSvg=require('react-native-svg');var _reactNativeSvg2=_interopRequireDefault(_reactNativeSvg);
var _util=require('./util');
var _lodash=require('lodash');var _lodash2=_interopRequireDefault(_lodash);

require('babel-polyfill');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Tree=require('paths-js/tree');

function children(x){
if(x.collapsed){
return[];
}else
{
return x.children||[];
}
}var

TreeChart=function(_Component){_inherits(TreeChart,_Component);function TreeChart(){_classCallCheck(this,TreeChart);return _possibleConstructorReturn(this,(TreeChart.__proto__||Object.getPrototypeOf(TreeChart)).apply(this,arguments));}_createClass(TreeChart,[{key:'render',value:function render()























{
var noDataMsg=this.props.noDataMessage||'No data available';
if(this.props.data===undefined)return _react2.default.createElement(_reactNative.Text,null,noDataMsg);

var options=new _util.Options(this.props);
var tree=Tree({
data:this.props.data,
children:children,
width:options.chartWidth,
height:options.chartHeight});

var colors=(0,_util.styleSvg)({},options);
var curves=_lodash2.default.map(tree.curves,function(c,i){
return _react2.default.createElement(_reactNativeSvg.Path,{key:'curves_'+i,d:c.connector.path.print(),fill:'none',stroke:colors.stroke,strokeOpacity:colors.strokeOpacity});
});

var fillOpacityStyle=1;
var textStyle=(0,_util.fontAdapt)(options.label);
var r=options.r||5;
var nodes=_lodash2.default.map(tree.nodes,function(n,index){

var text=void 0;

if(children(n.item).length>0){
text=_react2.default.createElement(_reactNativeSvg.Text,{fontFamily:textStyle.fontFamily,
fontSize:textStyle.fontSize,
fontWeight:textStyle.fontWeight,
fontStyle:textStyle.fontStyle,x:-10,y:-10,textAnchor:'end'},n.item.name);
}else{
text=_react2.default.createElement(_reactNativeSvg.Text,{fontFamily:textStyle.fontFamily,
fontSize:textStyle.fontSize,
fontWeight:textStyle.fontWeight,
fontStyle:textStyle.fontStyle,x:10,y:-10,textAnchor:'start'},n.item.name);
}

return _react2.default.createElement(_reactNativeSvg.G,{key:'tree_'+index,x:n.point[0],y:n.point[1]},
_react2.default.createElement(_reactNativeSvg.Circle,_extends({fillOpacity:fillOpacityStyle},colors,{r:r,cx:'0',cy:'0'})),
text);

});

return(
_react2.default.createElement(_reactNativeSvg2.default,{width:options.width,height:options.height},
_react2.default.createElement(_reactNativeSvg.G,{x:options.margin.left,y:options.margin.top},
curves,
nodes)));



}}]);return TreeChart;}(_react.Component);TreeChart.defaultProps={options:{margin:{top:20,left:50,right:80,bottom:20},width:600,height:600,fill:'#2980B9',stroke:'#3E90F0',r:5,animate:{type:'oneByOne',duration:200,fillTransition:3},label:{fontFamily:'Arial',fontSize:14,bold:true,fill:'#34495E'}}};exports.default=TreeChart;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,