d2cdc9e70a291dac6d288e46ac1991bf
Object.defineProperty(exports,"__esModule",{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};exports.default=



Switch;var _react=require('react');var _react2=_interopRequireDefault(_react);var _TabBar=require('./TabBar');var _TabBar2=_interopRequireDefault(_TabBar);var _Actions=require('./Actions');var _Actions2=_interopRequireDefault(_Actions);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function Switch(props){
var navState=props.navigationState;

var selector=props.selector;
var statem=props.statem;
if(!selector&&!statem)console.error('Selector should be defined.');
var index=-1;
var selectedKey=void 0;
if(!selector){

navState.children.forEach(function(el,i){
if(!(el.default||el.state)){
console.error('Either default or state should be defined for element='+el.key);
}
if(el.default){
index=i;
}else if(el.state.active){
index=i;
}
});
}else{
selectedKey=selector(props);
if(!selectedKey)console.error('Selector should return key.');
navState.children.forEach(function(el,i){
if(el.sceneKey===selectedKey){
index=i;
}
});
}
if(index===-1)console.error('A scene for key \u201C'+selectedKey+'\u201D does not exist.');
selectedKey=navState.children[index].sceneKey;

var navigationState=void 0;
if(index!==navState.index){
if(props.unmountScenes){
navigationState=_extends({},
navState,{
children:[navState.children[navState.index]],
index:0});

setTimeout(function(){
_Actions2.default[selectedKey]({unmountScenes:true});
},1);
}else{
navigationState=_extends({},navState,{index:index});
setTimeout(function(){
_Actions2.default[selectedKey]();
},1);
}
}else{
navigationState=navState;
}

return(
_react2.default.createElement(_TabBar2.default,{
onNavigate:props.onNavigate,
navigationState:navigationState}));


}

Switch.propTypes={
navigationState:_react.PropTypes.object,
onNavigate:_react.PropTypes.func,
selector:_react.PropTypes.func,
statem:_react.PropTypes.any,
unmountScenes:_react.PropTypes.bool};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN3aXRjaC5qcyJdLCJuYW1lcyI6WyJTd2l0Y2giLCJwcm9wcyIsIm5hdlN0YXRlIiwibmF2aWdhdGlvblN0YXRlIiwic2VsZWN0b3IiLCJzdGF0ZW0iLCJjb25zb2xlIiwiZXJyb3IiLCJpbmRleCIsInNlbGVjdGVkS2V5IiwiY2hpbGRyZW4iLCJmb3JFYWNoIiwiZWwiLCJpIiwiZGVmYXVsdCIsInN0YXRlIiwia2V5IiwiYWN0aXZlIiwic2NlbmVLZXkiLCJ1bm1vdW50U2NlbmVzIiwic2V0VGltZW91dCIsIm9uTmF2aWdhdGUiLCJwcm9wVHlwZXMiLCJvYmplY3QiLCJmdW5jIiwiYW55IiwiYm9vbCJdLCJtYXBwaW5ncyI6Ijs7OztBQUl3QkEsTSxDQUp4Qiw0QiwyQ0FDQSxnQyw2Q0FDQSxrQyxrSUFFZSxRQUFTQSxPQUFULENBQWdCQyxLQUFoQixDQUF1QjtBQUNwQyxHQUFNQyxVQUFXRCxNQUFNRSxlQUF2Qjs7QUFFQSxHQUFNQyxVQUFXSCxNQUFNRyxRQUF2QjtBQUNBLEdBQU1DLFFBQVNKLE1BQU1JLE1BQXJCO0FBQ0EsR0FBSSxDQUFDRCxRQUFELEVBQWEsQ0FBQ0MsTUFBbEIsQ0FBMEJDLFFBQVFDLEtBQVIsQ0FBYyw2QkFBZDtBQUMxQixHQUFJQyxPQUFRLENBQUMsQ0FBYjtBQUNBLEdBQUlDLG1CQUFKO0FBQ0EsR0FBSSxDQUFDTCxRQUFMLENBQWU7O0FBRWJGLFNBQVNRLFFBQVQsQ0FBa0JDLE9BQWxCLENBQTBCLFNBQUNDLEVBQUQsQ0FBS0MsQ0FBTCxDQUFXO0FBQ25DLEdBQUksRUFBRUQsR0FBR0UsT0FBSCxFQUFjRixHQUFHRyxLQUFuQixDQUFKLENBQStCO0FBQzdCVCxRQUFRQyxLQUFSLDBEQUF1RUssR0FBR0ksR0FBMUU7QUFDRDtBQUNELEdBQUlKLEdBQUdFLE9BQVAsQ0FBZ0I7QUFDZE4sTUFBUUssQ0FBUjtBQUNELENBRkQsSUFFTyxJQUFJRCxHQUFHRyxLQUFILENBQVNFLE1BQWIsQ0FBcUI7QUFDMUJULE1BQVFLLENBQVI7QUFDRDtBQUNGLENBVEQ7QUFVRCxDQVpELElBWU87QUFDTEosWUFBY0wsU0FBU0gsS0FBVCxDQUFkO0FBQ0EsR0FBSSxDQUFDUSxXQUFMLENBQWtCSCxRQUFRQyxLQUFSLENBQWMsNkJBQWQ7QUFDbEJMLFNBQVNRLFFBQVQsQ0FBa0JDLE9BQWxCLENBQTBCLFNBQUNDLEVBQUQsQ0FBS0MsQ0FBTCxDQUFXO0FBQ25DLEdBQUlELEdBQUdNLFFBQUgsR0FBZ0JULFdBQXBCLENBQWlDO0FBQy9CRCxNQUFRSyxDQUFSO0FBQ0Q7QUFDRixDQUpEO0FBS0Q7QUFDRCxHQUFJTCxRQUFVLENBQUMsQ0FBZixDQUFrQkYsUUFBUUMsS0FBUiwwQkFBa0NFLFdBQWxDO0FBQ2xCQSxZQUFjUCxTQUFTUSxRQUFULENBQWtCRixLQUFsQixFQUF5QlUsUUFBdkM7O0FBRUEsR0FBSWYsdUJBQUo7QUFDQSxHQUFJSyxRQUFVTixTQUFTTSxLQUF2QixDQUE4QjtBQUM1QixHQUFJUCxNQUFNa0IsYUFBVixDQUF5QjtBQUN2QmhCO0FBQ0tELFFBREw7QUFFRVEsU0FBVSxDQUFDUixTQUFTUSxRQUFULENBQWtCUixTQUFTTSxLQUEzQixDQUFELENBRlo7QUFHRUEsTUFBTyxDQUhUOztBQUtBWSxXQUFXLFVBQU07QUFDZixrQkFBUVgsV0FBUixFQUFxQixDQUFFVSxjQUFlLElBQWpCLENBQXJCO0FBQ0QsQ0FGRCxDQUVHLENBRkg7QUFHRCxDQVRELElBU087QUFDTGhCLDRCQUF1QkQsUUFBdkIsRUFBaUNNLFdBQWpDO0FBQ0FZLFdBQVcsVUFBTTtBQUNmLGtCQUFRWCxXQUFSO0FBQ0QsQ0FGRCxDQUVHLENBRkg7QUFHRDtBQUNGLENBaEJELElBZ0JPO0FBQ0xOLGdCQUFrQkQsUUFBbEI7QUFDRDs7QUFFRDtBQUNFO0FBQ0UsV0FBWUQsTUFBTW9CLFVBRHBCO0FBRUUsZ0JBQWlCbEIsZUFGbkIsRUFERjs7O0FBTUQ7O0FBRURILE9BQU9zQixTQUFQLENBQW1CO0FBQ2pCbkIsZ0JBQWlCLGlCQUFVb0IsTUFEVjtBQUVqQkYsV0FBWSxpQkFBVUcsSUFGTDtBQUdqQnBCLFNBQVUsaUJBQVVvQixJQUhIO0FBSWpCbkIsT0FBUSxpQkFBVW9CLEdBSkQ7QUFLakJOLGNBQWUsaUJBQVVPLElBTFIsQ0FBbkIiLCJmaWxlIjoiU3dpdGNoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUYWJCYXIgZnJvbSAnLi9UYWJCYXInO1xuaW1wb3J0IEFjdGlvbnMgZnJvbSAnLi9BY3Rpb25zJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU3dpdGNoKHByb3BzKSB7XG4gIGNvbnN0IG5hdlN0YXRlID0gcHJvcHMubmF2aWdhdGlvblN0YXRlO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0gcHJvcHMuc2VsZWN0b3I7XG4gIGNvbnN0IHN0YXRlbSA9IHByb3BzLnN0YXRlbTtcbiAgaWYgKCFzZWxlY3RvciAmJiAhc3RhdGVtKSBjb25zb2xlLmVycm9yKCdTZWxlY3RvciBzaG91bGQgYmUgZGVmaW5lZC4nKTtcbiAgbGV0IGluZGV4ID0gLTE7XG4gIGxldCBzZWxlY3RlZEtleTtcbiAgaWYgKCFzZWxlY3Rvcikge1xuICAgIC8vIHN1cHBvcnQgU3RhdGVtIC0gSGFyZWwgc3RhdGVjaGFydHMgbWFjaGluZSFcbiAgICBuYXZTdGF0ZS5jaGlsZHJlbi5mb3JFYWNoKChlbCwgaSkgPT4ge1xuICAgICAgaWYgKCEoZWwuZGVmYXVsdCB8fCBlbC5zdGF0ZSkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRWl0aGVyIGRlZmF1bHQgb3Igc3RhdGUgc2hvdWxkIGJlIGRlZmluZWQgZm9yIGVsZW1lbnQ9JHtlbC5rZXl9YCk7XG4gICAgICB9XG4gICAgICBpZiAoZWwuZGVmYXVsdCkge1xuICAgICAgICBpbmRleCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKGVsLnN0YXRlLmFjdGl2ZSkge1xuICAgICAgICBpbmRleCA9IGk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgc2VsZWN0ZWRLZXkgPSBzZWxlY3Rvcihwcm9wcyk7XG4gICAgaWYgKCFzZWxlY3RlZEtleSkgY29uc29sZS5lcnJvcignU2VsZWN0b3Igc2hvdWxkIHJldHVybiBrZXkuJyk7XG4gICAgbmF2U3RhdGUuY2hpbGRyZW4uZm9yRWFjaCgoZWwsIGkpID0+IHtcbiAgICAgIGlmIChlbC5zY2VuZUtleSA9PT0gc2VsZWN0ZWRLZXkpIHtcbiAgICAgICAgaW5kZXggPSBpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGlmIChpbmRleCA9PT0gLTEpIGNvbnNvbGUuZXJyb3IoYEEgc2NlbmUgZm9yIGtleSDigJwke3NlbGVjdGVkS2V5feKAnSBkb2VzIG5vdCBleGlzdC5gKTtcbiAgc2VsZWN0ZWRLZXkgPSBuYXZTdGF0ZS5jaGlsZHJlbltpbmRleF0uc2NlbmVLZXk7XG5cbiAgbGV0IG5hdmlnYXRpb25TdGF0ZTtcbiAgaWYgKGluZGV4ICE9PSBuYXZTdGF0ZS5pbmRleCkge1xuICAgIGlmIChwcm9wcy51bm1vdW50U2NlbmVzKSB7XG4gICAgICBuYXZpZ2F0aW9uU3RhdGUgPSB7XG4gICAgICAgIC4uLm5hdlN0YXRlLFxuICAgICAgICBjaGlsZHJlbjogW25hdlN0YXRlLmNoaWxkcmVuW25hdlN0YXRlLmluZGV4XV0sXG4gICAgICAgIGluZGV4OiAwLFxuICAgICAgfTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBBY3Rpb25zW3NlbGVjdGVkS2V5XSh7IHVubW91bnRTY2VuZXM6IHRydWUgfSk7XG4gICAgICB9LCAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmF2aWdhdGlvblN0YXRlID0geyAuLi5uYXZTdGF0ZSwgaW5kZXggfTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBBY3Rpb25zW3NlbGVjdGVkS2V5XSgpO1xuICAgICAgfSwgMSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG5hdmlnYXRpb25TdGF0ZSA9IG5hdlN0YXRlO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8VGFiQmFyXG4gICAgICBvbk5hdmlnYXRlPXtwcm9wcy5vbk5hdmlnYXRlfVxuICAgICAgbmF2aWdhdGlvblN0YXRlPXtuYXZpZ2F0aW9uU3RhdGV9XG4gICAgLz5cbiAgKTtcbn1cblxuU3dpdGNoLnByb3BUeXBlcyA9IHtcbiAgbmF2aWdhdGlvblN0YXRlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBvbk5hdmlnYXRlOiBQcm9wVHlwZXMuZnVuYyxcbiAgc2VsZWN0b3I6IFByb3BUeXBlcy5mdW5jLFxuICBzdGF0ZW06IFByb3BUeXBlcy5hbnksXG4gIHVubW91bnRTY2VuZXM6IFByb3BUeXBlcy5ib29sLFxufTtcbiJdfQ==