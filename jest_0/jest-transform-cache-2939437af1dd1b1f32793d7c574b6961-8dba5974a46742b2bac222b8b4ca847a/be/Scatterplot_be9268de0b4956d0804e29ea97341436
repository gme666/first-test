3932f8bbafff281e1b206d3aab9a4c64
Object.defineProperty(exports,"__esModule",{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();

















var _react=require('react');var _react2=_interopRequireDefault(_react);
var _reactNative=require('react-native');
var _reactNativeSvg=require('react-native-svg');var _reactNativeSvg2=_interopRequireDefault(_reactNativeSvg);
var _util=require('./util');
var _Axis=require('./Axis');var _Axis2=_interopRequireDefault(_Axis);
var _lodash=require('lodash');var _lodash2=_interopRequireDefault(_lodash);
require('babel-polyfill');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}

var Stock=require('paths-js/stock');var

Scatterplot=function(_Component){_inherits(Scatterplot,_Component);function Scatterplot(){_classCallCheck(this,Scatterplot);return _possibleConstructorReturn(this,(Scatterplot.__proto__||Object.getPrototypeOf(Scatterplot)).apply(this,arguments));}_createClass(Scatterplot,[{key:'getMaxAndMin',value:function getMaxAndMin(




















































chart,key,scale){
var maxValue=void 0;
var minValue=void 0;
_lodash2.default.each(chart.curves,function(serie){
var values=_lodash2.default.map(serie.item,function(item){
return item[key];
});

var max=_lodash2.default.max(values);
if(maxValue===undefined||max>maxValue)maxValue=max;
var min=_lodash2.default.min(values);
if(minValue===undefined||min<minValue)minValue=min;
});
return{
minValue:minValue,
maxValue:maxValue,
min:scale(minValue),
max:scale(maxValue)};

}},{key:'render',value:function render()

{
var noDataMsg=this.props.noDataMessage||'No data available';
if(this.props.data===undefined)return _react2.default.createElement(_reactNative.Text,null,noDataMsg);

var options=new _util.Options(this.props);
var accessor=function accessor(key){
return function(x){
return x[key];
};
};

var chart=Stock({
data:this.props.data,
xaccessor:accessor(this.props.xKey),
yaccessor:accessor(this.props.yKey),
width:options.chartWidth,
height:options.chartHeight,
closed:false});


var chartArea={
x:this.getMaxAndMin(chart,this.props.xKey,chart.xscale),
y:this.getMaxAndMin(chart,this.props.yKey,chart.yscale),
margin:options.margin};


var colors=(0,_util.styleSvg)({},options);
var points=_lodash2.default.map(chart.curves,function(c){
return _lodash2.default.map(c.line.path.points(),function(p,j){
var render=_react2.default.createElement(_reactNativeSvg.G,{key:'k'+j,x:p[0],y:p[1]},
_react2.default.createElement(_reactNativeSvg.Circle,_extends({},colors,{cx:0,cy:0,r:options.r||5,fillOpacity:1})));


return render;
},this);
},this);

return _react2.default.createElement(_reactNativeSvg2.default,{width:options.width,height:options.height},
_react2.default.createElement(_reactNativeSvg.G,{x:options.margin.left,y:options.margin.top},
points,
_react2.default.createElement(_Axis2.default,{scale:chart.xscale,options:options.axisX,chartArea:chartArea}),
_react2.default.createElement(_Axis2.default,{scale:chart.yscale,options:options.axisY,chartArea:chartArea})));


}}]);return Scatterplot;}(_react.Component);Scatterplot.defaultProps={xKey:'',yKey:'',options:{width:600,height:600,margin:{top:40,left:60,bottom:30,right:30},fill:'#2980B9',stroke:'#3E90F0',animate:{type:'delayed',duration:200,fillTransition:3},label:{fontFamily:'Arial',fontSize:14,bold:true,color:'#34495E'},axisX:{showAxis:true,showLines:true,showLabels:true,showTicks:true,zeroAxis:false,orient:'bottom',label:{fontFamily:'Arial',fontSize:14,bold:true,color:'#34495E'}},axisY:{showAxis:true,showLines:true,showLabels:true,showTicks:true,zeroAxis:false,orient:'left',label:{fontFamily:'Arial',fontSize:14,bold:true,color:'#34495E'}}}};exports.default=Scatterplot;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNjYXR0ZXJwbG90LmpzIl0sIm5hbWVzIjpbIlN0b2NrIiwicmVxdWlyZSIsIlNjYXR0ZXJwbG90IiwiY2hhcnQiLCJrZXkiLCJzY2FsZSIsIm1heFZhbHVlIiwibWluVmFsdWUiLCJlYWNoIiwiY3VydmVzIiwic2VyaWUiLCJ2YWx1ZXMiLCJtYXAiLCJpdGVtIiwibWF4IiwidW5kZWZpbmVkIiwibWluIiwibm9EYXRhTXNnIiwicHJvcHMiLCJub0RhdGFNZXNzYWdlIiwiZGF0YSIsIm9wdGlvbnMiLCJhY2Nlc3NvciIsIngiLCJ4YWNjZXNzb3IiLCJ4S2V5IiwieWFjY2Vzc29yIiwieUtleSIsIndpZHRoIiwiY2hhcnRXaWR0aCIsImhlaWdodCIsImNoYXJ0SGVpZ2h0IiwiY2xvc2VkIiwiY2hhcnRBcmVhIiwiZ2V0TWF4QW5kTWluIiwieHNjYWxlIiwieSIsInlzY2FsZSIsIm1hcmdpbiIsImNvbG9ycyIsInBvaW50cyIsImMiLCJsaW5lIiwicGF0aCIsInAiLCJqIiwicmVuZGVyIiwiciIsImxlZnQiLCJ0b3AiLCJheGlzWCIsImF4aXNZIiwiZGVmYXVsdFByb3BzIiwiYm90dG9tIiwicmlnaHQiLCJmaWxsIiwic3Ryb2tlIiwiYW5pbWF0ZSIsInR5cGUiLCJkdXJhdGlvbiIsImZpbGxUcmFuc2l0aW9uIiwibGFiZWwiLCJmb250RmFtaWx5IiwiZm9udFNpemUiLCJib2xkIiwiY29sb3IiLCJzaG93QXhpcyIsInNob3dMaW5lcyIsInNob3dMYWJlbHMiLCJzaG93VGlja3MiLCJ6ZXJvQXhpcyIsIm9yaWVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBLDRCO0FBQ0E7QUFDQSxnRDtBQUNBO0FBQ0EsNEI7QUFDQSw4QjtBQUNBLDBCOztBQUVBLEdBQU1BLE9BQVFDLFFBQVEsZ0JBQVIsQ0FBZCxDOztBQUVxQkMsVzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxRE5DLEssQ0FB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QU8sQ0FDTGUsU0FBVSxJQURMLENBRUxDLFVBQVcsSUFGTixDQUdMQyxXQUFZLElBSFAsQ0FJTEMsVUFBVyxJQUpOLENBS0xDLFNBQVUsS0FMTCxDQU1MQyxPQUFRLE1BTkgsQ0FPTFYsTUFBTyxDQUNMQyxXQUFZLE9BRFAsQ0FFTEMsU0FBVSxFQUZMLENBR0xDLEtBQU0sSUFIRCxDQUlMQyxNQUFPLFNBSkYsQ0FQRixDQS9CQSxDQUhXLEMsaUJBRkgvRCxXIiwiZmlsZSI6IlNjYXR0ZXJwbG90LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAyMDE2IENhcGl0YWwgT25lIFNlcnZpY2VzLCBMTENcblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuU1BEWC1Db3B5cmlnaHQ6IENvcHlyaWdodCAoYykgQ2FwaXRhbCBPbmUgU2VydmljZXMsIExMQ1xuU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiovXG5cbmltcG9ydCBSZWFjdCwge0NvbXBvbmVudH0gZnJvbSAncmVhY3QnXG5pbXBvcnQge1RleHQgYXMgUmVhY3RUZXh0fSAgZnJvbSAncmVhY3QtbmF0aXZlJ1xuaW1wb3J0IFN2Zyx7IENpcmNsZSwgRyB9IGZyb20gJ3JlYWN0LW5hdGl2ZS1zdmcnXG5pbXBvcnQgeyBPcHRpb25zLCBzdHlsZVN2ZyB9IGZyb20gJy4vdXRpbCdcbmltcG9ydCBBeGlzIGZyb20gJy4vQXhpcydcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCdcbmltcG9ydCAnYmFiZWwtcG9seWZpbGwnXG5cbmNvbnN0IFN0b2NrID0gcmVxdWlyZSgncGF0aHMtanMvc3RvY2snKVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY2F0dGVycGxvdCBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICB4S2V5OicnLFxuICAgIHlLZXk6JycsXG4gICAgb3B0aW9uczoge1xuICAgICAgd2lkdGg6IDYwMCxcbiAgICAgIGhlaWdodDogNjAwLFxuICAgICAgbWFyZ2luOiB7dG9wOiA0MCwgbGVmdDogNjAsIGJvdHRvbTogMzAsIHJpZ2h0OiAzMH0sXG4gICAgICBmaWxsOiAnIzI5ODBCOScsXG4gICAgICBzdHJva2U6ICcjM0U5MEYwJyxcbiAgICAgIGFuaW1hdGU6IHtcbiAgICAgICAgdHlwZTogJ2RlbGF5ZWQnLFxuICAgICAgICBkdXJhdGlvbjogMjAwLFxuICAgICAgICBmaWxsVHJhbnNpdGlvbjozXG4gICAgICB9LFxuICAgICAgbGFiZWw6IHtcbiAgICAgICAgZm9udEZhbWlseTogJ0FyaWFsJyxcbiAgICAgICAgZm9udFNpemU6IDE0LFxuICAgICAgICBib2xkOiB0cnVlLFxuICAgICAgICBjb2xvcjogJyMzNDQ5NUUnXG4gICAgICB9LFxuICAgICAgYXhpc1g6IHtcbiAgICAgICAgc2hvd0F4aXM6IHRydWUsXG4gICAgICAgIHNob3dMaW5lczogdHJ1ZSxcbiAgICAgICAgc2hvd0xhYmVsczogdHJ1ZSxcbiAgICAgICAgc2hvd1RpY2tzOiB0cnVlLFxuICAgICAgICB6ZXJvQXhpczogZmFsc2UsXG4gICAgICAgIG9yaWVudDogJ2JvdHRvbScsXG4gICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgZm9udEZhbWlseTogJ0FyaWFsJyxcbiAgICAgICAgICBmb250U2l6ZTogMTQsXG4gICAgICAgICAgYm9sZDogdHJ1ZSxcbiAgICAgICAgICBjb2xvcjogJyMzNDQ5NUUnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBheGlzWToge1xuICAgICAgICBzaG93QXhpczogdHJ1ZSxcbiAgICAgICAgc2hvd0xpbmVzOiB0cnVlLFxuICAgICAgICBzaG93TGFiZWxzOiB0cnVlLFxuICAgICAgICBzaG93VGlja3M6IHRydWUsXG4gICAgICAgIHplcm9BeGlzOiBmYWxzZSxcbiAgICAgICAgb3JpZW50OiAnbGVmdCcsXG4gICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgZm9udEZhbWlseTogJ0FyaWFsJyxcbiAgICAgICAgICBmb250U2l6ZTogMTQsXG4gICAgICAgICAgYm9sZDogdHJ1ZSxcbiAgICAgICAgICBjb2xvcjogJyMzNDQ5NUUnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRNYXhBbmRNaW4oY2hhcnQsIGtleSxzY2FsZSkge1xuICAgIGxldCBtYXhWYWx1ZVxuICAgIGxldCBtaW5WYWx1ZVxuICAgIF8uZWFjaChjaGFydC5jdXJ2ZXMsIGZ1bmN0aW9uIChzZXJpZSkge1xuICAgICAgbGV0IHZhbHVlcyA9IF8ubWFwKHNlcmllLml0ZW0sIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtW2tleV1cbiAgICAgIH0pXG5cbiAgICAgIGxldCBtYXggPSBfLm1heCh2YWx1ZXMpXG4gICAgICBpZiAobWF4VmFsdWUgPT09IHVuZGVmaW5lZCB8fCBtYXggPiBtYXhWYWx1ZSkgbWF4VmFsdWUgPSBtYXhcbiAgICAgIGxldCBtaW4gPSBfLm1pbih2YWx1ZXMpXG4gICAgICBpZiAobWluVmFsdWUgPT09IHVuZGVmaW5lZCB8fCBtaW4gPCBtaW5WYWx1ZSkgbWluVmFsdWUgPSBtaW5cbiAgICB9KVxuICAgIHJldHVybiB7XG4gICAgICBtaW5WYWx1ZTogbWluVmFsdWUsXG4gICAgICBtYXhWYWx1ZTogbWF4VmFsdWUsXG4gICAgICBtaW46c2NhbGUobWluVmFsdWUpLFxuICAgICAgbWF4OnNjYWxlKG1heFZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBub0RhdGFNc2cgPSB0aGlzLnByb3BzLm5vRGF0YU1lc3NhZ2UgfHwgJ05vIGRhdGEgYXZhaWxhYmxlJ1xuICAgIGlmICh0aGlzLnByb3BzLmRhdGEgPT09IHVuZGVmaW5lZCkgcmV0dXJuICg8UmVhY3RUZXh0Pntub0RhdGFNc2d9PC9SZWFjdFRleHQ+KVxuXG4gICAgY29uc3Qgb3B0aW9ucyA9IG5ldyBPcHRpb25zKHRoaXMucHJvcHMpXG4gICAgY29uc3QgYWNjZXNzb3IgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHhba2V5XVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGNoYXJ0ID0gU3RvY2soe1xuICAgICAgZGF0YTogdGhpcy5wcm9wcy5kYXRhLFxuICAgICAgeGFjY2Vzc29yOiBhY2Nlc3Nvcih0aGlzLnByb3BzLnhLZXkpLFxuICAgICAgeWFjY2Vzc29yOiBhY2Nlc3Nvcih0aGlzLnByb3BzLnlLZXkpLFxuICAgICAgd2lkdGg6IG9wdGlvbnMuY2hhcnRXaWR0aCxcbiAgICAgIGhlaWdodDogb3B0aW9ucy5jaGFydEhlaWdodCxcbiAgICAgIGNsb3NlZDogZmFsc2VcbiAgICB9KVxuXG4gICAgY29uc3QgY2hhcnRBcmVhID0ge1xuICAgICAgeDp0aGlzLmdldE1heEFuZE1pbihjaGFydCx0aGlzLnByb3BzLnhLZXksY2hhcnQueHNjYWxlKSxcbiAgICAgIHk6dGhpcy5nZXRNYXhBbmRNaW4oY2hhcnQsdGhpcy5wcm9wcy55S2V5LGNoYXJ0LnlzY2FsZSksXG4gICAgICBtYXJnaW46b3B0aW9ucy5tYXJnaW5cbiAgICB9XG5cbiAgICBjb25zdCBjb2xvcnMgPSBzdHlsZVN2Zyh7fSxvcHRpb25zKVxuICAgIGNvbnN0IHBvaW50cyA9IF8ubWFwKGNoYXJ0LmN1cnZlcywgZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBfLm1hcChjLmxpbmUucGF0aC5wb2ludHMoKSxmdW5jdGlvbihwLGopIHtcbiAgICAgICAgbGV0IHJlbmRlciA9IDxHIGtleT17J2snICsgan0geD17cFswXX0geT17cFsxXX0+XG4gICAgICAgICAgICAgICAgICAgIDxDaXJjbGUgey4uLmNvbG9yc30gY3g9ezB9IGN5PXswfSByPXtvcHRpb25zLnIgfHwgNX0gZmlsbE9wYWNpdHk9ezF9IC8+XG4gICAgICAgICAgICAgICAgPC9HPlxuXG4gICAgICAgIHJldHVybiByZW5kZXJcbiAgICAgIH0sdGhpcylcbiAgICB9LHRoaXMpXG5cbiAgICByZXR1cm4gKDxTdmcgd2lkdGg9e29wdGlvbnMud2lkdGh9IGhlaWdodD17b3B0aW9ucy5oZWlnaHR9PlxuICAgICAgICAgICAgPEcgeD17b3B0aW9ucy5tYXJnaW4ubGVmdH0geT17b3B0aW9ucy5tYXJnaW4udG9wfT5cbiAgICAgICAgICAgICAgICB7IHBvaW50cyB9XG4gICAgICAgICAgICAgICAgPEF4aXMgc2NhbGU9e2NoYXJ0LnhzY2FsZX0gb3B0aW9ucz17b3B0aW9ucy5heGlzWH0gY2hhcnRBcmVhPXtjaGFydEFyZWF9IC8+XG4gICAgICAgICAgICAgICAgPEF4aXMgc2NhbGU9e2NoYXJ0LnlzY2FsZX0gb3B0aW9ucz17b3B0aW9ucy5heGlzWX0gY2hhcnRBcmVhPXtjaGFydEFyZWF9IC8+XG4gICAgICAgICAgICA8L0c+XG4gICAgICAgIDwvU3ZnPilcbiAgfVxufVxuIl19