f5a6af2249beddea7cbd0d122bf3a213











'use strict';var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[typeof Symbol==='function'?Symbol.iterator:'@@iterator'](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if((typeof Symbol==='function'?Symbol.iterator:'@@iterator')in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}

var RCTDeviceEventEmitter=require('RCTDeviceEventEmitter');
var Map=require('Map');
var infoLog=require('infoLog');







function defaultExtras(){
BugReporting.addFileSource('react_hierarchy.txt',function(){return require('dumpReactTree')();});
}var







BugReporting=function(){function BugReporting(){_classCallCheck(this,BugReporting);}_createClass(BugReporting,null,[{key:'_maybeInit',value:function _maybeInit()




{
if(!BugReporting._subscription){
BugReporting._subscription=RCTDeviceEventEmitter.
addListener('collectBugExtraData',BugReporting.collectExtraData,null);
defaultExtras();
}
}},{key:'addSource',value:function addSource(









key,callback){
return this._addSource(key,callback,BugReporting._extraSources);
}},{key:'addFileSource',value:function addFileSource(









key,callback){
return this._addSource(key,callback,BugReporting._fileSources);
}},{key:'_addSource',value:function _addSource(

key,callback,source){
BugReporting._maybeInit();
if(source.has(key)){
console.warn('BugReporting.add* called multiple times for same key \''+key+'\'');
}
source.set(key,callback);
return{remove:function remove(){source.delete(key);}};
}},{key:'collectExtraData',value:function collectExtraData()







{
var extraData={};
for(var _iterator=BugReporting._extraSources,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[typeof Symbol==='function'?Symbol.iterator:'@@iterator']();;){var _ref3;if(_isArray){if(_i>=_iterator.length)break;_ref3=_iterator[_i++];}else{_i=_iterator.next();if(_i.done)break;_ref3=_i.value;}var _ref=_ref3;var _ref2=_slicedToArray(_ref,2);var _key=_ref2[0];var callback=_ref2[1];
extraData[_key]=callback();
}
var fileData={};
for(var _iterator2=BugReporting._fileSources,_isArray2=Array.isArray(_iterator2),_i2=0,_iterator2=_isArray2?_iterator2:_iterator2[typeof Symbol==='function'?Symbol.iterator:'@@iterator']();;){var _ref6;if(_isArray2){if(_i2>=_iterator2.length)break;_ref6=_iterator2[_i2++];}else{_i2=_iterator2.next();if(_i2.done)break;_ref6=_i2.value;}var _ref4=_ref6;var _ref5=_slicedToArray(_ref4,2);var _key2=_ref5[0];var _callback=_ref5[1];
fileData[_key2]=_callback();
}
infoLog('BugReporting extraData:',extraData);
var BugReportingNativeModule=require('NativeModules').BugReporting;
BugReportingNativeModule&&
BugReportingNativeModule.setExtraData&&
BugReportingNativeModule.setExtraData(extraData,fileData);

return{extras:extraData,files:fileData};
}}]);return BugReporting;}();BugReporting._extraSources=new Map();BugReporting._fileSources=new Map();BugReporting._subscription=null;


module.exports=BugReporting;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJ1Z1JlcG9ydGluZy5qcyJdLCJuYW1lcyI6WyJSQ1REZXZpY2VFdmVudEVtaXR0ZXIiLCJyZXF1aXJlIiwiTWFwIiwiaW5mb0xvZyIsImRlZmF1bHRFeHRyYXMiLCJCdWdSZXBvcnRpbmciLCJhZGRGaWxlU291cmNlIiwiX3N1YnNjcmlwdGlvbiIsImFkZExpc3RlbmVyIiwiY29sbGVjdEV4dHJhRGF0YSIsImtleSIsImNhbGxiYWNrIiwiX2FkZFNvdXJjZSIsIl9leHRyYVNvdXJjZXMiLCJfZmlsZVNvdXJjZXMiLCJzb3VyY2UiLCJfbWF5YmVJbml0IiwiaGFzIiwiY29uc29sZSIsIndhcm4iLCJzZXQiLCJyZW1vdmUiLCJkZWxldGUiLCJleHRyYURhdGEiLCJmaWxlRGF0YSIsIkJ1Z1JlcG9ydGluZ05hdGl2ZU1vZHVsZSIsInNldEV4dHJhRGF0YSIsImV4dHJhcyIsImZpbGVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFXQSxhOztBQUVBLEdBQU1BLHVCQUF3QkMsUUFBUSx1QkFBUixDQUE5QjtBQUNBLEdBQU1DLEtBQU1ELFFBQVEsS0FBUixDQUFaO0FBQ0EsR0FBTUUsU0FBVUYsUUFBUSxTQUFSLENBQWhCOzs7Ozs7OztBQVFBLFFBQVNHLGNBQVQsRUFBeUI7QUFDdkJDLGFBQWFDLGFBQWIsQ0FBMkIscUJBQTNCLENBQWtELGlCQUFNTCxTQUFRLGVBQVIsR0FBTixFQUFsRDtBQUNELEM7Ozs7Ozs7O0FBUUtJLFk7Ozs7O0FBS2dCO0FBQ2xCLEdBQUksQ0FBQ0EsYUFBYUUsYUFBbEIsQ0FBaUM7QUFDL0JGLGFBQWFFLGFBQWIsQ0FBNkJQO0FBQ3hCUSxXQUR3QixDQUNaLHFCQURZLENBQ1dILGFBQWFJLGdCQUR4QixDQUMwQyxJQUQxQyxDQUE3QjtBQUVBTDtBQUNEO0FBQ0YsQzs7Ozs7Ozs7OztBQVVnQk0sRyxDQUFhQyxRLENBQWdEO0FBQzVFLE1BQU8sTUFBS0MsVUFBTCxDQUFnQkYsR0FBaEIsQ0FBcUJDLFFBQXJCLENBQStCTixhQUFhUSxhQUE1QyxDQUFQO0FBQ0QsQzs7Ozs7Ozs7OztBQVVvQkgsRyxDQUFhQyxRLENBQWdEO0FBQ2hGLE1BQU8sTUFBS0MsVUFBTCxDQUFnQkYsR0FBaEIsQ0FBcUJDLFFBQXJCLENBQStCTixhQUFhUyxZQUE1QyxDQUFQO0FBQ0QsQzs7QUFFaUJKLEcsQ0FBYUMsUSxDQUEwQkksTSxDQUEyRDtBQUNsSFYsYUFBYVcsVUFBYjtBQUNBLEdBQUlELE9BQU9FLEdBQVAsQ0FBV1AsR0FBWCxDQUFKLENBQXFCO0FBQ25CUSxRQUFRQyxJQUFSLDJEQUFzRVQsR0FBdEU7QUFDRDtBQUNESyxPQUFPSyxHQUFQLENBQVdWLEdBQVgsQ0FBZ0JDLFFBQWhCO0FBQ0EsTUFBTyxDQUFDVSxPQUFRLGlCQUFNLENBQUVOLE9BQU9PLE1BQVAsQ0FBY1osR0FBZCxFQUFxQixDQUF0QyxDQUFQO0FBQ0QsQzs7Ozs7Ozs7QUFRb0M7QUFDbkMsR0FBTWEsV0FBdUIsRUFBN0I7QUFDQSxrQkFBOEJsQixhQUFhUSxhQUEzQyw0SUFBMEQsMExBQTlDSCxLQUE4QyxhQUF6Q0MsU0FBeUM7QUFDeERZLFVBQVViLElBQVYsRUFBaUJDLFVBQWpCO0FBQ0Q7QUFDRCxHQUFNYSxVQUFzQixFQUE1QjtBQUNBLG1CQUE4Qm5CLGFBQWFTLFlBQTNDLG1KQUF5RCxxTUFBN0NKLE1BQTZDLGFBQXhDQyxVQUF3QztBQUN2RGEsU0FBU2QsS0FBVCxFQUFnQkMsV0FBaEI7QUFDRDtBQUNEUixRQUFRLHlCQUFSLENBQW1Db0IsU0FBbkM7QUFDQSxHQUFNRSwwQkFBMkJ4QixRQUFRLGVBQVIsRUFBeUJJLFlBQTFEO0FBQ0FvQjtBQUNFQSx5QkFBeUJDLFlBRDNCO0FBRUVELHlCQUF5QkMsWUFBekIsQ0FBc0NILFNBQXRDLENBQWlEQyxRQUFqRCxDQUZGOztBQUlBLE1BQU8sQ0FBRUcsT0FBUUosU0FBVixDQUFxQkssTUFBT0osUUFBNUIsQ0FBUDtBQUNELEMsNEJBcEVHbkIsWSxDQUNHUSxhLENBQTZDLEdBQUlYLElBQUosRSxDQURoREcsWSxDQUVHUyxZLENBQTRDLEdBQUlaLElBQUosRSxDQUYvQ0csWSxDQUdHRSxhLENBQXNDLEk7OztBQW9FL0NzQixPQUFPQyxPQUFQLENBQWlCekIsWUFBakIiLCJmaWxlIjoiQnVnUmVwb3J0aW5nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBCdWdSZXBvcnRpbmdcbiAqIEBmbG93XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgUkNURGV2aWNlRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnUkNURGV2aWNlRXZlbnRFbWl0dGVyJyk7XG5jb25zdCBNYXAgPSByZXF1aXJlKCdNYXAnKTtcbmNvbnN0IGluZm9Mb2cgPSByZXF1aXJlKCdpbmZvTG9nJyk7XG5cbmltcG9ydCB0eXBlIEVtaXR0ZXJTdWJzY3JpcHRpb24gZnJvbSAnRW1pdHRlclN1YnNjcmlwdGlvbic7XG5cbnR5cGUgRXh0cmFEYXRhID0geyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbnR5cGUgU291cmNlQ2FsbGJhY2sgPSAoKSA9PiBzdHJpbmc7XG50eXBlIERlYnVnRGF0YSA9IHsgZXh0cmFzOiBFeHRyYURhdGEsIGZpbGVzOiBFeHRyYURhdGEgfTtcblxuZnVuY3Rpb24gZGVmYXVsdEV4dHJhcygpIHtcbiAgQnVnUmVwb3J0aW5nLmFkZEZpbGVTb3VyY2UoJ3JlYWN0X2hpZXJhcmNoeS50eHQnLCAoKSA9PiByZXF1aXJlKCdkdW1wUmVhY3RUcmVlJykoKSk7XG59XG5cbi8qKlxuICogQSBzaW1wbGUgY2xhc3MgZm9yIGNvbGxlY3RpbmcgYnVnIHJlcG9ydCBkYXRhLiBDb21wb25lbnRzIGNhbiBhZGQgc291cmNlcyB0aGF0IHdpbGwgYmUgcXVlcmllZCB3aGVuIGEgYnVnIHJlcG9ydFxuICogaXMgY3JlYXRlZCB2aWEgYGNvbGxlY3RFeHRyYURhdGFgLiBGb3IgZXhhbXBsZSwgYSBsaXN0IGNvbXBvbmVudCBtaWdodCBhZGQgYSBzb3VyY2UgdGhhdCBwcm92aWRlcyB0aGUgbGlzdCBvZiByb3dzXG4gKiB0aGF0IGFyZSBjdXJyZW50bHkgdmlzaWJsZSBvbiBzY3JlZW4uIENvbXBvbmVudHMgc2hvdWxkIGFsc28gcmVtZW1iZXIgdG8gY2FsbCBgcmVtb3ZlKClgIG9uIHRoZSBvYmplY3QgdGhhdCBpc1xuICogcmV0dXJuZWQgYnkgYGFkZFNvdXJjZWAgd2hlbiB0aGV5IGFyZSB1bm1vdW50ZWQuXG4gKi9cbmNsYXNzIEJ1Z1JlcG9ydGluZyB7XG4gIHN0YXRpYyBfZXh0cmFTb3VyY2VzOiBNYXA8c3RyaW5nLCBTb3VyY2VDYWxsYmFjaz4gPSBuZXcgTWFwKCk7XG4gIHN0YXRpYyBfZmlsZVNvdXJjZXM6IE1hcDxzdHJpbmcsIFNvdXJjZUNhbGxiYWNrPiA9IG5ldyBNYXAoKTtcbiAgc3RhdGljIF9zdWJzY3JpcHRpb246ID9FbWl0dGVyU3Vic2NyaXB0aW9uID0gbnVsbDtcblxuICBzdGF0aWMgX21heWJlSW5pdCgpIHtcbiAgICBpZiAoIUJ1Z1JlcG9ydGluZy5fc3Vic2NyaXB0aW9uKSB7XG4gICAgICBCdWdSZXBvcnRpbmcuX3N1YnNjcmlwdGlvbiA9IFJDVERldmljZUV2ZW50RW1pdHRlclxuICAgICAgICAgIC5hZGRMaXN0ZW5lcignY29sbGVjdEJ1Z0V4dHJhRGF0YScsIEJ1Z1JlcG9ydGluZy5jb2xsZWN0RXh0cmFEYXRhLCBudWxsKTtcbiAgICAgIGRlZmF1bHRFeHRyYXMoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWFwcyBhIHN0cmluZyBrZXkgdG8gYSBzaW1wbGUgY2FsbGJhY2sgdGhhdCBzaG91bGQgcmV0dXJuIGEgc3RyaW5nIHBheWxvYWQgdG8gYmUgYXR0YWNoZWRcbiAgICogdG8gYSBidWcgcmVwb3J0LiBTb3VyY2UgY2FsbGJhY2tzIGFyZSBjYWxsZWQgd2hlbiBgY29sbGVjdEV4dHJhRGF0YWAgaXMgY2FsbGVkLlxuICAgKlxuICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0byByZW1vdmUgdGhlIHNvdXJjZSB3aGVuIHRoZSBjb21wb25lbnQgdW5tb3VudHMuXG4gICAqXG4gICAqIENvbmZsaWN0cyB0cmFtcGxlIHdpdGggYSB3YXJuaW5nLlxuICAgKi9cbiAgc3RhdGljIGFkZFNvdXJjZShrZXk6IHN0cmluZywgY2FsbGJhY2s6IFNvdXJjZUNhbGxiYWNrKToge3JlbW92ZTogKCkgPT4gdm9pZH0ge1xuICAgIHJldHVybiB0aGlzLl9hZGRTb3VyY2Uoa2V5LCBjYWxsYmFjaywgQnVnUmVwb3J0aW5nLl9leHRyYVNvdXJjZXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hcHMgYSBzdHJpbmcga2V5IHRvIGEgc2ltcGxlIGNhbGxiYWNrIHRoYXQgc2hvdWxkIHJldHVybiBhIHN0cmluZyBwYXlsb2FkIHRvIGJlIGF0dGFjaGVkXG4gICAqIHRvIGEgYnVnIHJlcG9ydC4gU291cmNlIGNhbGxiYWNrcyBhcmUgY2FsbGVkIHdoZW4gYGNvbGxlY3RFeHRyYURhdGFgIGlzIGNhbGxlZC5cbiAgICpcbiAgICogUmV0dXJucyBhbiBvYmplY3QgdG8gcmVtb3ZlIHRoZSBzb3VyY2Ugd2hlbiB0aGUgY29tcG9uZW50IHVubW91bnRzLlxuICAgKlxuICAgKiBDb25mbGljdHMgdHJhbXBsZSB3aXRoIGEgd2FybmluZy5cbiAgICovXG4gIHN0YXRpYyBhZGRGaWxlU291cmNlKGtleTogc3RyaW5nLCBjYWxsYmFjazogU291cmNlQ2FsbGJhY2spOiB7cmVtb3ZlOiAoKSA9PiB2b2lkfSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZFNvdXJjZShrZXksIGNhbGxiYWNrLCBCdWdSZXBvcnRpbmcuX2ZpbGVTb3VyY2VzKTtcbiAgfVxuXG4gIHN0YXRpYyBfYWRkU291cmNlKGtleTogc3RyaW5nLCBjYWxsYmFjazogU291cmNlQ2FsbGJhY2ssIHNvdXJjZTogTWFwPHN0cmluZywgU291cmNlQ2FsbGJhY2s+KToge3JlbW92ZTogKCkgPT4gdm9pZH0ge1xuICAgIEJ1Z1JlcG9ydGluZy5fbWF5YmVJbml0KCk7XG4gICAgaWYgKHNvdXJjZS5oYXMoa2V5KSkge1xuICAgICAgY29uc29sZS53YXJuKGBCdWdSZXBvcnRpbmcuYWRkKiBjYWxsZWQgbXVsdGlwbGUgdGltZXMgZm9yIHNhbWUga2V5ICcke2tleX0nYCk7XG4gICAgfVxuICAgIHNvdXJjZS5zZXQoa2V5LCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHtyZW1vdmU6ICgpID0+IHsgc291cmNlLmRlbGV0ZShrZXkpOyB9fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGNhbiBiZSBjYWxsZWQgZnJvbSBhIG5hdGl2ZSBidWcgcmVwb3J0aW5nIGZsb3csIG9yIGZyb20gSlMgY29kZS5cbiAgICpcbiAgICogSWYgYXZhaWxhYmxlLCB0aGlzIHdpbGwgY2FsbCBgTmF0aXZlTW9kdWxlcy5CdWdSZXBvcnRpbmcuc2V0RXh0cmFEYXRhKGV4dHJhRGF0YSlgXG4gICAqIGFmdGVyIGNvbGxlY3RpbmcgYGV4dHJhRGF0YWAuXG4gICAqL1xuICBzdGF0aWMgY29sbGVjdEV4dHJhRGF0YSgpOiBEZWJ1Z0RhdGEge1xuICAgIGNvbnN0IGV4dHJhRGF0YTogRXh0cmFEYXRhID0ge307XG4gICAgZm9yIChjb25zdCBba2V5LCBjYWxsYmFja10gb2YgQnVnUmVwb3J0aW5nLl9leHRyYVNvdXJjZXMpIHtcbiAgICAgIGV4dHJhRGF0YVtrZXldID0gY2FsbGJhY2soKTtcbiAgICB9XG4gICAgY29uc3QgZmlsZURhdGE6IEV4dHJhRGF0YSA9IHt9O1xuICAgIGZvciAoY29uc3QgW2tleSwgY2FsbGJhY2tdIG9mIEJ1Z1JlcG9ydGluZy5fZmlsZVNvdXJjZXMpIHtcbiAgICAgIGZpbGVEYXRhW2tleV0gPSBjYWxsYmFjaygpO1xuICAgIH1cbiAgICBpbmZvTG9nKCdCdWdSZXBvcnRpbmcgZXh0cmFEYXRhOicsIGV4dHJhRGF0YSk7XG4gICAgY29uc3QgQnVnUmVwb3J0aW5nTmF0aXZlTW9kdWxlID0gcmVxdWlyZSgnTmF0aXZlTW9kdWxlcycpLkJ1Z1JlcG9ydGluZztcbiAgICBCdWdSZXBvcnRpbmdOYXRpdmVNb2R1bGUgJiZcbiAgICAgIEJ1Z1JlcG9ydGluZ05hdGl2ZU1vZHVsZS5zZXRFeHRyYURhdGEgJiZcbiAgICAgIEJ1Z1JlcG9ydGluZ05hdGl2ZU1vZHVsZS5zZXRFeHRyYURhdGEoZXh0cmFEYXRhLCBmaWxlRGF0YSk7XG5cbiAgICByZXR1cm4geyBleHRyYXM6IGV4dHJhRGF0YSwgZmlsZXM6IGZpbGVEYXRhIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCdWdSZXBvcnRpbmc7XG4iXX0=