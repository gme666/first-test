df75b877d43456a85cb77c031c539670











'use strict';

var invariant=require('fbjs/lib/invariant');
var merge=require('merge');

function createStrictShapeTypeChecker(
shapeTypes)
{
function checkType(isRequired,props,propName,componentName,location){
if(!props[propName]){
if(isRequired){
invariant(
false,
'Required object `'+propName+'` was not specified in '+('`'+
componentName+'`.'));

}
return;
}
var propValue=props[propName];
var propType=typeof propValue;
var locationName=location||'(unknown)';
if(propType!=='object'){
invariant(
false,
'Invalid '+locationName+' `'+propName+'` of type `'+propType+'` '+('supplied to `'+
componentName+'`, expected `object`.'));

}


var allKeys=merge(props[propName],shapeTypes);for(var _len=arguments.length,rest=Array(_len>5?_len-5:0),_key=5;_key<_len;_key++){rest[_key-5]=arguments[_key];}
for(var key in allKeys){
var checker=shapeTypes[key];
if(!checker){
invariant(
false,
'Invalid props.'+propName+' key `'+key+'` supplied to `'+componentName+'`.'+'\nBad object: '+
JSON.stringify(props[propName],null,'  ')+'\nValid keys: '+
JSON.stringify(Object.keys(shapeTypes),null,'  '));

}
var error=checker.apply(undefined,[propValue,key,componentName,location].concat(rest));
if(error){
invariant(
false,
error.message+'\nBad object: '+
JSON.stringify(props[propName],null,'  '));

}
}
}
function chainedCheckType(
props,
propName,
componentName,
location)

{for(var _len2=arguments.length,rest=Array(_len2>4?_len2-4:0),_key2=4;_key2<_len2;_key2++){rest[_key2-4]=arguments[_key2];}
return checkType.apply(undefined,[false,props,propName,componentName,location].concat(rest));
}
chainedCheckType.isRequired=checkType.bind(null,true);
return chainedCheckType;
}

module.exports=createStrictShapeTypeChecker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXIuanMiXSwibmFtZXMiOlsiaW52YXJpYW50IiwicmVxdWlyZSIsIm1lcmdlIiwiY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlciIsInNoYXBlVHlwZXMiLCJjaGVja1R5cGUiLCJpc1JlcXVpcmVkIiwicHJvcHMiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJsb2NhdGlvbiIsInByb3BWYWx1ZSIsInByb3BUeXBlIiwibG9jYXRpb25OYW1lIiwiYWxsS2V5cyIsInJlc3QiLCJrZXkiLCJjaGVja2VyIiwiSlNPTiIsInN0cmluZ2lmeSIsIk9iamVjdCIsImtleXMiLCJlcnJvciIsIm1lc3NhZ2UiLCJjaGFpbmVkQ2hlY2tUeXBlIiwiYmluZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBV0E7O0FBRUEsR0FBSUEsV0FBWUMsUUFBUSxvQkFBUixDQUFoQjtBQUNBLEdBQUlDLE9BQVFELFFBQVEsT0FBUixDQUFaOztBQUVBLFFBQVNFLDZCQUFUO0FBQ0VDLFVBREY7QUFFa0M7QUFDaEMsUUFBU0MsVUFBVCxDQUFtQkMsVUFBbkIsQ0FBK0JDLEtBQS9CLENBQXNDQyxRQUF0QyxDQUFnREMsYUFBaEQsQ0FBK0RDLFFBQS9ELENBQW1GO0FBQ2pGLEdBQUksQ0FBQ0gsTUFBTUMsUUFBTixDQUFMLENBQXNCO0FBQ3BCLEdBQUlGLFVBQUosQ0FBZ0I7QUFDZE47QUFDRSxLQURGO0FBRUUsb0JBQXFCUSxRQUFyQjtBQUNLQyxhQURMLE1BRkY7O0FBS0Q7QUFDRDtBQUNEO0FBQ0QsR0FBSUUsV0FBWUosTUFBTUMsUUFBTixDQUFoQjtBQUNBLEdBQUlJLFVBQVcsTUFBT0QsVUFBdEI7QUFDQSxHQUFJRSxjQUFlSCxVQUFZLFdBQS9CO0FBQ0EsR0FBSUUsV0FBYSxRQUFqQixDQUEyQjtBQUN6Qlo7QUFDRSxLQURGO0FBRUUsV0FBV2EsWUFBWCxNQUE2QkwsUUFBN0IsZUFBcURJLFFBQXJEO0FBQ21CSCxhQURuQix5QkFGRjs7QUFLRDs7O0FBR0QsR0FBSUssU0FBVVosTUFBTUssTUFBTUMsUUFBTixDQUFOLENBQXVCSixVQUF2QixDQUFkLENBdkJpRiw4QkFBTlcsSUFBTSxpREFBTkEsSUFBTTtBQXdCakYsSUFBSyxHQUFJQyxJQUFULEdBQWdCRixRQUFoQixDQUF5QjtBQUN2QixHQUFJRyxTQUFVYixXQUFXWSxHQUFYLENBQWQ7QUFDQSxHQUFJLENBQUNDLE9BQUwsQ0FBYztBQUNaakI7QUFDRSxLQURGO0FBRUUsaUJBQWlCUSxRQUFqQixVQUFtQ1EsR0FBbkMsbUJBQTBEUCxhQUExRDtBQUNxQlMsS0FBS0MsU0FBTCxDQUFlWixNQUFNQyxRQUFOLENBQWYsQ0FBZ0MsSUFBaEMsQ0FBc0MsSUFBdEMsQ0FEckI7QUFFcUJVLEtBQUtDLFNBQUwsQ0FBZUMsT0FBT0MsSUFBUCxDQUFZakIsVUFBWixDQUFmLENBQXdDLElBQXhDLENBQThDLElBQTlDLENBSnZCOztBQU1EO0FBQ0QsR0FBSWtCLE9BQVFMLHlCQUFRTixTQUFSLENBQW1CSyxHQUFuQixDQUF3QlAsYUFBeEIsQ0FBdUNDLFFBQXZDLFNBQW9ESyxJQUFwRCxFQUFaO0FBQ0EsR0FBSU8sS0FBSixDQUFXO0FBQ1R0QjtBQUNFLEtBREY7QUFFRXNCLE1BQU1DLE9BQU47QUFDcUJMLEtBQUtDLFNBQUwsQ0FBZVosTUFBTUMsUUFBTixDQUFmLENBQWdDLElBQWhDLENBQXNDLElBQXRDLENBSHZCOztBQUtEO0FBQ0Y7QUFDRjtBQUNELFFBQVNnQixpQkFBVDtBQUNFakIsS0FERjtBQUVFQyxRQUZGO0FBR0VDLGFBSEY7QUFJRUMsUUFKRjs7QUFNVSxnQ0FETEssSUFDSyx1REFETEEsSUFDSztBQUNSLE1BQU9WLDRCQUFVLEtBQVYsQ0FBaUJFLEtBQWpCLENBQXdCQyxRQUF4QixDQUFrQ0MsYUFBbEMsQ0FBaURDLFFBQWpELFNBQThESyxJQUE5RCxFQUFQO0FBQ0Q7QUFDRFMsaUJBQWlCbEIsVUFBakIsQ0FBOEJELFVBQVVvQixJQUFWLENBQWUsSUFBZixDQUFxQixJQUFyQixDQUE5QjtBQUNBLE1BQU9ELGlCQUFQO0FBQ0Q7O0FBRURFLE9BQU9DLE9BQVAsQ0FBaUJ4Qiw0QkFBakIiLCJmaWxlIjoiY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlclxuICogQGZsb3dcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgbWVyZ2UgPSByZXF1aXJlKCdtZXJnZScpO1xuXG5mdW5jdGlvbiBjcmVhdGVTdHJpY3RTaGFwZVR5cGVDaGVja2VyKFxuICBzaGFwZVR5cGVzOiB7W2tleTogc3RyaW5nXTogUmVhY3RQcm9wc0NoZWNrVHlwZX1cbik6IFJlYWN0UHJvcHNDaGFpbmFibGVUeXBlQ2hlY2tlciB7XG4gIGZ1bmN0aW9uIGNoZWNrVHlwZShpc1JlcXVpcmVkLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uPywgLi4ucmVzdCkge1xuICAgIGlmICghcHJvcHNbcHJvcE5hbWVdKSB7XG4gICAgICBpZiAoaXNSZXF1aXJlZCkge1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgYFJlcXVpcmVkIG9iamVjdCBcXGAke3Byb3BOYW1lfVxcYCB3YXMgbm90IHNwZWNpZmllZCBpbiBgICtcbiAgICAgICAgICBgXFxgJHtjb21wb25lbnROYW1lfVxcYC5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgdmFyIHByb3BUeXBlID0gdHlwZW9mIHByb3BWYWx1ZTtcbiAgICB2YXIgbG9jYXRpb25OYW1lID0gbG9jYXRpb24gfHwgJyh1bmtub3duKSc7XG4gICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgYEludmFsaWQgJHtsb2NhdGlvbk5hbWV9IFxcYCR7cHJvcE5hbWV9XFxgIG9mIHR5cGUgXFxgJHtwcm9wVHlwZX1cXGAgYCArXG4gICAgICAgICAgYHN1cHBsaWVkIHRvIFxcYCR7Y29tcG9uZW50TmFtZX1cXGAsIGV4cGVjdGVkIFxcYG9iamVjdFxcYC5gXG4gICAgICApO1xuICAgIH1cbiAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIGFsbCBrZXlzIGluIGNhc2Ugc29tZSBhcmUgcmVxdWlyZWQgYnV0IG1pc3NpbmcgZnJvbVxuICAgIC8vIHByb3BzLlxuICAgIHZhciBhbGxLZXlzID0gbWVyZ2UocHJvcHNbcHJvcE5hbWVdLCBzaGFwZVR5cGVzKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gYWxsS2V5cykge1xuICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICBpZiAoIWNoZWNrZXIpIHtcbiAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIGBJbnZhbGlkIHByb3BzLiR7cHJvcE5hbWV9IGtleSBcXGAke2tleX1cXGAgc3VwcGxpZWQgdG8gXFxgJHtjb21wb25lbnROYW1lfVxcYC5gICtcbiAgICAgICAgICAgIGBcXG5CYWQgb2JqZWN0OiBgICsgSlNPTi5zdHJpbmdpZnkocHJvcHNbcHJvcE5hbWVdLCBudWxsLCAnICAnKSArXG4gICAgICAgICAgICBgXFxuVmFsaWQga2V5czogYCArIEpTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKHNoYXBlVHlwZXMpLCBudWxsLCAnICAnKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdmFyIGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIC4uLnJlc3QpO1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBlcnJvci5tZXNzYWdlICtcbiAgICAgICAgICAgIGBcXG5CYWQgb2JqZWN0OiBgICsgSlNPTi5zdHJpbmdpZnkocHJvcHNbcHJvcE5hbWVdLCBudWxsLCAnICAnKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjaGFpbmVkQ2hlY2tUeXBlKFxuICAgIHByb3BzOiB7W2tleTogc3RyaW5nXTogYW55fSxcbiAgICBwcm9wTmFtZTogc3RyaW5nLFxuICAgIGNvbXBvbmVudE5hbWU6IHN0cmluZyxcbiAgICBsb2NhdGlvbj86IHN0cmluZyxcbiAgICAuLi5yZXN0XG4gICk6ID9FcnJvciB7XG4gICAgcmV0dXJuIGNoZWNrVHlwZShmYWxzZSwgcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgLi4ucmVzdCk7XG4gIH1cbiAgY2hhaW5lZENoZWNrVHlwZS5pc1JlcXVpcmVkID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgdHJ1ZSk7XG4gIHJldHVybiBjaGFpbmVkQ2hlY2tUeXBlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXI7XG4iXX0=