37c0bd1e5af92a27d7bd99437467fcde











'use strict';var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}

var NavigationStateUtils=require('./NavigationStateUtils');

















































var defaultGetReducerForState=function defaultGetReducerForState(initialState){return function(state){return state||initialState;};};

function NavigationStackReducer(_ref){var initialState=_ref.initialState,getReducerForState=_ref.getReducerForState,getPushedReducerForAction=_ref.getPushedReducerForAction;
var getReducerForStateWithDefault=getReducerForState||defaultGetReducerForState;
return function(lastState,action){
if(!lastState){
return initialState;
}
var lastParentState=NavigationStateUtils.getParent(lastState);
if(!lastParentState){
return lastState;
}

var activeSubState=lastParentState.children[lastParentState.index];
var activeSubReducer=getReducerForStateWithDefault(activeSubState);
var nextActiveState=activeSubReducer(activeSubState,action);
if(nextActiveState!==activeSubState){
var nextChildren=[].concat(_toConsumableArray(lastParentState.children));
nextChildren[lastParentState.index]=nextActiveState;
return _extends({},
lastParentState,{
children:nextChildren});

}

var subReducerToPush=getPushedReducerForAction(action,lastParentState);
if(subReducerToPush){
return NavigationStateUtils.push(
lastParentState,
subReducerToPush(null,action));

}

switch(action.type){
case'back':
case'BackAction':
if(lastParentState.index===0||lastParentState.children.length===1){
return lastParentState;
}
return NavigationStateUtils.pop(lastParentState);}


return lastParentState;
};
}

module.exports=NavigationStackReducer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5hdmlnYXRpb25TdGFja1JlZHVjZXIuanMiXSwibmFtZXMiOlsiTmF2aWdhdGlvblN0YXRlVXRpbHMiLCJyZXF1aXJlIiwiZGVmYXVsdEdldFJlZHVjZXJGb3JTdGF0ZSIsImluaXRpYWxTdGF0ZSIsInN0YXRlIiwiTmF2aWdhdGlvblN0YWNrUmVkdWNlciIsImdldFJlZHVjZXJGb3JTdGF0ZSIsImdldFB1c2hlZFJlZHVjZXJGb3JBY3Rpb24iLCJnZXRSZWR1Y2VyRm9yU3RhdGVXaXRoRGVmYXVsdCIsImxhc3RTdGF0ZSIsImFjdGlvbiIsImxhc3RQYXJlbnRTdGF0ZSIsImdldFBhcmVudCIsImFjdGl2ZVN1YlN0YXRlIiwiY2hpbGRyZW4iLCJpbmRleCIsImFjdGl2ZVN1YlJlZHVjZXIiLCJuZXh0QWN0aXZlU3RhdGUiLCJuZXh0Q2hpbGRyZW4iLCJzdWJSZWR1Y2VyVG9QdXNoIiwicHVzaCIsInR5cGUiLCJsZW5ndGgiLCJwb3AiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQVdBLGE7O0FBRUEsR0FBSUEsc0JBQXVCQyxRQUFRLHdCQUFSLENBQTNCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtEQSxHQUFNQywyQkFBNEIsUUFBNUJBLDBCQUE0QixDQUFDQyxZQUFELFFBQWtCLFVBQUNDLEtBQUQsUUFBV0EsUUFBU0QsWUFBcEIsRUFBbEIsRUFBbEM7O0FBRUEsUUFBU0UsdUJBQVQsTUFBc0ksSUFBckdGLGFBQXFHLE1BQXJHQSxZQUFxRyxDQUF2Rkcsa0JBQXVGLE1BQXZGQSxrQkFBdUYsQ0FBbkVDLHlCQUFtRSxNQUFuRUEseUJBQW1FO0FBQ3BJLEdBQU1DLCtCQUFnQ0Ysb0JBQXNCSix5QkFBNUQ7QUFDQSxNQUFPLFVBQVVPLFNBQVYsQ0FBdUNDLE1BQXZDLENBQXFFO0FBQzFFLEdBQUksQ0FBQ0QsU0FBTCxDQUFnQjtBQUNkLE1BQU9OLGFBQVA7QUFDRDtBQUNELEdBQU1RLGlCQUFrQlgscUJBQXFCWSxTQUFyQixDQUErQkgsU0FBL0IsQ0FBeEI7QUFDQSxHQUFJLENBQUNFLGVBQUwsQ0FBc0I7QUFDcEIsTUFBT0YsVUFBUDtBQUNEOztBQUVELEdBQU1JLGdCQUFpQkYsZ0JBQWdCRyxRQUFoQixDQUF5QkgsZ0JBQWdCSSxLQUF6QyxDQUF2QjtBQUNBLEdBQU1DLGtCQUFtQlIsOEJBQThCSyxjQUE5QixDQUF6QjtBQUNBLEdBQU1JLGlCQUFrQkQsaUJBQWlCSCxjQUFqQixDQUFpQ0gsTUFBakMsQ0FBeEI7QUFDQSxHQUFJTyxrQkFBb0JKLGNBQXhCLENBQXdDO0FBQ3RDLEdBQU1LLDJDQUFtQlAsZ0JBQWdCRyxRQUFuQyxFQUFOO0FBQ0FJLGFBQWFQLGdCQUFnQkksS0FBN0IsRUFBc0NFLGVBQXRDO0FBQ0E7QUFDS04sZUFETDtBQUVFRyxTQUFVSSxZQUZaOztBQUlEOztBQUVELEdBQU1DLGtCQUFtQlosMEJBQTBCRyxNQUExQixDQUFrQ0MsZUFBbEMsQ0FBekI7QUFDQSxHQUFJUSxnQkFBSixDQUFzQjtBQUNwQixNQUFPbkIsc0JBQXFCb0IsSUFBckI7QUFDTFQsZUFESztBQUVMUSxpQkFBaUIsSUFBakIsQ0FBdUJULE1BQXZCLENBRkssQ0FBUDs7QUFJRDs7QUFFRCxPQUFRQSxPQUFPVyxJQUFmO0FBQ0UsSUFBSyxNQUFMO0FBQ0EsSUFBSyxZQUFMO0FBQ0UsR0FBSVYsZ0JBQWdCSSxLQUFoQixHQUEwQixDQUExQixFQUErQkosZ0JBQWdCRyxRQUFoQixDQUF5QlEsTUFBekIsR0FBb0MsQ0FBdkUsQ0FBMEU7QUFDeEUsTUFBT1gsZ0JBQVA7QUFDRDtBQUNELE1BQU9YLHNCQUFxQnVCLEdBQXJCLENBQXlCWixlQUF6QixDQUFQLENBTko7OztBQVNBLE1BQU9BLGdCQUFQO0FBQ0QsQ0F2Q0Q7QUF3Q0Q7O0FBRURhLE9BQU9DLE9BQVAsQ0FBaUJwQixzQkFBakIiLCJmaWxlIjoiTmF2aWdhdGlvblN0YWNrUmVkdWNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgTmF2aWdhdGlvblN0YWNrUmVkdWNlclxuICogQGZsb3dcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgTmF2aWdhdGlvblN0YXRlVXRpbHMgPSByZXF1aXJlKCcuL05hdmlnYXRpb25TdGF0ZVV0aWxzJyk7XG5cbmltcG9ydCB0eXBlIHtcbiAgTmF2aWdhdGlvblN0YXRlLFxuICBOYXZpZ2F0aW9uUGFyZW50U3RhdGUsXG4gIE5hdmlnYXRpb25SZWR1Y2VyLFxufSBmcm9tICdOYXZpZ2F0aW9uVHlwZURlZmluaXRpb24nO1xuXG5pbXBvcnQgdHlwZSB7XG4gIEJhY2tBY3Rpb24sXG59IGZyb20gJ05hdmlnYXRpb25Sb290Q29udGFpbmVyJztcblxuZXhwb3J0IHR5cGUgTmF2aWdhdGlvblN0YWNrUmVkdWNlckFjdGlvbiA9IEJhY2tBY3Rpb24gfCB7XG4gIHR5cGU6IHN0cmluZyxcbn07XG5cbmV4cG9ydCB0eXBlIFJlZHVjZXJGb3JTdGF0ZUhhbmRsZXIgPSAoc3RhdGU6IE5hdmlnYXRpb25TdGF0ZSkgPT4gTmF2aWdhdGlvblJlZHVjZXI7XG5cbmV4cG9ydCB0eXBlIFB1c2hlZFJlZHVjZXJGb3JBY3Rpb25IYW5kbGVyID0gKGFjdGlvbjogYW55LCBsYXN0U3RhdGU6IE5hdmlnYXRpb25QYXJlbnRTdGF0ZSkgPT4gP05hdmlnYXRpb25SZWR1Y2VyO1xuXG5leHBvcnQgdHlwZSBTdGFja1JlZHVjZXJDb25maWcgPSB7XG4gIC8qXG4gICAqIFRoZSBpbml0aWFsU3RhdGUgaXMgdGhhdCB0aGUgcmVkdWNlciB3aWxsIHVzZSB3aGVuIHRoZXJlIGlzIG5vIHByZXZpb3VzIHN0YXRlLlxuICAgKiBNdXN0IGJlIGEgTmF2aWdhdGlvblBhcmVudFN0YXRlOlxuICAgKlxuICAgKiB7XG4gICAqICAgY2hpbGRyZW46IFtcbiAgICogICAgIHtrZXk6ICdzdWJTdGF0ZTAnfSxcbiAgICogICAgIHtrZXk6ICdzdWJTdGF0ZTEnfSxcbiAgICogICBdLFxuICAgKiAgIGluZGV4OiAwLFxuICAgKiAgIGtleTogJ25hdlN0YWNrS2V5J1xuICAgKiB9XG4gICAqL1xuICBpbml0aWFsU3RhdGU6IE5hdmlnYXRpb25QYXJlbnRTdGF0ZTtcblxuICAvKlxuICAgKiBSZXR1cm5zIHRoZSBzdWItcmVkdWNlciBmb3IgYSBwYXJ0aWN1bGFyIHN0YXRlIHRvIGhhbmRsZS4gVGhpcyB3aWxsIGJlIGNhbGxlZFxuICAgKiB3aGVuIHdlIG5lZWQgdG8gaGFuZGxlIGFuIGFjdGlvbiBvbiBhIHN1Yi1zdGF0ZS4gSWYgbm8gcmVkdWNlciBpcyByZXR1cm5lZCxcbiAgICogbm8gYWN0aW9uIHdpbGwgYmUgdGFrZW5cbiAgICovXG4gIGdldFJlZHVjZXJGb3JTdGF0ZT86IFJlZHVjZXJGb3JTdGF0ZUhhbmRsZXI7XG5cbiAgLypcbiAgICogUmV0dXJucyBhIHN1Yi1yZWR1Y2VyIHRoYXQgd2lsbCBiZSB1c2VkIHdoZW4gcHVzaGluZyBhIG5ldyByb3V0ZS4gSWYgYSByZWR1Y2VyXG4gICAqIGlzIHJldHVybmVkLCBpdCBiZSBjYWxsZWQgdG8gZ2V0IHRoZSBuZXcgc3RhdGUgdGhhdCB3aWxsIGJlIHB1c2hlZFxuICAgKi9cbiAgZ2V0UHVzaGVkUmVkdWNlckZvckFjdGlvbjogUHVzaGVkUmVkdWNlckZvckFjdGlvbkhhbmRsZXI7XG59O1xuXG5jb25zdCBkZWZhdWx0R2V0UmVkdWNlckZvclN0YXRlID0gKGluaXRpYWxTdGF0ZSkgPT4gKHN0YXRlKSA9PiBzdGF0ZSB8fCBpbml0aWFsU3RhdGU7XG5cbmZ1bmN0aW9uIE5hdmlnYXRpb25TdGFja1JlZHVjZXIoe2luaXRpYWxTdGF0ZSwgZ2V0UmVkdWNlckZvclN0YXRlLCBnZXRQdXNoZWRSZWR1Y2VyRm9yQWN0aW9ufTogU3RhY2tSZWR1Y2VyQ29uZmlnKTogTmF2aWdhdGlvblJlZHVjZXIge1xuICBjb25zdCBnZXRSZWR1Y2VyRm9yU3RhdGVXaXRoRGVmYXVsdCA9IGdldFJlZHVjZXJGb3JTdGF0ZSB8fCBkZWZhdWx0R2V0UmVkdWNlckZvclN0YXRlO1xuICByZXR1cm4gZnVuY3Rpb24gKGxhc3RTdGF0ZTogP05hdmlnYXRpb25TdGF0ZSwgYWN0aW9uOiBhbnkpOiBOYXZpZ2F0aW9uU3RhdGUge1xuICAgIGlmICghbGFzdFN0YXRlKSB7XG4gICAgICByZXR1cm4gaW5pdGlhbFN0YXRlO1xuICAgIH1cbiAgICBjb25zdCBsYXN0UGFyZW50U3RhdGUgPSBOYXZpZ2F0aW9uU3RhdGVVdGlscy5nZXRQYXJlbnQobGFzdFN0YXRlKTtcbiAgICBpZiAoIWxhc3RQYXJlbnRTdGF0ZSkge1xuICAgICAgcmV0dXJuIGxhc3RTdGF0ZTtcbiAgICB9XG5cbiAgICBjb25zdCBhY3RpdmVTdWJTdGF0ZSA9IGxhc3RQYXJlbnRTdGF0ZS5jaGlsZHJlbltsYXN0UGFyZW50U3RhdGUuaW5kZXhdO1xuICAgIGNvbnN0IGFjdGl2ZVN1YlJlZHVjZXIgPSBnZXRSZWR1Y2VyRm9yU3RhdGVXaXRoRGVmYXVsdChhY3RpdmVTdWJTdGF0ZSk7XG4gICAgY29uc3QgbmV4dEFjdGl2ZVN0YXRlID0gYWN0aXZlU3ViUmVkdWNlcihhY3RpdmVTdWJTdGF0ZSwgYWN0aW9uKTtcbiAgICBpZiAobmV4dEFjdGl2ZVN0YXRlICE9PSBhY3RpdmVTdWJTdGF0ZSkge1xuICAgICAgY29uc3QgbmV4dENoaWxkcmVuID0gWy4uLmxhc3RQYXJlbnRTdGF0ZS5jaGlsZHJlbl07XG4gICAgICBuZXh0Q2hpbGRyZW5bbGFzdFBhcmVudFN0YXRlLmluZGV4XSA9IG5leHRBY3RpdmVTdGF0ZTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmxhc3RQYXJlbnRTdGF0ZSxcbiAgICAgICAgY2hpbGRyZW46IG5leHRDaGlsZHJlbixcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3Qgc3ViUmVkdWNlclRvUHVzaCA9IGdldFB1c2hlZFJlZHVjZXJGb3JBY3Rpb24oYWN0aW9uLCBsYXN0UGFyZW50U3RhdGUpO1xuICAgIGlmIChzdWJSZWR1Y2VyVG9QdXNoKSB7XG4gICAgICByZXR1cm4gTmF2aWdhdGlvblN0YXRlVXRpbHMucHVzaChcbiAgICAgICAgbGFzdFBhcmVudFN0YXRlLFxuICAgICAgICBzdWJSZWR1Y2VyVG9QdXNoKG51bGwsIGFjdGlvbilcbiAgICAgICk7XG4gICAgfVxuXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgY2FzZSAnYmFjayc6XG4gICAgICBjYXNlICdCYWNrQWN0aW9uJzpcbiAgICAgICAgaWYgKGxhc3RQYXJlbnRTdGF0ZS5pbmRleCA9PT0gMCB8fCBsYXN0UGFyZW50U3RhdGUuY2hpbGRyZW4ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgcmV0dXJuIGxhc3RQYXJlbnRTdGF0ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTmF2aWdhdGlvblN0YXRlVXRpbHMucG9wKGxhc3RQYXJlbnRTdGF0ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxhc3RQYXJlbnRTdGF0ZTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBOYXZpZ2F0aW9uU3RhY2tSZWR1Y2VyO1xuIl19