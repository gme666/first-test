6ca10c530026cdef3972125f67445f43











'use strict';var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[typeof Symbol==='function'?Symbol.iterator:'@@iterator'](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if((typeof Symbol==='function'?Symbol.iterator:'@@iterator')in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var



































FormData=function(){


function FormData(){_classCallCheck(this,FormData);
this._parts=[];
}_createClass(FormData,[{key:'append',value:function append(

key,value){





this._parts.push([key,value]);
}},{key:'getParts',value:function getParts()

{
return this._parts.map(function(_ref){var _ref2=_slicedToArray(_ref,2),name=_ref2[0],value=_ref2[1];
var contentDisposition='form-data; name="'+name+'"';

var headers={'content-disposition':contentDisposition};





if(typeof value==='object'&&value){
if(typeof value.name==='string'){
headers['content-disposition']+='; filename="'+value.name+'"';
}
if(typeof value.type==='string'){
headers['content-type']=value.type;
}
return _extends({},value,{headers:headers,fieldName:name});
}

return{string:String(value),headers:headers,fieldName:name};
});
}}]);return FormData;}();


module.exports=FormData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZvcm1EYXRhLmpzIl0sIm5hbWVzIjpbIkZvcm1EYXRhIiwiX3BhcnRzIiwia2V5IiwidmFsdWUiLCJwdXNoIiwibWFwIiwibmFtZSIsImNvbnRlbnREaXNwb3NpdGlvbiIsImhlYWRlcnMiLCJ0eXBlIiwiZmllbGROYW1lIiwic3RyaW5nIiwiU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFXQSxhOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQ01BLFE7OztBQUdKLG1CQUFjO0FBQ1osS0FBS0MsTUFBTCxDQUFjLEVBQWQ7QUFDRCxDOztBQUVNQyxHLENBQWFDLEssQ0FBc0I7Ozs7OztBQU14QyxLQUFLRixNQUFMLENBQVlHLElBQVosQ0FBaUIsQ0FBQ0YsR0FBRCxDQUFNQyxLQUFOLENBQWpCO0FBQ0QsQzs7QUFFK0I7QUFDOUIsTUFBTyxNQUFLRixNQUFMLENBQVlJLEdBQVosQ0FBZ0IsY0FBbUIsa0NBQWpCQyxJQUFpQixVQUFYSCxLQUFXO0FBQ3hDLEdBQUlJLG9CQUFxQixvQkFBc0JELElBQXRCLENBQTZCLEdBQXREOztBQUVBLEdBQUlFLFNBQW1CLENBQUMsc0JBQXVCRCxrQkFBeEIsQ0FBdkI7Ozs7OztBQU1BLEdBQUksTUFBT0osTUFBUCxHQUFpQixRQUFqQixFQUE2QkEsS0FBakMsQ0FBd0M7QUFDdEMsR0FBSSxNQUFPQSxPQUFNRyxJQUFiLEdBQXNCLFFBQTFCLENBQW9DO0FBQ2xDRSxRQUFRLHFCQUFSLEdBQWtDLGVBQWlCTCxNQUFNRyxJQUF2QixDQUE4QixHQUFoRTtBQUNEO0FBQ0QsR0FBSSxNQUFPSCxPQUFNTSxJQUFiLEdBQXNCLFFBQTFCLENBQW9DO0FBQ2xDRCxRQUFRLGNBQVIsRUFBMEJMLE1BQU1NLElBQWhDO0FBQ0Q7QUFDRCxtQkFBV04sS0FBWCxFQUFrQkssZUFBbEIsQ0FBMkJFLFVBQVdKLElBQXRDO0FBQ0Q7O0FBRUQsTUFBTyxDQUFDSyxPQUFRQyxPQUFPVCxLQUFQLENBQVQsQ0FBd0JLLGVBQXhCLENBQWlDRSxVQUFXSixJQUE1QyxDQUFQO0FBQ0QsQ0FwQk0sQ0FBUDtBQXFCRCxDOzs7QUFHSE8sT0FBT0MsT0FBUCxDQUFpQmQsUUFBakIiLCJmaWxlIjoiRm9ybURhdGEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEZvcm1EYXRhXG4gKiBAZmxvd1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnR5cGUgRm9ybURhdGFWYWx1ZSA9IGFueTtcbnR5cGUgRm9ybURhdGFOYW1lVmFsdWVQYWlyID0gW3N0cmluZywgRm9ybURhdGFWYWx1ZV07XG5cbnR5cGUgSGVhZGVycyA9IHtbbmFtZTogc3RyaW5nXTogc3RyaW5nfTtcbnR5cGUgRm9ybURhdGFQYXJ0ID0ge1xuICBzdHJpbmc6IHN0cmluZyxcbiAgaGVhZGVyczogSGVhZGVycyxcbn0gfCB7XG4gIHVyaTogc3RyaW5nLFxuICBoZWFkZXJzOiBIZWFkZXJzLFxuICBuYW1lPzogc3RyaW5nLFxuICB0eXBlPzogc3RyaW5nLFxufTtcblxuLyoqXG4gKiBQb2x5ZmlsbCBmb3IgWE1MSHR0cFJlcXVlc3QyIEZvcm1EYXRhIEFQSSwgYWxsb3dpbmcgbXVsdGlwYXJ0IFBPU1QgcmVxdWVzdHNcbiAqIHdpdGggbWl4ZWQgZGF0YSAoc3RyaW5nLCBuYXRpdmUgZmlsZXMpIHRvIGJlIHN1Ym1pdHRlZCB2aWEgWE1MSHR0cFJlcXVlc3QuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgIHZhciBwaG90byA9IHtcbiAqICAgICB1cmk6IHVyaUZyb21DYW1lcmFSb2xsLFxuICogICAgIHR5cGU6ICdpbWFnZS9qcGVnJyxcbiAqICAgICBuYW1lOiAncGhvdG8uanBnJyxcbiAqICAgfTtcbiAqXG4gKiAgIHZhciBib2R5ID0gbmV3IEZvcm1EYXRhKCk7XG4gKiAgIGJvZHkuYXBwZW5kKCdhdXRoVG9rZW4nLCAnc2VjcmV0Jyk7XG4gKiAgIGJvZHkuYXBwZW5kKCdwaG90bycsIHBob3RvKTtcbiAqICAgYm9keS5hcHBlbmQoJ3RpdGxlJywgJ0EgYmVhdXRpZnVsIHBob3RvIScpO1xuICpcbiAqICAgeGhyLm9wZW4oJ1BPU1QnLCBzZXJ2ZXJVUkwpO1xuICogICB4aHIuc2VuZChib2R5KTtcbiAqL1xuY2xhc3MgRm9ybURhdGEge1xuICBfcGFydHM6IEFycmF5PEZvcm1EYXRhTmFtZVZhbHVlUGFpcj47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fcGFydHMgPSBbXTtcbiAgfVxuXG4gIGFwcGVuZChrZXk6IHN0cmluZywgdmFsdWU6IEZvcm1EYXRhVmFsdWUpIHtcbiAgICAvLyBUaGUgWE1MSHR0cFJlcXVlc3Qgc3BlYyBkb2Vzbid0IHNwZWNpZnkgaWYgZHVwbGljYXRlIGtleXMgYXJlIGFsbG93ZWQuXG4gICAgLy8gTUROIHNheXMgdGhhdCBhbnkgbmV3IHZhbHVlcyBzaG91bGQgYmUgYXBwZW5kZWQgdG8gZXhpc3RpbmcgdmFsdWVzLlxuICAgIC8vIEluIGFueSBjYXNlLCBtYWpvciBicm93c2VycyBhbGxvdyBkdXBsaWNhdGUga2V5cywgc28gdGhhdCdzIHdoYXQgd2UnbGwgZG9cbiAgICAvLyB0b28uIFRoZXknbGwgc2ltcGx5IGdldCBhcHBlbmRlZCBhcyBhZGRpdGlvbmFsIGZvcm0gZGF0YSBwYXJ0cyBpbiB0aGVcbiAgICAvLyByZXF1ZXN0IGJvZHksIGxlYXZpbmcgdGhlIHNlcnZlciB0byBkZWFsIHdpdGggdGhlbS5cbiAgICB0aGlzLl9wYXJ0cy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH1cblxuICBnZXRQYXJ0cygpOiBBcnJheTxGb3JtRGF0YVBhcnQ+IHtcbiAgICByZXR1cm4gdGhpcy5fcGFydHMubWFwKChbbmFtZSwgdmFsdWVdKSA9PiB7XG4gICAgICB2YXIgY29udGVudERpc3Bvc2l0aW9uID0gJ2Zvcm0tZGF0YTsgbmFtZT1cIicgKyBuYW1lICsgJ1wiJztcblxuICAgICAgdmFyIGhlYWRlcnM6IEhlYWRlcnMgPSB7J2NvbnRlbnQtZGlzcG9zaXRpb24nOiBjb250ZW50RGlzcG9zaXRpb259O1xuXG4gICAgICAvLyBUaGUgYm9keSBwYXJ0IGlzIGEgXCJibG9iXCIsIHdoaWNoIGluIFJlYWN0IE5hdGl2ZSBqdXN0IG1lYW5zXG4gICAgICAvLyBhbiBvYmplY3Qgd2l0aCBhIGB1cmlgIGF0dHJpYnV0ZS4gT3B0aW9uYWxseSwgaXQgY2FuIGFsc29cbiAgICAgIC8vIGhhdmUgYSBgbmFtZWAgYW5kIGB0eXBlYCBhdHRyaWJ1dGUgdG8gc3BlY2lmeSBmaWxlbmFtZSBhbmRcbiAgICAgIC8vIGNvbnRlbnQgdHlwZSAoY2YuIHdlYiBCbG9iIGludGVyZmFjZS4pXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlLm5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaGVhZGVyc1snY29udGVudC1kaXNwb3NpdGlvbiddICs9ICc7IGZpbGVuYW1lPVwiJyArIHZhbHVlLm5hbWUgKyAnXCInO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBoZWFkZXJzWydjb250ZW50LXR5cGUnXSA9IHZhbHVlLnR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsuLi52YWx1ZSwgaGVhZGVycywgZmllbGROYW1lOiBuYW1lfTtcbiAgICAgIH1cbiAgICAgIC8vIENvbnZlcnQgbm9uLW9iamVjdCB2YWx1ZXMgdG8gc3RyaW5ncyBhcyBwZXIgRm9ybURhdGEuYXBwZW5kKCkgc3BlY1xuICAgICAgcmV0dXJuIHtzdHJpbmc6IFN0cmluZyh2YWx1ZSksIGhlYWRlcnMsIGZpZWxkTmFtZTogbmFtZX07XG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGb3JtRGF0YTtcbiJdfQ==