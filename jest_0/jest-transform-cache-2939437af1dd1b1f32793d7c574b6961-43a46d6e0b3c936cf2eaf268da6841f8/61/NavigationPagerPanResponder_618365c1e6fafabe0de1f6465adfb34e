8abe8bded67227fd9469f7b0deca3e48












'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}

var Animated=require('react-native').Animated;
var NavigationAbstractPanResponder=require('./NavigationAbstractPanResponder');
var NavigationCardStackPanResponder=require('./NavigationCardStackPanResponder');

var clamp=require('clamp');var
















ANIMATION_DURATION=




NavigationCardStackPanResponder.ANIMATION_DURATION,DISTANCE_THRESHOLD=NavigationCardStackPanResponder.DISTANCE_THRESHOLD,POSITION_THRESHOLD=NavigationCardStackPanResponder.POSITION_THRESHOLD,RESPOND_THRESHOLD=NavigationCardStackPanResponder.RESPOND_THRESHOLD,Directions=NavigationCardStackPanResponder.Directions;




var Actions={
JUMP_BACK:{type:'jump_back'},
JUMP_FORWARD:{type:'jump_forward'}};var
















NavigationPagerPanResponder=function(_NavigationAbstractPa){_inherits(NavigationPagerPanResponder,_NavigationAbstractPa);






function NavigationPagerPanResponder(
direction,
props)
{_classCallCheck(this,NavigationPagerPanResponder);var _this=_possibleConstructorReturn(this,(NavigationPagerPanResponder.__proto__||Object.getPrototypeOf(NavigationPagerPanResponder)).call(this));

_this._isResponding=false;
_this._isVertical=direction===Directions.VERTICAL;
_this._props=props;
_this._startValue=0;return _this;
}_createClass(NavigationPagerPanResponder,[{key:'onMoveShouldSetPanResponder',value:function onMoveShouldSetPanResponder(

event,gesture){
var props=this._props;

if(props.navigationState.index!==props.scene.index){
return false;
}

var layout=props.layout;
var isVertical=this._isVertical;
var axis=isVertical?'dy':'dx';
var index=props.navigationState.index;
var distance=isVertical?
layout.height.__getValue():
layout.width.__getValue();

return(
Math.abs(gesture[axis])>RESPOND_THRESHOLD&&
distance>0&&
index>0);

}},{key:'onPanResponderGrant',value:function onPanResponderGrant()

{var _this2=this;
this._isResponding=false;
this._props.position.stopAnimation(function(value){
_this2._isResponding=true;
_this2._startValue=value;
});
}},{key:'onPanResponderMove',value:function onPanResponderMove(

event,gesture){
if(!this._isResponding){
return;
}var _props=






this._props,layout=_props.layout,navigationState=_props.navigationState,position=_props.position,scenes=_props.scenes;

var isVertical=this._isVertical;
var axis=isVertical?'dy':'dx';
var index=navigationState.index;
var distance=isVertical?
layout.height.__getValue():
layout.width.__getValue();

var prevIndex=Math.max(
0,
index-1);


var nextIndex=Math.min(
index+1,
scenes.length-1);


var value=clamp(
prevIndex,
this._startValue-gesture[axis]/distance,
nextIndex);


position.setValue(value);
}},{key:'onPanResponderRelease',value:function onPanResponderRelease(

event,gesture){var _this3=this;
if(!this._isResponding){
return;
}

this._isResponding=false;var _props2=





this._props,navigationState=_props2.navigationState,onNavigate=_props2.onNavigate,position=_props2.position;

var isVertical=this._isVertical;
var axis=isVertical?'dy':'dx';
var index=navigationState.index;
var distance=gesture[axis];

position.stopAnimation(function(value){
_this3._reset();
if(
distance>DISTANCE_THRESHOLD||
value<=index-POSITION_THRESHOLD)
{
onNavigate(Actions.JUMP_BACK);
return;
}

if(
distance<-DISTANCE_THRESHOLD||
value>=index+POSITION_THRESHOLD)
{
onNavigate(Actions.JUMP_FORWARD);
}
});
}},{key:'onPanResponderTerminate',value:function onPanResponderTerminate()

{
this._isResponding=false;
this._reset();
}},{key:'_reset',value:function _reset()

{
var props=this._props;
Animated.timing(
props.position,
{
toValue:props.navigationState.index,
duration:ANIMATION_DURATION}).

start();
}}]);return NavigationPagerPanResponder;}(NavigationAbstractPanResponder);


function createPanHandlers(
direction,
props)
{
var responder=new NavigationPagerPanResponder(direction,props);
return responder.panHandlers;
}

function forHorizontal(
props)
{
return createPanHandlers(Directions.HORIZONTAL,props);
}

module.exports={
Actions:Actions,
forHorizontal:forHorizontal};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5hdmlnYXRpb25QYWdlclBhblJlc3BvbmRlci5qcyJdLCJuYW1lcyI6WyJBbmltYXRlZCIsInJlcXVpcmUiLCJOYXZpZ2F0aW9uQWJzdHJhY3RQYW5SZXNwb25kZXIiLCJOYXZpZ2F0aW9uQ2FyZFN0YWNrUGFuUmVzcG9uZGVyIiwiY2xhbXAiLCJBTklNQVRJT05fRFVSQVRJT04iLCJESVNUQU5DRV9USFJFU0hPTEQiLCJQT1NJVElPTl9USFJFU0hPTEQiLCJSRVNQT05EX1RIUkVTSE9MRCIsIkRpcmVjdGlvbnMiLCJBY3Rpb25zIiwiSlVNUF9CQUNLIiwidHlwZSIsIkpVTVBfRk9SV0FSRCIsIk5hdmlnYXRpb25QYWdlclBhblJlc3BvbmRlciIsImRpcmVjdGlvbiIsInByb3BzIiwiX2lzUmVzcG9uZGluZyIsIl9pc1ZlcnRpY2FsIiwiVkVSVElDQUwiLCJfcHJvcHMiLCJfc3RhcnRWYWx1ZSIsImV2ZW50IiwiZ2VzdHVyZSIsIm5hdmlnYXRpb25TdGF0ZSIsImluZGV4Iiwic2NlbmUiLCJsYXlvdXQiLCJpc1ZlcnRpY2FsIiwiYXhpcyIsImRpc3RhbmNlIiwiaGVpZ2h0IiwiX19nZXRWYWx1ZSIsIndpZHRoIiwiTWF0aCIsImFicyIsInBvc2l0aW9uIiwic3RvcEFuaW1hdGlvbiIsInZhbHVlIiwic2NlbmVzIiwicHJldkluZGV4IiwibWF4IiwibmV4dEluZGV4IiwibWluIiwibGVuZ3RoIiwic2V0VmFsdWUiLCJvbk5hdmlnYXRlIiwiX3Jlc2V0IiwidGltaW5nIiwidG9WYWx1ZSIsImR1cmF0aW9uIiwic3RhcnQiLCJjcmVhdGVQYW5IYW5kbGVycyIsInJlc3BvbmRlciIsInBhbkhhbmRsZXJzIiwiZm9ySG9yaXpvbnRhbCIsIkhPUklaT05UQUwiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFZQSxhOztBQUVBLEdBQU1BLFVBQVdDLFFBQVEsY0FBUixFQUF3QkQsUUFBekM7QUFDQSxHQUFNRSxnQ0FBaUNELFFB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LGtCQUFUO0FBQ0VyQyxTQURGO0FBRUVDLEtBRkY7QUFHNEI7QUFDMUIsR0FBTXFDLFdBQVksR0FBSXZDLDRCQUFKLENBQWdDQyxTQUFoQyxDQUEyQ0MsS0FBM0MsQ0FBbEI7QUFDQSxNQUFPcUMsV0FBVUMsV0FBakI7QUFDRDs7QUFFRCxRQUFTQyxjQUFUO0FBQ0V2QyxLQURGO0FBRTRCO0FBQzFCLE1BQU9vQyxtQkFBa0IzQyxXQUFXK0MsVUFBN0IsQ0FBeUN4QyxLQUF6QyxDQUFQO0FBQ0Q7O0FBRUR5QyxPQUFPQyxPQUFQLENBQWlCO0FBQ2ZoRCxlQURlO0FBRWY2QywyQkFGZSxDQUFqQiIsImZpbGUiOiJOYXZpZ2F0aW9uUGFnZXJQYW5SZXNwb25kZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIE5hdmlnYXRpb25QYWdlclBhblJlc3BvbmRlclxuICogQGZsb3dcbiAqIEB0eXBlY2hlY2tzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgQW5pbWF0ZWQgPSByZXF1aXJlKCdyZWFjdC1uYXRpdmUnKS5BbmltYXRlZDtcbmNvbnN0IE5hdmlnYXRpb25BYnN0cmFjdFBhblJlc3BvbmRlciA9IHJlcXVpcmUoJy4vTmF2aWdhdGlvbkFic3RyYWN0UGFuUmVzcG9uZGVyJyk7XG5jb25zdCBOYXZpZ2F0aW9uQ2FyZFN0YWNrUGFuUmVzcG9uZGVyID0gcmVxdWlyZSgnLi9OYXZpZ2F0aW9uQ2FyZFN0YWNrUGFuUmVzcG9uZGVyJyk7XG5cbmNvbnN0IGNsYW1wID0gcmVxdWlyZSgnY2xhbXAnKTtcblxuaW1wb3J0IHR5cGUge1xuICBOYXZpZ2F0aW9uUGFuUGFuSGFuZGxlcnMsXG4gIE5hdmlnYXRpb25TY2VuZVJlbmRlcmVyUHJvcHMsXG59IGZyb20gJ05hdmlnYXRpb25UeXBlRGVmaW5pdGlvbic7XG5cbmltcG9ydCB0eXBlIHtcbiAgTmF2aWdhdGlvbkdlc3R1cmVEaXJlY3Rpb24sXG59IGZyb20gJ05hdmlnYXRpb25DYXJkU3RhY2tQYW5SZXNwb25kZXInO1xuXG5cblxuLyoqXG4gKiBQcmltaXRpdmUgZ2VzdHVyZSBkaXJlY3Rpb25zLlxuICovXG5jb25zdCB7XG4gIEFOSU1BVElPTl9EVVJBVElPTixcbiAgRElTVEFOQ0VfVEhSRVNIT0xELFxuICBQT1NJVElPTl9USFJFU0hPTEQsXG4gIFJFU1BPTkRfVEhSRVNIT0xELFxuICBEaXJlY3Rpb25zLFxufSA9IE5hdmlnYXRpb25DYXJkU3RhY2tQYW5SZXNwb25kZXI7XG5cbi8qKlxuICogUHJpbWl0aXZlIGdlc3R1cmUgYWN0aW9ucy5cbiAqL1xuY29uc3QgQWN0aW9ucyA9IHtcbiAgSlVNUF9CQUNLOiB7dHlwZTogJ2p1bXBfYmFjayd9LFxuICBKVU1QX0ZPUldBUkQ6IHt0eXBlOiAnanVtcF9mb3J3YXJkJ30sXG59O1xuXG4vKipcbiAqIFBhbiByZXNwb25kZXIgdGhhdCBoYW5kbGVzIGdlc3R1cmUgZm9yIGEgY2FyZCBpbiB0aGUgY2FyZHMgbGlzdC5cbiAqXG4gKiArLS0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tKy0tLS0tLS0tLS0tLS0rXG4gKiB8ICAgICAgICAgICAgIHwgICAgICAgICAgICAgfCAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgIHwgICAgICAgICAgICAgfCAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgIHwgICAgICAgICAgICAgfCAgICAgICAgICAgICB8XG4gKiB8ICAgIE5leHQgICAgIHwgICBGb2N1c2VkICAgfCAgUHJldmlvdXMgICB8XG4gKiB8ICAgIENhcmQgICAgIHwgICAgQ2FyZCAgICAgfCAgICBDYXJkICAgICB8XG4gKiB8ICAgICAgICAgICAgIHwgICAgICAgICAgICAgfCAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgIHwgICAgICAgICAgICAgfCAgICAgICAgICAgICB8XG4gKiB8ICAgICAgICAgICAgIHwgICAgICAgICAgICAgfCAgICAgICAgICAgICB8XG4gKiArLS0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tKy0tLS0tLS0tLS0tLS0rXG4gKi9cbmNsYXNzIE5hdmlnYXRpb25QYWdlclBhblJlc3BvbmRlciBleHRlbmRzIE5hdmlnYXRpb25BYnN0cmFjdFBhblJlc3BvbmRlciB7XG5cbiAgX2lzUmVzcG9uZGluZzogYm9vbGVhbjtcbiAgX2lzVmVydGljYWw6IGJvb2xlYW47XG4gIF9wcm9wczogTmF2aWdhdGlvblNjZW5lUmVuZGVyZXJQcm9wcztcbiAgX3N0YXJ0VmFsdWU6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBkaXJlY3Rpb246IE5hdmlnYXRpb25HZXN0dXJlRGlyZWN0aW9uLFxuICAgIHByb3BzOiBOYXZpZ2F0aW9uU2NlbmVSZW5kZXJlclByb3BzLFxuICApIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2lzUmVzcG9uZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX2lzVmVydGljYWwgPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbnMuVkVSVElDQUw7XG4gICAgdGhpcy5fcHJvcHMgPSBwcm9wcztcbiAgICB0aGlzLl9zdGFydFZhbHVlID0gMDtcbiAgfVxuXG4gIG9uTW92ZVNob3VsZFNldFBhblJlc3BvbmRlcihldmVudDogYW55LCBnZXN0dXJlOiBhbnkpOiBib29sZWFuIHtcbiAgICBjb25zdCBwcm9wcyA9IHRoaXMuX3Byb3BzO1xuXG4gICAgaWYgKHByb3BzLm5hdmlnYXRpb25TdGF0ZS5pbmRleCAhPT0gcHJvcHMuc2NlbmUuaW5kZXgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBsYXlvdXQgPSBwcm9wcy5sYXlvdXQ7XG4gICAgY29uc3QgaXNWZXJ0aWNhbCA9IHRoaXMuX2lzVmVydGljYWw7XG4gICAgY29uc3QgYXhpcyA9IGlzVmVydGljYWwgPyAnZHknIDogJ2R4JztcbiAgICBjb25zdCBpbmRleCA9IHByb3BzLm5hdmlnYXRpb25TdGF0ZS5pbmRleDtcbiAgICBjb25zdCBkaXN0YW5jZSA9IGlzVmVydGljYWwgP1xuICAgICAgbGF5b3V0LmhlaWdodC5fX2dldFZhbHVlKCkgOlxuICAgICAgbGF5b3V0LndpZHRoLl9fZ2V0VmFsdWUoKTtcblxuICAgIHJldHVybiAoXG4gICAgICBNYXRoLmFicyhnZXN0dXJlW2F4aXNdKSA+IFJFU1BPTkRfVEhSRVNIT0xEICYmXG4gICAgICBkaXN0YW5jZSA+IDAgJiZcbiAgICAgIGluZGV4ID4gMFxuICAgICk7XG4gIH1cblxuICBvblBhblJlc3BvbmRlckdyYW50KCk6IHZvaWQge1xuICAgIHRoaXMuX2lzUmVzcG9uZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3Byb3BzLnBvc2l0aW9uLnN0b3BBbmltYXRpb24oKHZhbHVlOiBudW1iZXIpID0+IHtcbiAgICAgIHRoaXMuX2lzUmVzcG9uZGluZyA9IHRydWU7XG4gICAgICB0aGlzLl9zdGFydFZhbHVlID0gdmFsdWU7XG4gICAgfSk7XG4gIH1cblxuICBvblBhblJlc3BvbmRlck1vdmUoZXZlbnQ6IGFueSwgZ2VzdHVyZTogYW55KTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9pc1Jlc3BvbmRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7XG4gICAgICBsYXlvdXQsXG4gICAgICBuYXZpZ2F0aW9uU3RhdGUsXG4gICAgICBwb3NpdGlvbixcbiAgICAgIHNjZW5lcyxcbiAgICB9ID0gdGhpcy5fcHJvcHM7XG5cbiAgICBjb25zdCBpc1ZlcnRpY2FsID0gdGhpcy5faXNWZXJ0aWNhbDtcbiAgICBjb25zdCBheGlzID0gaXNWZXJ0aWNhbCA/ICdkeScgOiAnZHgnO1xuICAgIGNvbnN0IGluZGV4ID0gbmF2aWdhdGlvblN0YXRlLmluZGV4O1xuICAgIGNvbnN0IGRpc3RhbmNlID0gaXNWZXJ0aWNhbCA/XG4gICAgICBsYXlvdXQuaGVpZ2h0Ll9fZ2V0VmFsdWUoKSA6XG4gICAgICBsYXlvdXQud2lkdGguX19nZXRWYWx1ZSgpO1xuXG4gICAgY29uc3QgcHJldkluZGV4ID0gTWF0aC5tYXgoXG4gICAgICAwLFxuICAgICAgaW5kZXggLSAxLFxuICAgICk7XG5cbiAgICBjb25zdCBuZXh0SW5kZXggPSBNYXRoLm1pbihcbiAgICAgIGluZGV4ICsgMSxcbiAgICAgIHNjZW5lcy5sZW5ndGggLSAxLFxuICAgICk7XG5cbiAgICBjb25zdCB2YWx1ZSA9IGNsYW1wKFxuICAgICAgcHJldkluZGV4LFxuICAgICAgdGhpcy5fc3RhcnRWYWx1ZSAtIChnZXN0dXJlW2F4aXNdIC8gZGlzdGFuY2UpLFxuICAgICAgbmV4dEluZGV4LFxuICAgICk7XG5cbiAgICBwb3NpdGlvbi5zZXRWYWx1ZSh2YWx1ZSk7XG4gIH1cblxuICBvblBhblJlc3BvbmRlclJlbGVhc2UoZXZlbnQ6IGFueSwgZ2VzdHVyZTogYW55KTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9pc1Jlc3BvbmRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9pc1Jlc3BvbmRpbmcgPSBmYWxzZTtcblxuICAgIGNvbnN0IHtcbiAgICAgIG5hdmlnYXRpb25TdGF0ZSxcbiAgICAgIG9uTmF2aWdhdGUsXG4gICAgICBwb3NpdGlvbixcbiAgICB9ID0gdGhpcy5fcHJvcHM7XG5cbiAgICBjb25zdCBpc1ZlcnRpY2FsID0gdGhpcy5faXNWZXJ0aWNhbDtcbiAgICBjb25zdCBheGlzID0gaXNWZXJ0aWNhbCA/ICdkeScgOiAnZHgnO1xuICAgIGNvbnN0IGluZGV4ID0gbmF2aWdhdGlvblN0YXRlLmluZGV4O1xuICAgIGNvbnN0IGRpc3RhbmNlID0gZ2VzdHVyZVtheGlzXTtcblxuICAgIHBvc2l0aW9uLnN0b3BBbmltYXRpb24oKHZhbHVlOiBudW1iZXIpID0+IHtcbiAgICAgIHRoaXMuX3Jlc2V0KCk7XG4gICAgICBpZiAoXG4gICAgICAgIGRpc3RhbmNlID4gRElTVEFOQ0VfVEhSRVNIT0xEICB8fFxuICAgICAgICB2YWx1ZSA8PSBpbmRleCAtIFBPU0lUSU9OX1RIUkVTSE9MRFxuICAgICAgKSB7XG4gICAgICAgIG9uTmF2aWdhdGUoQWN0aW9ucy5KVU1QX0JBQ0spO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgZGlzdGFuY2UgPCAtRElTVEFOQ0VfVEhSRVNIT0xEIHx8XG4gICAgICAgIHZhbHVlID49IGluZGV4ICArIFBPU0lUSU9OX1RIUkVTSE9MRFxuICAgICAgKSB7XG4gICAgICAgIG9uTmF2aWdhdGUoQWN0aW9ucy5KVU1QX0ZPUldBUkQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgb25QYW5SZXNwb25kZXJUZXJtaW5hdGUoKTogdm9pZCB7XG4gICAgdGhpcy5faXNSZXNwb25kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fcmVzZXQoKTtcbiAgfVxuXG4gIF9yZXNldCgpOiB2b2lkIHtcbiAgICBjb25zdCBwcm9wcyA9IHRoaXMuX3Byb3BzO1xuICAgIEFuaW1hdGVkLnRpbWluZyhcbiAgICAgIHByb3BzLnBvc2l0aW9uLFxuICAgICAge1xuICAgICAgICB0b1ZhbHVlOiBwcm9wcy5uYXZpZ2F0aW9uU3RhdGUuaW5kZXgsXG4gICAgICAgIGR1cmF0aW9uOiBBTklNQVRJT05fRFVSQVRJT04sXG4gICAgICB9XG4gICAgKS5zdGFydCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhbkhhbmRsZXJzKFxuICBkaXJlY3Rpb246IE5hdmlnYXRpb25HZXN0dXJlRGlyZWN0aW9uLFxuICBwcm9wczogTmF2aWdhdGlvblNjZW5lUmVuZGVyZXJQcm9wcyxcbik6IE5hdmlnYXRpb25QYW5QYW5IYW5kbGVycyB7XG4gIGNvbnN0IHJlc3BvbmRlciA9IG5ldyBOYXZpZ2F0aW9uUGFnZXJQYW5SZXNwb25kZXIoZGlyZWN0aW9uLCBwcm9wcyk7XG4gIHJldHVybiByZXNwb25kZXIucGFuSGFuZGxlcnM7XG59XG5cbmZ1bmN0aW9uIGZvckhvcml6b250YWwoXG4gIHByb3BzOiBOYXZpZ2F0aW9uU2NlbmVSZW5kZXJlclByb3BzLFxuKTogTmF2aWdhdGlvblBhblBhbkhhbmRsZXJzIHtcbiAgcmV0dXJuIGNyZWF0ZVBhbkhhbmRsZXJzKERpcmVjdGlvbnMuSE9SSVpPTlRBTCwgcHJvcHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQWN0aW9ucyxcbiAgZm9ySG9yaXpvbnRhbCxcbn07XG4iXX0=