3916c001075c2cd7cb396fbaecdcbb37











'use strict';var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}

var MissingNativeEventEmitterShim=require('MissingNativeEventEmitterShim');
var NativeEventEmitter=require('NativeEventEmitter');
var RCTNetworkingNative=require('NativeModules').Networking;
var convertRequestBody=require('convertRequestBody');var



RCTNetworking=function(_NativeEventEmitter){_inherits(RCTNetworking,_NativeEventEmitter);



function RCTNetworking(){_classCallCheck(this,RCTNetworking);var _this=_possibleConstructorReturn(this,(RCTNetworking.__proto__||Object.getPrototypeOf(RCTNetworking)).call(this,
RCTNetworkingNative));_this.isAvailable=true;return _this;
}_createClass(RCTNetworking,[{key:'sendRequest',value:function sendRequest(


method,
trackingName,
url,
headers,
data,
responseType,
incrementalUpdates,
timeout,
callback,
withCredentials)
{
var body=convertRequestBody(data);
RCTNetworkingNative.sendRequest({
method:method,
url:url,
data:_extends({},body,{trackingName:trackingName}),
headers:headers,
responseType:responseType,
incrementalUpdates:incrementalUpdates,
timeout:timeout,
withCredentials:withCredentials},
callback);
}},{key:'abortRequest',value:function abortRequest(

requestId){
RCTNetworkingNative.abortRequest(requestId);
}},{key:'clearCookies',value:function clearCookies(

callback){
RCTNetworkingNative.clearCookies(callback);
}}]);return RCTNetworking;}(NativeEventEmitter);


if(__DEV__&&!RCTNetworkingNative){var
MissingNativeRCTNetworkingShim=function(_MissingNativeEventEm){_inherits(MissingNativeRCTNetworkingShim,_MissingNativeEventEm);
function MissingNativeRCTNetworkingShim(){_classCallCheck(this,MissingNativeRCTNetworkingShim);return _possibleConstructorReturn(this,(MissingNativeRCTNetworkingShim.__proto__||Object.getPrototypeOf(MissingNativeRCTNetworkingShim)).call(this,
'RCTNetworking','Networking'));
}_createClass(MissingNativeRCTNetworkingShim,[{key:'sendRequest',value:function sendRequest()

{
this.throwMissingNativeModule();
}},{key:'abortRequest',value:function abortRequest()

{
this.throwMissingNativeModule();
}},{key:'clearCookies',value:function clearCookies()

{
this.throwMissingNativeModule();
}}]);return MissingNativeRCTNetworkingShim;}(MissingNativeEventEmitterShim);





RCTNetworking=new MissingNativeRCTNetworkingShim();
}else{
RCTNetworking=new RCTNetworking();
}

module.exports=RCTNetworking;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJDVE5ldHdvcmtpbmcuaW9zLmpzIl0sIm5hbWVzIjpbIk1pc3NpbmdOYXRpdmVFdmVudEVtaXR0ZXJTaGltIiwicmVxdWlyZSIsIk5hdGl2ZUV2ZW50RW1pdHRlciIsIlJDVE5ldHdvcmtpbmdOYXRpdmUiLCJOZXR3b3JraW5nIiwiY29udmVydFJlcXVlc3RCb2R5IiwiUkNUTmV0d29ya2luZyIsImlzQXZhaWxhYmxlIiwibWV0aG9kIiwidHJhY2tpbmdOYW1lIiwidXJsIiwiaGVhZGVycyIsImRhdGEiLCJyZXNwb25zZVR5cGUiLCJpbmNyZW1lbnRhbFVwZGF0ZXMiLCJ0aW1lb3V0IiwiY2FsbGJhY2siLCJ3aXRoQ3JlZGVudGlhbHMiLCJib2R5Iiwic2VuZFJlcXVlc3QiLCJyZXF1ZXN0SWQiLCJhYm9ydFJlcXVlc3QiLCJjbGVhckNvb2tpZXMiLCJfX0RFVl9fIiwiTWlzc2luZ05hdGl2ZVJDVE5ldHdvcmtpbmdTaGltIiwidGhyb3dNaXNzaW5nTmF0aXZlTW9kdWxlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFXQSxhOztBQUVBLEdBQU1BLCtCQUFnQ0MsUUFBUSwrQkFBUixDQUF0QztBQUNBLEdBQU1DLG9CQUFxQkQsUUFBUSxvQkFBUixDQUEzQjtBQUNBLEdBQU1FLHFCQUFzQkYsUUFBUSxlQUFSLEVBQXlCRyxVQUFyRDtBQUNBLEdBQU1DLG9CQUFxQkosUUFBUSxvQkFBUixDQUEzQixDOzs7O0FBSU1LLGE7Ozs7QUFJSix3QkFBYztBQUNOSCxtQkFETSxTQUZkSSxXQUVjLENBRlMsSUFFVDtBQUViLEM7OztBQUdDQyxNO0FBQ0FDLFk7QUFDQUMsRztBQUNBQyxPO0FBQ0FDLEk7QUFDQUMsWTtBQUNBQyxrQjtBQUNBQyxPO0FBQ0FDLFE7QUFDQUMsZTtBQUNBO0FBQ0EsR0FBTUMsTUFBT2IsbUJBQW1CTyxJQUFuQixDQUFiO0FBQ0FULG9CQUFvQmdCLFdBQXBCLENBQWdDO0FBQzlCWCxhQUQ4QjtBQUU5QkUsT0FGOEI7QUFHOUJFLGlCQUFVTSxJQUFWLEVBQWdCVCx5QkFBaEIsRUFIOEI7QUFJOUJFLGVBSjhCO0FBSzlCRSx5QkFMOEI7QUFNOUJDLHFDQU44QjtBQU85QkMsZUFQOEI7QUFROUJFLCtCQVI4QixDQUFoQztBQVNHRCxRQVRIO0FBVUQsQzs7QUFFWUksUyxDQUFtQjtBQUM5QmpCLG9CQUFvQmtCLFlBQXBCLENBQWlDRCxTQUFqQztBQUNELEM7O0FBRVlKLFEsQ0FBb0M7QUFDL0NiLG9CQUFvQm1CLFlBQXBCLENBQWlDTixRQUFqQztBQUNELEMsMkJBdkN5QmQsa0I7OztBQTBDNUIsR0FBSXFCLFNBQVcsQ0FBQ3BCLG1CQUFoQixDQUFxQztBQUM3QnFCLDhCQUQ2QjtBQUVqQyx5Q0FBYztBQUNOLGVBRE0sQ0FDVyxZQURYO0FBRWIsQ0FKZ0M7O0FBTUE7QUFDL0IsS0FBS0Msd0JBQUw7QUFDRCxDQVJnQzs7QUFVQztBQUNoQyxLQUFLQSx3QkFBTDtBQUNELENBWmdDOztBQWNDO0FBQ2hDLEtBQUtBLHdCQUFMO0FBQ0QsQ0FoQmdDLDRDQUNVekIsNkJBRFY7Ozs7OztBQXNCbkNNLGNBQWdCLEdBQUlrQiwrQkFBSixFQUFoQjtBQUNELENBdkJELElBdUJPO0FBQ0xsQixjQUFnQixHQUFJQSxjQUFKLEVBQWhCO0FBQ0Q7O0FBRURvQixPQUFPQyxPQUFQLENBQWlCckIsYUFBakIiLCJmaWxlIjoiUkNUTmV0d29ya2luZy5pb3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJDVE5ldHdvcmtpbmdcbiAqIEBmbG93XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgTWlzc2luZ05hdGl2ZUV2ZW50RW1pdHRlclNoaW0gPSByZXF1aXJlKCdNaXNzaW5nTmF0aXZlRXZlbnRFbWl0dGVyU2hpbScpO1xuY29uc3QgTmF0aXZlRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnTmF0aXZlRXZlbnRFbWl0dGVyJyk7XG5jb25zdCBSQ1ROZXR3b3JraW5nTmF0aXZlID0gcmVxdWlyZSgnTmF0aXZlTW9kdWxlcycpLk5ldHdvcmtpbmc7XG5jb25zdCBjb252ZXJ0UmVxdWVzdEJvZHkgPSByZXF1aXJlKCdjb252ZXJ0UmVxdWVzdEJvZHknKTtcblxuaW1wb3J0IHR5cGUge1JlcXVlc3RCb2R5fSBmcm9tICdjb252ZXJ0UmVxdWVzdEJvZHknO1xuXG5jbGFzcyBSQ1ROZXR3b3JraW5nIGV4dGVuZHMgTmF0aXZlRXZlbnRFbWl0dGVyIHtcblxuICBpc0F2YWlsYWJsZTogYm9vbGVhbiA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoUkNUTmV0d29ya2luZ05hdGl2ZSk7XG4gIH1cblxuICBzZW5kUmVxdWVzdChcbiAgICBtZXRob2Q6IHN0cmluZyxcbiAgICB0cmFja2luZ05hbWU6IHN0cmluZyxcbiAgICB1cmw6IHN0cmluZyxcbiAgICBoZWFkZXJzOiBPYmplY3QsXG4gICAgZGF0YTogUmVxdWVzdEJvZHksXG4gICAgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnYmFzZTY0JyxcbiAgICBpbmNyZW1lbnRhbFVwZGF0ZXM6IGJvb2xlYW4sXG4gICAgdGltZW91dDogbnVtYmVyLFxuICAgIGNhbGxiYWNrOiAocmVxdWVzdElkOiBudW1iZXIpID0+IGFueSxcbiAgICB3aXRoQ3JlZGVudGlhbHM6IGJvb2xlYW5cbiAgKSB7XG4gICAgY29uc3QgYm9keSA9IGNvbnZlcnRSZXF1ZXN0Qm9keShkYXRhKTtcbiAgICBSQ1ROZXR3b3JraW5nTmF0aXZlLnNlbmRSZXF1ZXN0KHtcbiAgICAgIG1ldGhvZCxcbiAgICAgIHVybCxcbiAgICAgIGRhdGE6IHsuLi5ib2R5LCB0cmFja2luZ05hbWV9LFxuICAgICAgaGVhZGVycyxcbiAgICAgIHJlc3BvbnNlVHlwZSxcbiAgICAgIGluY3JlbWVudGFsVXBkYXRlcyxcbiAgICAgIHRpbWVvdXQsXG4gICAgICB3aXRoQ3JlZGVudGlhbHNcbiAgICB9LCBjYWxsYmFjayk7XG4gIH1cblxuICBhYm9ydFJlcXVlc3QocmVxdWVzdElkOiBudW1iZXIpIHtcbiAgICBSQ1ROZXR3b3JraW5nTmF0aXZlLmFib3J0UmVxdWVzdChyZXF1ZXN0SWQpO1xuICB9XG5cbiAgY2xlYXJDb29raWVzKGNhbGxiYWNrOiAocmVzdWx0OiBib29sZWFuKSA9PiBhbnkpIHtcbiAgICBSQ1ROZXR3b3JraW5nTmF0aXZlLmNsZWFyQ29va2llcyhjYWxsYmFjayk7XG4gIH1cbn1cblxuaWYgKF9fREVWX18gJiYgIVJDVE5ldHdvcmtpbmdOYXRpdmUpIHtcbiAgY2xhc3MgTWlzc2luZ05hdGl2ZVJDVE5ldHdvcmtpbmdTaGltIGV4dGVuZHMgTWlzc2luZ05hdGl2ZUV2ZW50RW1pdHRlclNoaW0ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoJ1JDVE5ldHdvcmtpbmcnLCAnTmV0d29ya2luZycpO1xuICAgIH1cblxuICAgIHNlbmRSZXF1ZXN0KC4uLmFyZ3M6IEFycmF5PGFueT4pIHtcbiAgICAgIHRoaXMudGhyb3dNaXNzaW5nTmF0aXZlTW9kdWxlKCk7XG4gICAgfVxuXG4gICAgYWJvcnRSZXF1ZXN0KC4uLmFyZ3M6IEFycmF5PGFueT4pIHtcbiAgICAgIHRoaXMudGhyb3dNaXNzaW5nTmF0aXZlTW9kdWxlKCk7XG4gICAgfVxuXG4gICAgY2xlYXJDb29raWVzKC4uLmFyZ3M6IEFycmF5PGFueT4pIHtcbiAgICAgIHRoaXMudGhyb3dNaXNzaW5nTmF0aXZlTW9kdWxlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gVGhpcyBtb2R1bGUgZGVwZW5kcyBvbiB0aGUgbmF0aXZlIGBSQ1ROZXR3b3JraW5nTmF0aXZlYCBtb2R1bGUuIElmIHlvdSBkb24ndCBpbmNsdWRlIGl0LFxuICAvLyBgUkNUTmV0d29ya2luZy5pc0F2YWlsYWJsZWAgd2lsbCByZXR1cm4gYGZhbHNlYCwgYW5kIGFueSBtZXRob2QgY2FsbHMgd2lsbCB0aHJvdy5cbiAgLy8gV2UgcmVhc3NpZ24gdGhlIGNsYXNzIHZhcmlhYmxlIHRvIGtlZXAgdGhlIGF1dG9kb2MgZ2VuZXJhdG9yIGhhcHB5LlxuICBSQ1ROZXR3b3JraW5nID0gbmV3IE1pc3NpbmdOYXRpdmVSQ1ROZXR3b3JraW5nU2hpbSgpO1xufSBlbHNlIHtcbiAgUkNUTmV0d29ya2luZyA9IG5ldyBSQ1ROZXR3b3JraW5nKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUkNUTmV0d29ya2luZztcbiJdfQ==