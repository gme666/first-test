b251f7ed3291212b6b43f5e8d7bdf8fb












'use strict';var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}

var invariant=require('fbjs/lib/invariant');
var uuid=require('uuid');var _require=

require('NativeModules'),BlobModule=_require.BlobModule;var








































Blob=function(){_createClass(Blob,null,[{key:'create',value:function create(























props){
return _extends(Object.create(Blob.prototype),props);
}}]);






function Blob(parts,options){_classCallCheck(this,Blob);
var blobId=uuid();
var size=0;
parts.forEach(function(part){
invariant(part instanceof Blob,'Can currently only create a Blob from other Blobs');
size+=part.size;
});
BlobModule.createFromParts(parts,blobId);
return Blob.create({
blobId:blobId,
offset:0,
size:size});

}_createClass(Blob,[{key:'slice',value:function slice(






start,end){
var offset=this.offset;
var size=this.size;
if(typeof start==='number'){
if(start>size){
start=size;
}
offset+=start;
size-=start;

if(typeof end==='number'){
if(end<0){
end=this.size+end;
}
size=end-start;
}
}
return Blob.create({
blobId:this.blobId,
offset:offset,
size:size});

}},{key:'close',value:function close()













{
BlobModule.release(this.blobId);
}}]);return Blob;}();


module.exports=Blob;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJsb2IuanMiXSwibmFtZXMiOlsiaW52YXJpYW50IiwicmVxdWlyZSIsInV1aWQiLCJCbG9iTW9kdWxlIiwiQmxvYiIsInByb3BzIiwiT2JqZWN0IiwiY3JlYXRlIiwicHJvdG90eXBlIiwicGFydHMiLCJvcHRpb25zIiwiYmxvYklkIiwic2l6ZSIsImZvckVhY2giLCJwYXJ0IiwiY3JlYXRlRnJvbVBhcnRzIiwib2Zmc2V0Iiwic3RhcnQiLCJlbmQiLCJyZWxlYXNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBWUEsYTs7QUFFQSxHQUFNQSxXQUFZQyxRQUFRLG9CQUFSLENBQWxCO0FBQ0EsR0FBTUMsTUFBT0QsUUFBUSxNQUFSLENBQWIsQzs7QUFFdUJBLFFBQVEsZUFBUixDLENBQWZFLFUsVUFBQUEsVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5Q0ZDLEk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCVUMsSyxDQUF3QjtBQUNwQyxNQUFPLFVBQWNDLE9BQU9DLE1BQVAsQ0FBY0gsS0FBS0ksU0FBbkIsQ0FBZCxDQUE2Q0gsS0FBN0MsQ0FBUDtBQUNELEM7Ozs7Ozs7QUFPRCxjQUFZSSxLQUFaLENBQWdDQyxPQUFoQyxDQUE4QztBQUM1QyxHQUFNQyxRQUFTVCxNQUFmO0FBQ0EsR0FBSVUsTUFBTyxDQUFYO0FBQ0FILE1BQU1JLE9BQU4sQ0FBYyxTQUFDQyxJQUFELENBQVU7QUFDdEJkLFVBQVVjLGVBQWdCVixLQUExQixDQUFnQyxtREFBaEM7QUFDQVEsTUFBUUUsS0FBS0YsSUFBYjtBQUNELENBSEQ7QUFJQVQsV0FBV1ksZUFBWCxDQUEyQk4sS0FBM0IsQ0FBa0NFLE1BQWxDO0FBQ0EsTUFBT1AsTUFBS0csTUFBTCxDQUFZO0FBQ2pCSSxhQURpQjtBQUVqQkssT0FBUSxDQUZTO0FBR2pCSixTQUhpQixDQUFaLENBQVA7O0FBS0QsQzs7Ozs7OztBQU9LSyxLLENBQWdCQyxHLENBQW9CO0FBQ3hDLEdBQUlGLFFBQVMsS0FBS0EsTUFBbEI7QUFDQSxHQUFJSixNQUFPLEtBQUtBLElBQWhCO0FBQ0EsR0FBSSxNQUFPSyxNQUFQLEdBQWlCLFFBQXJCLENBQStCO0FBQzdCLEdBQUlBLE1BQVFMLElBQVosQ0FBa0I7QUFDaEJLLE1BQVFMLElBQVI7QUFDRDtBQUNESSxRQUFVQyxLQUFWO0FBQ0FMLE1BQVFLLEtBQVI7O0FBRUEsR0FBSSxNQUFPQyxJQUFQLEdBQWUsUUFBbkIsQ0FBNkI7QUFDM0IsR0FBSUEsSUFBTSxDQUFWLENBQWE7QUFDWEEsSUFBTSxLQUFLTixJQUFMLENBQVlNLEdBQWxCO0FBQ0Q7QUFDRE4sS0FBT00sSUFBTUQsS0FBYjtBQUNEO0FBQ0Y7QUFDRCxNQUFPYixNQUFLRyxNQUFMLENBQVk7QUFDakJJLE9BQVEsS0FBS0EsTUFESTtBQUVqQkssYUFGaUI7QUFHakJKLFNBSGlCLENBQVosQ0FBUDs7QUFLRCxDOzs7Ozs7Ozs7Ozs7OztBQWNPO0FBQ05ULFdBQVdnQixPQUFYLENBQW1CLEtBQUtSLE1BQXhCO0FBQ0QsQzs7O0FBR0hTLE9BQU9DLE9BQVAsQ0FBaUJqQixJQUFqQiIsImZpbGUiOiJCbG9iLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBCbG9iXG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5jb25zdCB1dWlkID0gcmVxdWlyZSgndXVpZCcpO1xuXG5jb25zdCB7IEJsb2JNb2R1bGUgfSA9IHJlcXVpcmUoJ05hdGl2ZU1vZHVsZXMnKTtcblxuaW1wb3J0IHR5cGUgeyBCbG9iUHJvcHMgfSBmcm9tICdCbG9iVHlwZXMnO1xuXG4vKipcbiAqIE9wYXF1ZSBKUyByZXByZXNlbnRhdGlvbiBvZiBzb21lIGJpbmFyeSBkYXRhIGluIG5hdGl2ZS5cbiAqXG4gKiBUaGUgQVBJIGlzIG1vZGVsZWQgYWZ0ZXIgdGhlIFczQyBCbG9iIEFQSSwgd2l0aCBvbmUgY2F2ZWF0XG4gKiByZWdhcmRpbmcgZXhwbGljaXQgZGVhbGxvY2F0aW9uLiBSZWZlciB0byB0aGUgYGNsb3NlKClgXG4gKiBtZXRob2QgZm9yIGZ1cnRoZXIgZGV0YWlscy5cbiAqXG4gKiBFeGFtcGxlIHVzYWdlIGluIGEgUmVhY3QgY29tcG9uZW50OlxuICpcbiAqICAgY2xhc3MgV2ViU29ja2V0SW1hZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICogICAgICBzdGF0ZSA9IHtibG9iOiBudWxsfTtcbiAqICAgICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gKiAgICAgICAgbGV0IHdzID0gdGhpcy53cyA9IG5ldyBXZWJTb2NrZXQoLi4uKTtcbiAqICAgICAgICB3cy5iaW5hcnlUeXBlID0gJ2Jsb2InO1xuICogICAgICAgIHdzLm9ubWVzc2FnZSA9IChldmVudCkgPT4ge1xuICogICAgICAgICAgaWYgKHRoaXMuc3RhdGUuYmxvYikge1xuICogICAgICAgICAgICB0aGlzLnN0YXRlLmJsb2IuY2xvc2UoKTtcbiAqICAgICAgICAgIH1cbiAqICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2Jsb2I6IGV2ZW50LmRhdGF9KTtcbiAqICAgICAgICB9O1xuICogICAgICB9XG4gKiAgICAgIGNvbXBvbmVudFVubW91bnQoKSB7XG4gKiAgICAgICAgaWYgKHRoaXMuc3RhdGUuYmxvYikge1xuICogICAgICAgICAgdGhpcy5zdGF0ZS5ibG9iLmNsb3NlKCk7XG4gKiAgICAgICAgfVxuICogICAgICAgIHRoaXMud3MuY2xvc2UoKTtcbiAqICAgICAgfVxuICogICAgICByZW5kZXIoKSB7XG4gKiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmJsb2IpIHtcbiAqICAgICAgICAgIHJldHVybiA8VmlldyAvPjtcbiAqICAgICAgICB9XG4gKiAgICAgICAgcmV0dXJuIDxJbWFnZSBzb3VyY2U9e3t1cmk6IFVSTC5jcmVhdGVPYmplY3RVUkwodGhpcy5zdGF0ZS5ibG9iKX19IC8+O1xuICogICAgICB9XG4gKiAgIH1cbiAqXG4gKiBSZWZlcmVuY2U6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9CbG9iXG4gKi9cbmNsYXNzIEJsb2Ige1xuICAvKipcbiAgICogU2l6ZSBvZiB0aGUgZGF0YSBjb250YWluZWQgaW4gdGhlIEJsb2Igb2JqZWN0LCBpbiBieXRlcy5cbiAgICovXG4gIHNpemU6IG51bWJlcjtcbiAgLypcbiAgICogU3RyaW5nIGluZGljYXRpbmcgdGhlIE1JTUUgdHlwZSBvZiB0aGUgZGF0YSBjb250YWluZWQgaW4gdGhlIEJsb2IuXG4gICAqIElmIHRoZSB0eXBlIGlzIHVua25vd24sIHRoaXMgc3RyaW5nIGlzIGVtcHR5LlxuICAgKi9cbiAgdHlwZTogc3RyaW5nO1xuXG4gIC8qXG4gICAqIFVuaXF1ZSBpZCB0byBpZGVudGlmeSB0aGUgYmxvYiBvbiBuYXRpdmUgc2lkZSAobm9uLXN0YW5kYXJkKVxuICAgKi9cbiAgYmxvYklkOiBzdHJpbmc7XG4gIC8qXG4gICAqIE9mZnNldCB0byBpbmRpY2F0ZSBwYXJ0IG9mIGJsb2IsIHVzZWQgd2hlbiBzbGljZWQgKG5vbi1zdGFuZGFyZClcbiAgICovXG4gIG9mZnNldDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYmxvYiBpbnN0YW5jZSBmcm9tIGJsb2IgZGF0YSBmcm9tIG5hdGl2ZS5cbiAgICogVXNlZCBpbnRlcm5hbGx5IGJ5IG1vZHVsZXMgbGlrZSBYSFIsIFdlYlNvY2tldCwgZXRjLlxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZShwcm9wczogQmxvYlByb3BzKTogQmxvYiB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShCbG9iLnByb3RvdHlwZSksIHByb3BzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBmb3IgSlMgY29uc3VtZXJzLlxuICAgKiBDdXJyZW50bHkgd2Ugb25seSBzdXBwb3J0IGNyZWF0aW5nIEJsb2JzIGZyb20gb3RoZXIgQmxvYnMuXG4gICAqIFJlZmVyZW5jZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0Jsb2IvQmxvYlxuICAgKi9cbiAgY29uc3RydWN0b3IocGFydHM6IEFycmF5PEJsb2I+LCBvcHRpb25zOiBhbnkpIHtcbiAgICBjb25zdCBibG9iSWQgPSB1dWlkKCk7XG4gICAgbGV0IHNpemUgPSAwO1xuICAgIHBhcnRzLmZvckVhY2goKHBhcnQpID0+IHtcbiAgICAgIGludmFyaWFudChwYXJ0IGluc3RhbmNlb2YgQmxvYiwgJ0NhbiBjdXJyZW50bHkgb25seSBjcmVhdGUgYSBCbG9iIGZyb20gb3RoZXIgQmxvYnMnKTtcbiAgICAgIHNpemUgKz0gcGFydC5zaXplO1xuICAgIH0pO1xuICAgIEJsb2JNb2R1bGUuY3JlYXRlRnJvbVBhcnRzKHBhcnRzLCBibG9iSWQpO1xuICAgIHJldHVybiBCbG9iLmNyZWF0ZSh7XG4gICAgICBibG9iSWQsXG4gICAgICBvZmZzZXQ6IDAsXG4gICAgICBzaXplLFxuICAgIH0pO1xuICB9XG5cbiAgLypcbiAgICogVGhpcyBtZXRob2QgaXMgdXNlZCB0byBjcmVhdGUgYSBuZXcgQmxvYiBvYmplY3QgY29udGFpbmluZ1xuICAgKiB0aGUgZGF0YSBpbiB0aGUgc3BlY2lmaWVkIHJhbmdlIG9mIGJ5dGVzIG9mIHRoZSBzb3VyY2UgQmxvYi5cbiAgICogUmVmZXJlbmNlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQmxvYi9zbGljZVxuICAgKi9cbiAgc2xpY2Uoc3RhcnQ/OiBudW1iZXIsIGVuZD86IG51bWJlcik6IEJsb2Ige1xuICAgIGxldCBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICBsZXQgc2l6ZSA9IHRoaXMuc2l6ZTtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnbnVtYmVyJykge1xuICAgICAgaWYgKHN0YXJ0ID4gc2l6ZSkge1xuICAgICAgICBzdGFydCA9IHNpemU7XG4gICAgICB9XG4gICAgICBvZmZzZXQgKz0gc3RhcnQ7XG4gICAgICBzaXplIC09IHN0YXJ0O1xuXG4gICAgICBpZiAodHlwZW9mIGVuZCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgICBlbmQgPSB0aGlzLnNpemUgKyBlbmQ7XG4gICAgICAgIH1cbiAgICAgICAgc2l6ZSA9IGVuZCAtIHN0YXJ0O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gQmxvYi5jcmVhdGUoe1xuICAgICAgYmxvYklkOiB0aGlzLmJsb2JJZCxcbiAgICAgIG9mZnNldCxcbiAgICAgIHNpemUsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgaXMgaW4gdGhlIHN0YW5kYXJkLCBidXQgbm90IGFjdHVhbGx5IGltcGxlbWVudGVkIGJ5XG4gICAqIGFueSBicm93c2VycyBhdCB0aGlzIHBvaW50LiBJdCdzIGltcG9ydGFudCBmb3IgaG93IEJsb2JzIHdvcmsgaW5cbiAgICogUmVhY3QgTmF0aXZlLCBob3dldmVyLCBzaW5jZSB3ZSBjYW5ub3QgZGUtYWxsb2NhdGUgcmVzb3VyY2VzIGF1dG9tYXRpY2FsbHksXG4gICAqIHNvIGNvbnN1bWVycyBuZWVkIHRvIGV4cGxpY2l0bHkgZGUtYWxsb2NhdGUgdGhlbS5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoZSBzZW1hbnRpY3MgYXJvdW5kIEJsb2JzIGNyZWF0ZWQgdmlhIGBibG9iLnNsaWNlKClgXG4gICAqIGFuZCBgbmV3IEJsb2IoW2Jsb2JdKWAgYXJlIGRpZmZlcmVudC4gYGJsb2Iuc2xpY2UoKWAgY3JlYXRlcyBhXG4gICAqIG5ldyAqdmlldyogb250byB0aGUgc2FtZSBiaW5hcnkgZGF0YSwgc28gY2FsbGluZyBgY2xvc2UoKWAgb24gYW55XG4gICAqIG9mIHRob3NlIHZpZXdzIGlzIGVub3VnaCB0byBkZWFsbG9jYXRlIHRoZSBkYXRhLCB3aGVyZWFzXG4gICAqIGBuZXcgQmxvYihbYmxvYiwgLi4uXSlgIGFjdHVhbGx5IGNvcGllcyB0aGUgZGF0YSBpbiBtZW1vcnkuXG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICBCbG9iTW9kdWxlLnJlbGVhc2UodGhpcy5ibG9iSWQpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQmxvYjtcbiJdfQ==