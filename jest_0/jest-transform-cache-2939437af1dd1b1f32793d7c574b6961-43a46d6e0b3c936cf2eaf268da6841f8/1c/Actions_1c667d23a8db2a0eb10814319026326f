f0cc00d9033a62c452774b551fe209fd
Object.defineProperty(exports,"__esModule",{value:true});exports.ActionsTest=exports.ActionMap=undefined;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _ActionMap;







var _Util=require('./Util');
var _Scene=require('./Scene');var _Scene2=_interopRequireDefault(_Scene);
var _ActionConst=require('./ActionConst');var ActionConst=_interopRequireWildcard(_ActionConst);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i];}return target;}function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}

var ActionMap=exports.ActionMap=(_ActionMap={
jump:ActionConst.JUMP,
push:ActionConst.PUSH,
replace:ActionConst.REPLACE,
back:ActionConst.BACK,
BackAction:ActionConst.BACK_ACTION,
popAndReplace:ActionConst.POP_AND_REPLACE,
popTo:ActionConst.POP_TO,
refresh:ActionConst.REFRESH,
reset:ActionConst.RESET,
focus:ActionConst.FOCUS,
pushOrPop:ActionConst.PUSH_OR_POP,
androidBack:ActionConst.ANDROID_BACK},_defineProperty(_ActionMap,
ActionConst.JUMP,ActionConst.JUMP),_defineProperty(_ActionMap,
ActionConst.PUSH,ActionConst.PUSH),_defineProperty(_ActionMap,
ActionConst.REPLACE,ActionConst.REPLACE),_defineProperty(_ActionMap,
ActionConst.BACK,ActionConst.BACK),_defineProperty(_ActionMap,
ActionConst.BACK_ACTION,ActionConst.BACK_ACTION),_defineProperty(_ActionMap,
ActionConst.POP_AND_REPLACE,ActionConst.POP_AND_REPLACE),_defineProperty(_ActionMap,
ActionConst.POP_TO,ActionConst.POP_TO),_defineProperty(_ActionMap,
ActionConst.REFRESH,ActionConst.REFRESH),_defineProperty(_ActionMap,
ActionConst.RESET,ActionConst.RESET),_defineProperty(_ActionMap,
ActionConst.FOCUS,ActionConst.FOCUS),_defineProperty(_ActionMap,
ActionConst.PUSH_OR_POP,ActionConst.PUSH_OR_POP),_defineProperty(_ActionMap,
ActionConst.ANDROID_BACK,ActionConst.ANDROID_BACK),_ActionMap);


function filterParam(data){
if(data.toString()!=='[object Object]'){
return{data:data};
}
var proto=(data||{}).constructor.name;

if(!data||proto!=='Object'){
return{};
}
return data;
}

var reservedKeys=[
'create',
'callback',
'iterate',
'current'].concat(_toConsumableArray(
Object.keys(ActionMap)));


function getInheritProps(props){var

key=props.key,style=props.style,type=props.type,component=props.component,tabs=props.tabs,sceneKey=props.sceneKey,parent=props.parent,children=props.children,parentProps=_objectWithoutProperties(props,['key','style','type','component','tabs','sceneKey','parent','children']);
return parentProps.passProps?parentProps:{};
}var

Actions=function(){
function Actions(){_classCallCheck(this,Actions);
this.callback=null;
this.create=this.create.bind(this);
this.iterate=this.iterate.bind(this);
this.pop=this.pop.bind(this);
this.refresh=this.refresh.bind(this);
this.focus=this.focus.bind(this);
}_createClass(Actions,[{key:'iterate',value:function iterate(

root){var parentProps=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var _this=this;var refsParam=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var wrapBy=arguments[3];
var refs=refsParam;
(0,_Util.assert)(root.props,'props should be defined for stack');
var key=root.key;
(0,_Util.assert)(key,'unique key should be defined ');
(0,_Util.assert)(
reservedKeys.indexOf(key)===-1,'\''+
key+'\' is not allowed as key name. Reserved keys: ['+reservedKeys.join(', ')+']');var _root$props=

root.props,children=_root$props.children,component=_root$props.component,staticProps=_objectWithoutProperties(_root$props,['children','component']);
var type=root.props.type||(parentProps.tabs?ActionConst.JUMP:ActionConst.PUSH);
if(type==='switch'){
type=ActionConst.JUMP;
}
var inheritProps=getInheritProps(parentProps);
var componentProps=component?{component:wrapBy(component)}:{};

if(wrapBy){
Object.keys(staticProps).forEach(function(prop){
var componentClass=staticProps[prop];
if(componentClass&&componentClass.prototype&&componentClass.prototype.render){
componentProps[prop]=wrapBy(componentClass);
delete staticProps[prop];
}
});
}
var res=_extends({
key:key,
name:key,
sceneKey:key,
parent:parentProps.key,
type:type},
inheritProps,
staticProps,
componentProps);

var list=children||[];
var normalized=[];
if(!(list instanceof Array)){
list=[list];
}
list.forEach(function(item){
if(item){
if(item instanceof Array){
item.forEach(function(it){
normalized.push(it);
});
}else{
normalized.push(item);
}
}
});
list=normalized;

var condition=function condition(el){return!el.props.component&&!el.props.children&&!el.props.onPress&&(
!el.props.type||ActionMap[el.props.type]===ActionConst.REFRESH);};

var baseKey=root.key;
var subStateParent=parentProps.key;
var subStates=list.filter(condition);
list=list.filter(function(el){return!condition(el);});
if(list.length){
res.children=list.map(function(c){return _this.iterate(c,res,refs,wrapBy).key;});
}else{
if(!staticProps.onPress){
(0,_Util.assert)(component,'component property is not set for key='+key);
}

if(parentProps.tabs){
var innerKey=res.key+'_';
baseKey=innerKey;
subStateParent=res.key;
var inner=_extends({},res,{
name:key,
key:innerKey,
sceneKey:innerKey,
type:ActionConst.PUSH,
parent:res.key});
refs[innerKey]=inner;
res.children=[innerKey];
delete res.component;
}
res.index=0;
}var _loop=function _loop(

el){
refs[el.key]=_extends({key:el.key,
name:el.key},
el.props,{
type:ActionConst.REFRESH,
base:baseKey,
parent:subStateParent});
if(_this[el.key]){
console.log('Key '+el.key+' is already defined!');
}
_this[el.key]=
function(){var props=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};
(0,_Util.assert)(_this.callback,'Actions.callback is not defined!');
_this.callback(_extends({key:el.key,type:ActionConst.REFRESH},filterParam(props)));
};};for(var _iterator=subStates,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[typeof Symbol==='function'?Symbol.iterator:'@@iterator']();;){var _ref;if(_isArray){if(_i>=_iterator.length)break;_ref=_iterator[_i++];}else{_i=_iterator.next();if(_i.done)break;_ref=_i.value;}var el=_ref;_loop(el);
}
if(this[key]){
console.log('Key '+key+' is already defined!');
}
this[key]=
function(){var props=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};
(0,_Util.assert)(_this.callback,'Actions.callback is not defined!');
_this.callback(_extends({key:key,type:type},filterParam(props)));
};
refs[res.key]=res;

return res;
}},{key:'popTo',value:function popTo()

{var props=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};
return this.callback(_extends({},filterParam(props),{type:ActionConst.POP_TO}));
}},{key:'pop',value:function pop()

{var props=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};
return this.callback(_extends({},filterParam(props),{type:ActionConst.BACK_ACTION}));
}},{key:'jump',value:function jump()

{var props=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};
return this.callback(_extends({},filterParam(props),{type:ActionConst.JUMP}));
}},{key:'refresh',value:function refresh()

{var props=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};
return this.callback(_extends({},filterParam(props),{type:ActionConst.REFRESH}));
}},{key:'focus',value:function focus()

{var props=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};
return this.callback(_extends({},filterParam(props),{type:ActionConst.FOCUS}));
}},{key:'androidBack',value:function androidBack()

{var props=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};
return this.callback(_extends({},filterParam(props),{type:ActionConst.ANDROID_BACK}));
}},{key:'create',value:function create(

scene){var wrapBy=arguments.length>1&&arguments[1]!==undefined?arguments[1]:function(x){return x;};
(0,_Util.assert)(scene,'root scene should be defined');
var refs={};
this.iterate(scene,{},refs,wrapBy);
return refs;
}}]);return Actions;}();exports.


ActionsTest=Actions;exports.default=
new Actions();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,