f4e47b356b45c58c1e9814194401db4d











'use strict';

var invariant=require('fbjs/lib/invariant');














var TRACE_TAG_REACT_APPS=1<<17;
var TRACE_TAG_JSC_CALLS=1<<27;

var _enabled=false;
var _asyncCookie=0;
var _markStack=[];
var _markStackIndex=-1;



var REACT_MARKER='\u269B';
var userTimingPolyfill={
mark:function mark(markName){
if(__DEV__){
if(_enabled){
_markStackIndex++;
_markStack[_markStackIndex]=markName;
var systraceLabel=markName;


if(markName[0]===REACT_MARKER){


var indexOfId=markName.lastIndexOf(' (#');
var cutoffIndex=indexOfId!==-1?indexOfId:markName.length;

systraceLabel=markName.slice(2,cutoffIndex);
}
Systrace.beginEvent(systraceLabel);
}
}
},
measure:function measure(measureName,startMark,endMark){
if(__DEV__){
if(_enabled){
invariant(
typeof measureName==='string'&&
typeof startMark==='string'&&
typeof endMark==='undefined',
'Only performance.measure(string, string) overload is supported.');

var topMark=_markStack[_markStackIndex];
invariant(
startMark===topMark,
'There was a mismatching performance.measure() call. '+
'Expected "%s" but got "%s."',
topMark,
startMark);

_markStackIndex--;


Systrace.endEvent();
}
}
},
clearMarks:function clearMarks(markName){
if(__DEV__){
if(_enabled){
if(_markStackIndex===-1){
return;
}
if(markName===_markStack[_markStackIndex]){


userTimingPolyfill.measure(markName,markName);
}
}
}
},
clearMeasures:function clearMeasures(){


}};


var Systrace={
getUserTimingPolyfill:function getUserTimingPolyfill(){
return userTimingPolyfill;
},

setEnabled:function setEnabled(enabled){
if(_enabled!==enabled){
if(__DEV__){
if(enabled){
global.nativeTraceBeginLegacy&&global.nativeTraceBeginLegacy(TRACE_TAG_JSC_CALLS);
}else{
global.nativeTraceEndLegacy&&global.nativeTraceEndLegacy(TRACE_TAG_JSC_CALLS);
}
}
_enabled=enabled;
}
},

isEnabled:function isEnabled(){
return _enabled;
},




beginEvent:function beginEvent(profileName,args){
if(_enabled){
profileName=typeof profileName==='function'?
profileName():profileName;
global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS,profileName,args);
}
},

endEvent:function endEvent(){
if(_enabled){
global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);
}
},






beginAsyncEvent:function beginAsyncEvent(profileName){
var cookie=_asyncCookie;
if(_enabled){
_asyncCookie++;
profileName=typeof profileName==='function'?
profileName():profileName;
global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS,profileName,cookie,0);
}
return cookie;
},

endAsyncEvent:function endAsyncEvent(profileName,cookie){
if(_enabled){
profileName=typeof profileName==='function'?
profileName():profileName;
global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS,profileName,cookie,0);
}
},




counterEvent:function counterEvent(profileName,value){
if(_enabled){
profileName=typeof profileName==='function'?
profileName():profileName;
global.nativeTraceCounter&&
global.nativeTraceCounter(TRACE_TAG_REACT_APPS,profileName,value);
}
},





attachToRelayProfiler:function attachToRelayProfiler(relayProfiler){
relayProfiler.attachProfileHandler('*',function(name){
var cookie=Systrace.beginAsyncEvent(name);
return function(){
Systrace.endAsyncEvent(name,cookie);
};
});

relayProfiler.attachAggregateHandler('*',function(name,callback){
Systrace.beginEvent(name);
callback();
Systrace.endEvent();
});
},



swizzleJSON:function swizzleJSON(){
Systrace.measureMethods(JSON,'JSON',[
'parse',
'stringify']);

},









measureMethods:function measureMethods(object,objectName,methodNames){
if(!__DEV__){
return;
}

methodNames.forEach(function(methodName){
object[methodName]=Systrace.measure(
objectName,
methodName,
object[methodName]);

});
},










measure:function measure(objName,fnName,func){
if(!__DEV__){
return func;
}

var profileName=objName+'.'+fnName;
return function(){
if(!_enabled){
return func.apply(this,arguments);
}

Systrace.beginEvent(profileName);
var ret=func.apply(this,arguments);
Systrace.endEvent();
return ret;
};
}};


if(__DEV__){




require.Systrace=Systrace;
}

module.exports=Systrace;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,