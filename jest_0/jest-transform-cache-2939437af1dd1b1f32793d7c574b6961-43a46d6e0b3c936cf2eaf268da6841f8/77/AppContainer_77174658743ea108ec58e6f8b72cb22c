d5976f8875808ca7f268368abcfd7609













'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}

var EmitterSubscription=require('EmitterSubscription');
var PropTypes=require('prop-types');
var RCTDeviceEventEmitter=require('RCTDeviceEventEmitter');
var React=require('React');
var ReactNative=require('ReactNative');
var StyleSheet=require('StyleSheet');
var View=require('View');var














AppContainer=function(_React$Component){_inherits(AppContainer,_React$Component);function AppContainer(){var _ref;var _temp,_this,_ret;_classCallCheck(this,AppContainer);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=_possibleConstructorReturn(this,(_ref=AppContainer.__proto__||Object.getPrototypeOf(AppContainer)).call.apply(_ref,[this].concat(args))),_this),_this.

state={
inspector:null,
mainKey:1},_this.


_subscription=null,_temp),_possibleConstructorReturn(_this,_ret);}_createClass(AppContainer,[{key:'getChildContext',value:function getChildContext()





{
return{
rootTag:this.props.rootTag};

}},{key:'componentDidMount',value:function componentDidMount()

{var _this2=this;
if(__DEV__){
if(!global.__RCTProfileIsProfiling){
this._subscription=RCTDeviceEventEmitter.addListener(
'toggleElementInspector',
function(){
var Inspector=require('Inspector');
var inspector=_this2.state.inspector?
null:
React.createElement(Inspector,{
inspectedViewTag:ReactNative.findNodeHandle(_this2._mainRef),
onRequestRerenderApp:function onRequestRerenderApp(updateInspectedViewTag){
_this2.setState(
function(s){return{mainKey:s.mainKey+1};},
function(){return(
updateInspectedViewTag(
ReactNative.findNodeHandle(_this2._mainRef)));});


}});

_this2.setState({inspector:inspector});
});

}
}
}},{key:'componentWillUnmount',value:function componentWillUnmount()

{
if(this._subscription){
this._subscription.remove();
}
}},{key:'render',value:function render()

{var _this3=this;
var yellowBox=null;
if(__DEV__){
if(!global.__RCTProfileIsProfiling){
var YellowBox=require('YellowBox');
yellowBox=React.createElement(YellowBox,null);
}
}

var innerView=
React.createElement(View,{
collapsable:!this.state.inspector,
key:this.state.mainKey,
pointerEvents:'box-none',
style:styles.appContainer,
ref:function ref(_ref2){
_this3._mainRef=_ref2;
}},
this.props.children);



var Wrapper=this.props.WrapperComponent;
if(Wrapper){
innerView=
React.createElement(Wrapper,null,
innerView);


}
return(
React.createElement(View,{style:styles.appContainer,pointerEvents:'box-none'},
innerView,
yellowBox,
this.state.inspector));


}}]);return AppContainer;}(React.Component);AppContainer.childContextTypes={rootTag:PropTypes.number};


var styles=StyleSheet.create({
appContainer:{
flex:1}});



module.exports=AppContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFwcENvbnRhaW5lci5qcyJdLCJuYW1lcyI6WyJFbWl0dGVyU3Vic2NyaXB0aW9uIiwicmVxdWlyZSIsIlByb3BUeXBlcyIsIlJDVERldmljZUV2ZW50RW1pdHRlciIsIlJlYWN0IiwiUmVhY3ROYXRpdmUiLCJTdHlsZVNoZWV0IiwiVmlldyIsIkFwcENvbnRhaW5lciIsInN0YXRlIiwiaW5zcGVjdG9yIiwibWFpbktleSIsIl9zdWJzY3JpcHRpb24iLCJyb290VGFnIiwicHJvcHMiLCJfX0RFVl9fIiwiZ2xvYmFsIiwiX19SQ1RQcm9maWxlSXNQcm9maWxpbmciLCJhZGRMaXN0ZW5lciIsIkluc3BlY3RvciIsImZpbmROb2RlSGFuZGxlIiwiX21haW5SZWYiLCJzZXRTdGF0ZSIsInMiLCJ1cGRhdGVJbnNwZWN0ZWRWaWV3VGFnIiwicmVtb3ZlIiwieWVsbG93Qm94IiwiWWVsbG93Qm94IiwiaW5uZXJWaWV3Iiwic3R5bGVzIiwiYXBwQ29udGFpbmVyIiwicmVmIiwiY2hpbGRyZW4iLCJXcmFwcGVyIiwiV3JhcHBlckNvbXBvbmVudCIsIkNvbXBvbmVudCIsImNoaWxkQ29udGV4dFR5cGVzIiwibnVtYmVyIiwiY3JlYXRlIiwiZmxleCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFhQSxhOztBQUVBLEdBQU1BLHFCQUFzQkMsUUFBUSxxQkFBUixDQUE1QjtBQUNBLEdBQU1DLFdBQVlELFFBQVEsWUFBUixDQUFsQjtBQUNBLEdBQU1FLHVCQUF3QkYsUUFBUSx1QkFBUixDQUE5QjtBQUNBLEdBQU1HLE9BQVFILFFBQVEsT0FBUixDQUFkO0FBQ0EsR0FBTUksYUFBY0osUUFBUSxhQUFSLENBQXBCO0FBQ0EsR0FBTUssWUFBYUwsUUFBUSxZQUFSLENBQW5CO0FBQ0EsR0FBTU0sTUFBT04sUUFBUSxNQUFSLENBQWIsQzs7Ozs7Ozs7Ozs7Ozs7O0FBZU1PLFk7O0FBRUpDLEssQ0FBZTtBQUNiQyxVQUFXLElBREU7QUFFYkMsUUFBUyxDQUZJLEM7OztBQUtmQyxhLENBQXNDLEk7Ozs7OztBQU1YO0FBQ3pCLE1BQU87QUFDTEMsUUFBUyxLQUFLQyxLQUFMLENBQVdELE9BRGYsQ0FBUDs7QUFHRCxDOztBQUV5QjtBQUN4QixHQUFJRSxPQUFKLENBQWE7QUFDWCxHQUFJLENBQUNDLE9BQU9DLHVCQUFaLENBQXFDO0FBQ25DLEtBQUtMLGFBQUwsQ0FBcUJULHNCQUFzQmUsV0FBdEI7QUFDbkIsd0JBRG1CO0FBRW5CLFVBQU07QUFDSixHQUFNQyxXQUFZbEIsUUFBUSxXQUFSLENBQWxCO0FBQ0EsR0FBTVMsV0FBWSxPQUFLRCxLQUFMLENBQVdDLFNBQVg7QUFDZCxJQURjO0FBRWQsb0JBQUMsU0FBRDtBQUNFLGlCQUFrQkwsWUFBWWUsY0FBWixDQUEyQixPQUFLQyxRQUFoQyxDQURwQjtBQUVFLHFCQUFzQixxREFBMEI7QUFDOUMsT0FBS0MsUUFBTDtBQUNFLGtCQUFNLENBQUNYLFFBQVNZLEVBQUVaLE9BQUYsQ0FBWSxDQUF0QixDQUFOLEVBREY7QUFFRTtBQUNFYTtBQUNFbkIsWUFBWWUsY0FBWixDQUEyQixPQUFLQyxRQUFoQyxDQURGLENBREYsR0FGRjs7O0FBT0QsQ0FWSCxFQUZKOztBQWNBLE9BQUtDLFFBQUwsQ0FBYyxDQUFDWixtQkFBRCxDQUFkO0FBQ0QsQ0FuQmtCLENBQXJCOztBQXFCRDtBQUNGO0FBQ0YsQzs7QUFFNEI7QUFDM0IsR0FBSSxLQUFLRSxhQUFULENBQXdCO0FBQ3RCLEtBQUtBLGFBQUwsQ0FBbUJhLE1BQW5CO0FBQ0Q7QUFDRixDOztBQUUwQjtBQUN6QixHQUFJQyxXQUFZLElBQWhCO0FBQ0EsR0FBSVgsT0FBSixDQUFhO0FBQ1gsR0FBSSxDQUFDQyxPQUFPQyx1QkFBWixDQUFxQztBQUNuQyxHQUFNVSxXQUFZMUIsUUFBUSxXQUFSLENBQWxCO0FBQ0F5QixVQUFZLG9CQUFDLFNBQUQsTUFBWjtBQUNEO0FBQ0Y7O0FBRUQsR0FBSUU7QUFDRixvQkFBQyxJQUFEO0FBQ0UsWUFBYSxDQUFDLEtBQUtuQixLQUFMLENBQVdDLFNBRDNCO0FBRUUsSUFBSyxLQUFLRCxLQUFMLENBQVdFLE9BRmxCO0FBR0UsY0FBYyxVQUhoQjtBQUlFLE1BQU9rQixPQUFPQyxZQUpoQjtBQUtFLElBQUssbUJBQU87QUFDVixPQUFLVCxRQUFMLENBQWdCVSxLQUFoQjtBQUNELENBUEg7QUFRRyxLQUFLakIsS0FBTCxDQUFXa0IsUUFSZCxDQURGOzs7O0FBYUEsR0FBTUMsU0FBVSxLQUFLbkIsS0FBTCxDQUFXb0IsZ0JBQTNCO0FBQ0EsR0FBSUQsT0FBSixDQUFhO0FBQ1hMO0FBQ0Usb0JBQUMsT0FBRDtBQUNHQSxTQURILENBREY7OztBQUtEO0FBQ0Q7QUFDRSxvQkFBQyxJQUFELEVBQU0sTUFBT0MsT0FBT0MsWUFBcEIsQ0FBa0MsY0FBYyxVQUFoRDtBQUNHRixTQURIO0FBRUdGLFNBRkg7QUFHRyxLQUFLakIsS0FBTCxDQUFXQyxTQUhkLENBREY7OztBQU9ELEMsMEJBMUZ3Qk4sTUFBTStCLFMsRUFBM0IzQixZLENBU0c0QixpQixDQUFvQixDQUN6QnZCLFFBQVNYLFVBQVVtQyxNQURNLEM7OztBQW9GN0IsR0FBTVIsUUFBU3ZCLFdBQVdnQyxNQUFYLENBQWtCO0FBQy9CUixhQUFjO0FBQ1pTLEtBQU0sQ0FETSxDQURpQixDQUFsQixDQUFmOzs7O0FBTUFDLE9BQU9DLE9BQVAsQ0FBaUJqQyxZQUFqQiIsImZpbGUiOiJBcHBDb250YWluZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEFwcENvbnRhaW5lclxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEVtaXR0ZXJTdWJzY3JpcHRpb24gPSByZXF1aXJlKCdFbWl0dGVyU3Vic2NyaXB0aW9uJyk7XG5jb25zdCBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5jb25zdCBSQ1REZXZpY2VFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdSQ1REZXZpY2VFdmVudEVtaXR0ZXInKTtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgnUmVhY3QnKTtcbmNvbnN0IFJlYWN0TmF0aXZlID0gcmVxdWlyZSgnUmVhY3ROYXRpdmUnKTtcbmNvbnN0IFN0eWxlU2hlZXQgPSByZXF1aXJlKCdTdHlsZVNoZWV0Jyk7XG5jb25zdCBWaWV3ID0gcmVxdWlyZSgnVmlldycpO1xuXG50eXBlIENvbnRleHQgPSB7XG4gIHJvb3RUYWc6IG51bWJlcixcbn07XG50eXBlIFByb3BzID0ge3xcbiAgY2hpbGRyZW4/OiBSZWFjdC5DaGlsZHJlbixcbiAgcm9vdFRhZzogbnVtYmVyLFxuICBXcmFwcGVyQ29tcG9uZW50PzogP1JlYWN0Q2xhc3M8Kj4sXG58fTtcbnR5cGUgU3RhdGUgPSB7XG4gIGluc3BlY3RvcjogP1JlYWN0LkVsZW1lbnQ8Kj4sXG4gIG1haW5LZXk6IG51bWJlcixcbn07XG5cbmNsYXNzIEFwcENvbnRhaW5lciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHByb3BzOiBQcm9wcztcbiAgc3RhdGU6IFN0YXRlID0ge1xuICAgIGluc3BlY3RvcjogbnVsbCxcbiAgICBtYWluS2V5OiAxLFxuICB9O1xuICBfbWFpblJlZjogP1JlYWN0LkVsZW1lbnQ8Kj47XG4gIF9zdWJzY3JpcHRpb246ID9FbWl0dGVyU3Vic2NyaXB0aW9uID0gbnVsbDtcblxuICBzdGF0aWMgY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gICAgcm9vdFRhZzogUHJvcFR5cGVzLm51bWJlcixcbiAgfTtcblxuICBnZXRDaGlsZENvbnRleHQoKTogQ29udGV4dCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvb3RUYWc6IHRoaXMucHJvcHMucm9vdFRhZyxcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKTogdm9pZCB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIGlmICghZ2xvYmFsLl9fUkNUUHJvZmlsZUlzUHJvZmlsaW5nKSB7XG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbiA9IFJDVERldmljZUV2ZW50RW1pdHRlci5hZGRMaXN0ZW5lcihcbiAgICAgICAgICAndG9nZ2xlRWxlbWVudEluc3BlY3RvcicsXG4gICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgSW5zcGVjdG9yID0gcmVxdWlyZSgnSW5zcGVjdG9yJyk7XG4gICAgICAgICAgICBjb25zdCBpbnNwZWN0b3IgPSB0aGlzLnN0YXRlLmluc3BlY3RvclxuICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgOiA8SW5zcGVjdG9yXG4gICAgICAgICAgICAgICAgICBpbnNwZWN0ZWRWaWV3VGFnPXtSZWFjdE5hdGl2ZS5maW5kTm9kZUhhbmRsZSh0aGlzLl9tYWluUmVmKX1cbiAgICAgICAgICAgICAgICAgIG9uUmVxdWVzdFJlcmVuZGVyQXBwPXt1cGRhdGVJbnNwZWN0ZWRWaWV3VGFnID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShcbiAgICAgICAgICAgICAgICAgICAgICBzID0+ICh7bWFpbktleTogcy5tYWluS2V5ICsgMX0pLFxuICAgICAgICAgICAgICAgICAgICAgICgpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVJbnNwZWN0ZWRWaWV3VGFnKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdE5hdGl2ZS5maW5kTm9kZUhhbmRsZSh0aGlzLl9tYWluUmVmKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIC8+O1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7aW5zcGVjdG9yfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb24ucmVtb3ZlKCk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCk6IFJlYWN0LkVsZW1lbnQ8Kj4ge1xuICAgIGxldCB5ZWxsb3dCb3ggPSBudWxsO1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBpZiAoIWdsb2JhbC5fX1JDVFByb2ZpbGVJc1Byb2ZpbGluZykge1xuICAgICAgICBjb25zdCBZZWxsb3dCb3ggPSByZXF1aXJlKCdZZWxsb3dCb3gnKTtcbiAgICAgICAgeWVsbG93Qm94ID0gPFllbGxvd0JveCAvPjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgaW5uZXJWaWV3ID0gKFxuICAgICAgPFZpZXdcbiAgICAgICAgY29sbGFwc2FibGU9eyF0aGlzLnN0YXRlLmluc3BlY3Rvcn1cbiAgICAgICAga2V5PXt0aGlzLnN0YXRlLm1haW5LZXl9XG4gICAgICAgIHBvaW50ZXJFdmVudHM9XCJib3gtbm9uZVwiXG4gICAgICAgIHN0eWxlPXtzdHlsZXMuYXBwQ29udGFpbmVyfVxuICAgICAgICByZWY9e3JlZiA9PiB7XG4gICAgICAgICAgdGhpcy5fbWFpblJlZiA9IHJlZjtcbiAgICAgICAgfX0+XG4gICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgPC9WaWV3PlxuICAgICk7XG5cbiAgICBjb25zdCBXcmFwcGVyID0gdGhpcy5wcm9wcy5XcmFwcGVyQ29tcG9uZW50O1xuICAgIGlmIChXcmFwcGVyKSB7XG4gICAgICBpbm5lclZpZXcgPSAoXG4gICAgICAgIDxXcmFwcGVyPlxuICAgICAgICAgIHtpbm5lclZpZXd9XG4gICAgICAgIDwvV3JhcHBlcj5cbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmFwcENvbnRhaW5lcn0gcG9pbnRlckV2ZW50cz1cImJveC1ub25lXCI+XG4gICAgICAgIHtpbm5lclZpZXd9XG4gICAgICAgIHt5ZWxsb3dCb3h9XG4gICAgICAgIHt0aGlzLnN0YXRlLmluc3BlY3Rvcn1cbiAgICAgIDwvVmlldz5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgYXBwQ29udGFpbmVyOiB7XG4gICAgZmxleDogMSxcbiAgfSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcENvbnRhaW5lcjtcbiJdfQ==