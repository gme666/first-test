e8aeadd18311138c244be3da0c54d589















'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}

var _shouldPolyfillES6Collection=require('_shouldPolyfillES6Collection');
var guid=require('guid');
var isNode=require('fbjs/lib/isNode');
var toIterator=require('toIterator');

module.exports=function(global,undefined){




if(!_shouldPolyfillES6Collection('Map')){
return global.Map;
}
























































var KIND_KEY='key';
var KIND_VALUE='value';
var KIND_KEY_VALUE='key+value';



var KEY_PREFIX='$map_';



var SECRET_SIZE_PROP;
if(__DEV__){
SECRET_SIZE_PROP='$size'+guid();
}


var OLD_IE_HASH_PREFIX='IE_HASH_';var

Map=function(){










function Map(iterable){_classCallCheck(this,Map);
if(!isObject(this)){
throw new TypeError('Wrong map object type.');
}

initMap(this);

if(iterable!=null){
var it=toIterator(iterable);
var next;
while(!(next=it.next()).done){
if(!isObject(next.value)){
throw new TypeError('Expected iterable items to be pair objects.');
}
this.set(next.value[0],next.value[1]);
}
}
}_createClass(Map,[{key:'clear',value:function clear()





{
initMap(this);
}},{key:'has',value:function has(








key){
var index=getIndex(this,key);
return!!(index!=null&&this._mapData[index]);
}},{key:'set',value:function set(









key,value){
var index=getIndex(this,key);

if(index!=null&&this._mapData[index]){
this._mapData[index][1]=value;
}else{
index=this._mapData.push([
key,
value])-
1;
setIndex(this,key,index);
if(__DEV__){
this[SECRET_SIZE_PROP]+=1;
}else{
this.size+=1;
}
}

return this;
}},{key:'get',value:function get(








key){
var index=getIndex(this,key);
if(index==null){
return undefined;
}else{
return this._mapData[index][1];
}
}},{key:'delete',value:function _delete(









key){
var index=getIndex(this,key);
if(index!=null&&this._mapData[index]){
setIndex(this,key,undefined);
this._mapData[index]=undefined;
if(__DEV__){
this[SECRET_SIZE_PROP]-=1;
}else{
this.size-=1;
}
return true;
}else{
return false;
}
}},{key:'entries',value:function entries()








{
return new MapIterator(this,KIND_KEY_VALUE);
}},{key:'keys',value:function keys()







{
return new MapIterator(this,KIND_KEY);
}},{key:'values',value:function values()







{
return new MapIterator(this,KIND_VALUE);
}},{key:'forEach',value:function forEach(










callback,thisArg){
if(typeof callback!=='function'){
throw new TypeError('Callback must be callable.');
}

var boundCallback=callback.bind(thisArg||undefined);
var mapData=this._mapData;




for(var i=0;i<mapData.length;i++){
var entry=mapData[i];
if(entry!=null){
boundCallback(entry[1],entry[0],this);
}
}
}}]);return Map;}();



Map.prototype[toIterator.ITERATOR_SYMBOL]=Map.prototype.entries;var

MapIterator=function(){









function MapIterator(map,kind){_classCallCheck(this,MapIterator);
if(!(isObject(map)&&map._mapData)){
throw new TypeError('Object is not a map.');
}

if([KIND_KEY,KIND_KEY_VALUE,KIND_VALUE].indexOf(kind)===-1){
throw new Error('Invalid iteration kind.');
}

this._map=map;
this._nextIndex=0;
this._kind=kind;
}_createClass(MapIterator,[{key:'next',value:function next()







{
if(!this instanceof Map){
throw new TypeError('Expected to be called on a MapIterator.');
}

var map=this._map;
var index=this._nextIndex;
var kind=this._kind;

if(map==null){
return createIterResultObject(undefined,true);
}

var entries=map._mapData;

while(index<entries.length){
var record=entries[index];

index+=1;
this._nextIndex=index;

if(record){
if(kind===KIND_KEY){
return createIterResultObject(record[0],false);
}else if(kind===KIND_VALUE){
return createIterResultObject(record[1],false);
}else if(kind){
return createIterResultObject(record,false);
}
}
}

this._map=undefined;

return createIterResultObject(undefined,true);
}}]);return MapIterator;}();





MapIterator.prototype[toIterator.ITERATOR_SYMBOL]=function(){
return this;
};












function getIndex(map,key){
if(isObject(key)){
var hash=getHash(key);
return map._objectIndex[hash];
}else{
var prefixedKey=KEY_PREFIX+key;
if(typeof key==='string'){
return map._stringIndex[prefixedKey];
}else{
return map._otherIndex[prefixedKey];
}
}
}







function setIndex(map,key,index){
var shouldDelete=index==null;

if(isObject(key)){
var hash=getHash(key);
if(shouldDelete){
delete map._objectIndex[hash];
}else{
map._objectIndex[hash]=index;
}
}else{
var prefixedKey=KEY_PREFIX+key;
if(typeof key==='string'){
if(shouldDelete){
delete map._stringIndex[prefixedKey];
}else{
map._stringIndex[prefixedKey]=index;
}
}else{
if(shouldDelete){
delete map._otherIndex[prefixedKey];
}else{
map._otherIndex[prefixedKey]=index;
}
}
}
}






function initMap(map){






map._mapData=[];







map._objectIndex={};


map._stringIndex={};


map._otherIndex={};







if(__DEV__){
if(isES5){



if(map.hasOwnProperty(SECRET_SIZE_PROP)){
map[SECRET_SIZE_PROP]=0;
}else{
Object.defineProperty(map,SECRET_SIZE_PROP,{
value:0,
writable:true});

Object.defineProperty(map,'size',{
set:function set(v){
console.error(
'PLEASE FIX ME: You are changing the map size property which '+
'should not be writable and will break in production.');

throw new Error('The map size property is not writable.');
},
get:function get(){return map[SECRET_SIZE_PROP];}});

}


return;
}
}



map.size=0;
}







function isObject(o){
return o!=null&&(typeof o==='object'||typeof o==='function');
}








function createIterResultObject(value,done){
return{value:value,done:done};
}


var isES5=function(){
try{
Object.defineProperty({},'x',{});
return true;
}catch(e){
return false;
}
}();







function isExtensible(o){
if(!isES5){
return true;
}else{
return Object.isExtensible(o);
}
}









function getIENodeHash(node){
var uniqueID;
switch(node.nodeType){
case 1:
uniqueID=node.uniqueID;
break;
case 9:
uniqueID=node.documentElement.uniqueID;
break;
default:
return null;}


if(uniqueID){
return OLD_IE_HASH_PREFIX+uniqueID;
}else{
return null;
}
}

var getHash=function(){
var propIsEnumerable=Object.prototype.propertyIsEnumerable;
var hashProperty=guid();
var hashCounter=0;







return function getHash(o){
if(o[hashProperty]){
return o[hashProperty];
}else if(!isES5&&
o.propertyIsEnumerable&&
o.propertyIsEnumerable[hashProperty]){
return o.propertyIsEnumerable[hashProperty];
}else if(!isES5&&
isNode(o)&&
getIENodeHash(o)){
return getIENodeHash(o);
}else if(!isES5&&o[hashProperty]){
return o[hashProperty];
}

if(isExtensible(o)){
hashCounter+=1;
if(isES5){
Object.defineProperty(o,hashProperty,{
enumerable:false,
writable:false,
configurable:false,
value:hashCounter});

}else if(o.propertyIsEnumerable){




o.propertyIsEnumerable=function(){
return propIsEnumerable.apply(this,arguments);
};
o.propertyIsEnumerable[hashProperty]=hashCounter;
}else if(isNode(o)){




o[hashProperty]=hashCounter;
}else{
throw new Error('Unable to set a non-enumerable property on object.');
}
return hashCounter;
}else{
throw new Error('Non-extensible objects are not allowed as keys.');
}
};
}();

return Map;
}(Function('return this')());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1hcC5qcyJdLCJuYW1lcyI6WyJfc2hvdWxkUG9seWZpbGxFUzZDb2xsZWN0aW9uIiwicmVxdWlyZSIsImd1aWQiLCJpc05vZGUiLCJ0b0l0ZXJhdG9yIiwibW9kdWxlIiwiZXhwb3J0cyIsImdsb2JhbCIsInVuZGVmaW5lZCIsIk1hcCIsIktJTkRfS0VZIiwiS0lORF9WQUxVRSIsIktJTkRfS0VZX1ZBTFVFIiwiS0VZX1BSRUZJWCIsIlNFQ1JFVF9TSVpFX1BST1AiLCJfX0RFVl9fIiwiT0xEX0lFX0hBU0hfUFJFRklYIiwiaXRlcmFibGUiLCJpc09iamVjdCIsIlR5cGVFcnJvciIsImluaXRNYXAiLCJpdCIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJzZXQiLCJrZXkiLCJpbmRleCIsImdldEluZGV4IiwiX21hcERhdGEiLCJwdXNoIiwic2V0SW5kZXgiLCJzaXplIiwiTWFwSXRlcmF0b3IiLCJjYWxsYmFjayIsInRoaXNBcmciLCJib3VuZENhbGxiYWNrIiwiYmluZCIsIm1hcERhdGEiLCJpIiwibGVuZ3RoIiwiZW50cnkiLCJwcm90b3R5cGUiLCJJVEVSQVRPUl9TWU1CT0wiLCJlbnRyaWVzIiwibWFwIiwia2luZCIsImluZGV4T2YiLCJFcnJvciIsIl9tYXAiLCJfbmV4dEluZGV4IiwiX2tpbmQiLCJjcmVhdGVJdGVyUmVzdWx0T2JqZWN0IiwicmVjb3JkIiwiaGFzaCIsImdldEhhc2giLCJfb2JqZWN0SW5kZXgiLCJwcmVmaXhlZEtleSIsIl9zdHJpbmdJbmRleCIsIl9vdGhlckluZGV4Iiwic2hvdWxkRGVsZXRlIiwiaXNFUzUiLCJoYXNPd25Qcm9wZXJ0eSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwid3JpdGFibGUiLCJ2IiwiY29uc29sZSIsImVycm9yIiwiZ2V0IiwibyIsImUiLCJpc0V4dGVuc2libGUiLCJnZXRJRU5vZGVIYXNoIiwibm9kZSIsInVuaXF1ZUlEIiwibm9kZVR5cGUiLCJkb2N1bWVudEVsZW1lbnQiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJoYXNoUHJvcGVydHkiLCJoYXNoQ291bnRlciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJhcHBseSIsImFyZ3VtZW50cyIsIkZ1bmN0aW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFlQSxhOztBQUVBLEdBQUlBLDhCQUErQkMsUUFBUSw4QkFBUixDQUFuQztBQUNBLEdBQUlDLE1BQU9ELFFBQVEsTUFBUixDQUFYO0FBQ0EsR0FBSUUsUUFBU0YsUUFBUSxpQkFBUixDQUFiO0FBQ0EsR0FBSUcsWUFBYUgsUUFBUSxZQUFSLENBQWpCOztBQUVBSSxPQUFPQyxPQUFQLENBQWtCLFNBQVNDLE1BQVQsQ0FBaUJDLFNBQWpCLENBQTRCOzs7OztBQUs1QyxHQUFJLENBQUNSLDZCQUE2QixLQUE3QixDQUFMLENBQTBDO0FBQ3hDLE1BQU9PLFFBQU9FLEdBQWQ7QUFDRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeURELEdBQUlDLFVBQVcsS0FBZjtBQUNBLEdBQUlDLFlBQWEsT0FBakI7QUFDQSxHQUFJQyxnQkFBaUIsV0FBckI7Ozs7QUFJQSxHQUFJQyxZQUFhLE9BQWpCOzs7O0FBSUEsR0FBSUMsaUJBQUo7QUFDQSxHQUFJQyxPQUFKLENBQWE7QUFDWEQsaUJBQW1CLFFBQVVaLE1BQTdCO0FBQ0Q7OztBQUdELEdBQUljLG9CQUFxQixVQUF6QixDQWhGNEM7O0FBa0Z0Q1AsR0FsRnNDOzs7Ozs7Ozs7OztBQTZGMUMsYUFBWVEsUUFBWixDQUFzQjtBQUNwQixHQUFJLENBQUNDLFNBQVMsSUFBVCxDQUFMLENBQXFCO0FBQ25CLEtBQU0sSUFBSUMsVUFBSixDQUFjLHdCQUFkLENBQU47QUFDRDs7QUFFREMsUUFBUSxJQUFSOztBQUVBLEdBQUlILFVBQVksSUFBaEIsQ0FBc0I7QUFDcEIsR0FBSUksSUFBS2pCLFdBQVdhLFFBQVgsQ0FBVDtBQUNBLEdBQUlLLEtBQUo7QUFD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QUFQO0FBQ0QsQ0E1QkQsSUE0Qk87QUFDTCxLQUFNLElBQUlqQyxNQUFKLENBQVUsaURBQVYsQ0FBTjtBQUNEO0FBQ0YsQ0E5Q0Q7QUErQ0QsQ0ExRGEsRUFBZDs7QUE0REEsTUFBT3ZDLElBQVA7QUFDRCxDQXhsQmdCLENBd2xCZDZFLFNBQVMsYUFBVCxHQXhsQmMsQ0FBakIiLCJmaWxlIjoiTWFwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBNYXBcbiAqIEBwcmV2ZW50TXVuZ2VcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgbm8tZXh0ZW5kLW5hdGl2ZSwgbm8tc2hhZG93LXJlc3RyaWN0ZWQtbmFtZXMgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Nob3VsZFBvbHlmaWxsRVM2Q29sbGVjdGlvbiA9IHJlcXVpcmUoJ19zaG91bGRQb2x5ZmlsbEVTNkNvbGxlY3Rpb24nKTtcbnZhciBndWlkID0gcmVxdWlyZSgnZ3VpZCcpO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJ2ZianMvbGliL2lzTm9kZScpO1xudmFyIHRvSXRlcmF0b3IgPSByZXF1aXJlKCd0b0l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gIC8vIFNpbmNlIG91ciBpbXBsZW1lbnRhdGlvbiBpcyBzcGVjLWNvbXBsaWFudCBmb3IgdGhlIG1vc3QgcGFydCB3ZSBjYW4gc2FmZWx5XG4gIC8vIGRlbGVnYXRlIHRvIGEgYnVpbHQtaW4gdmVyc2lvbiBpZiBleGlzdHMgYW5kIGlzIGltcGxlbWVudGVkIGNvcnJlY3RseS5cbiAgLy8gRmlyZWZveCBoYWQgZ290dGVuIGEgZmV3IGltcGxlbWVudGF0aW9uIGRldGFpbHMgd3JvbmcgYWNyb3NzIGRpZmZlcmVudFxuICAvLyB2ZXJzaW9ucyBzbyB3ZSBndWFyZCBhZ2FpbnN0IHRoYXQuXG4gIGlmICghX3Nob3VsZFBvbHlmaWxsRVM2Q29sbGVjdGlvbignTWFwJykpIHtcbiAgICByZXR1cm4gZ2xvYmFsLk1hcDtcbiAgfVxuXG4gIC8qKlxuICAgKiA9PSBFUzYgTWFwIENvbGxlY3Rpb24gPT1cbiAgICpcbiAgICogVGhpcyBtb2R1bGUgaXMgbWVhbnQgdG8gaW1wbGVtZW50IGEgTWFwIGNvbGxlY3Rpb24gYXMgZGVzY3JpYmVkIGluIGNoYXB0ZXJcbiAgICogMjMuMSBvZiB0aGUgRVM2IHNwZWNpZmljYXRpb24uXG4gICAqXG4gICAqIE1hcCBvYmplY3RzIGFyZSBjb2xsZWN0aW9ucyBvZiBrZXkvdmFsdWUgcGFpcnMgd2hlcmUgYm90aCB0aGUga2V5cyBhbmRcbiAgICogdmFsdWVzIG1heSBiZSBhcmJpdHJhcnkgRUNNQVNjcmlwdCBsYW5ndWFnZSB2YWx1ZXMuIEEgZGlzdGluY3Qga2V5IHZhbHVlXG4gICAqIG1heSBvbmx5IG9jY3VyIGluIG9uZSBrZXkvdmFsdWUgcGFpciB3aXRoaW4gdGhlIE1hcCdzIGNvbGxlY3Rpb24uXG4gICAqXG4gICAqIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1tYXAtb2JqZWN0c1xuICAgKlxuICAgKiBUaGVyZSBvbmx5IHR3byAtLSByYXRoZXIgc21hbGwgLS0gZGl2aWF0aW9ucyBmcm9tIHRoZSBzcGVjOlxuICAgKlxuICAgKiAxLiBUaGUgdXNlIG9mIGZyb3plbiBvYmplY3RzIGFzIGtleXMuXG4gICAqICAgIFdlIGRlY2lkZWQgbm90IHRvIGFsbG93IGFuZCBzaW1wbHkgdGhyb3cgYW4gZXJyb3IuIFRoZSByZWFzb24gYmVpbmcgaXNcbiAgICogICAgd2Ugc3RvcmUgYSBcImhhc2hcIiBvbiB0aGUgb2JqZWN0IGZvciBmYXN0IGFjY2VzcyB0byBpdCdzIHBsYWNlIGluIHRoZVxuICAgKiAgICBpbnRlcm5hbCBtYXAgZW50cmllcy5cbiAgICogICAgSWYgdGhpcyB0dXJucyBvdXQgdG8gYmUgYSBwb3B1bGFyIHVzZSBjYXNlIGl0J3MgcG9zc2libGUgdG8gaW1wbGVtZW50IGJ5XG4gICAqICAgIG92ZXJpZGluZyBgT2JqZWN0LmZyZWV6ZWAgdG8gc3RvcmUgYSBcImhhc2hcIiBwcm9wZXJ0eSBvbiB0aGUgb2JqZWN0XG4gICAqICAgIGZvciBsYXRlciB1c2Ugd2l0aCB0aGUgbWFwLlxuICAgKlxuICAgKiAyLiBUaGUgYHNpemVgIHByb3BlcnR5IG9uIGEgbWFwIG9iamVjdCBpcyBhIHJlZ3VsYXIgcHJvcGVydHkgYW5kIG5vdCBhXG4gICAqICAgIGNvbXB1dGVkIHByb3BlcnR5IG9uIHRoZSBwcm90b3R5cGUgYXMgZGVzY3JpYmVkIGJ5IHRoZSBzcGVjLlxuICAgKiAgICBUaGUgcmVhc29uIGJlaW5nIGlzIHRoYXQgd2Ugc2ltcGx5IHdhbnQgdG8gc3VwcG9ydCBFUzMgZW52aXJvbm1lbnRzXG4gICAqICAgIHdoaWNoIGRvZXNuJ3QgaW1wbGVtZW50IGNvbXB1dGVkIHByb3BlcnRpZXMuXG4gICAqXG4gICAqID09IFVzYWdlID09XG4gICAqXG4gICAqIHZhciBtYXAgPSBuZXcgTWFwKGl0ZXJhYmxlKTtcbiAgICpcbiAgICogbWFwLnNldChrZXksIHZhbHVlKTtcbiAgICogbWFwLmdldChrZXkpOyAvLyB2YWx1ZVxuICAgKiBtYXAuaGFzKGtleSk7IC8vIHRydWVcbiAgICogbWFwLmRlbGV0ZShrZXkpOyAvLyB0cnVlXG4gICAqXG4gICAqIHZhciBpdGVyYXRvciA9IG1hcC5rZXlzKCk7XG4gICAqIGl0ZXJhdG9yLm5leHQoKTsgLy8ge3ZhbHVlOiBrZXksIGRvbmU6IGZhbHNlfVxuICAgKlxuICAgKiB2YXIgaXRlcmF0b3IgPSBtYXAudmFsdWVzKCk7XG4gICAqIGl0ZXJhdG9yLm5leHQoKTsgLy8ge3ZhbHVlOiB2YWx1ZSwgZG9uZTogZmFsc2V9XG4gICAqXG4gICAqIHZhciBpdGVyYXRvciA9IG1hcC5lbnRyaWVzKCk7XG4gICAqIGl0ZXJhdG9yLm5leHQoKTsgLy8ge3ZhbHVlOiBba2V5LCB2YWx1ZV0sIGRvbmU6IGZhbHNlfVxuICAgKlxuICAgKiBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KXsgdGhpcyA9PT0gdGhpc0FyZyB9LCB0aGlzQXJnKTtcbiAgICpcbiAgICogbWFwLmNsZWFyKCk7IC8vIHJlc2V0cyBtYXAuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBDb25zdGFudHNcbiAgICovXG5cbiAgLy8gS2luZHMgb2YgbWFwIGl0ZXJhdGlvbnMgMjMuMS41LjNcbiAgdmFyIEtJTkRfS0VZID0gJ2tleSc7XG4gIHZhciBLSU5EX1ZBTFVFID0gJ3ZhbHVlJztcbiAgdmFyIEtJTkRfS0VZX1ZBTFVFID0gJ2tleSt2YWx1ZSc7XG5cbiAgLy8gSW4gb2xkZXIgYnJvd3NlcnMgd2UgY2FuJ3QgY3JlYXRlIGEgbnVsbC1wcm90b3R5cGUgb2JqZWN0IHNvIHdlIGhhdmUgdG9cbiAgLy8gZGVmZW5kIGFnYWluc3Qga2V5IGNvbGxpc2lvbnMgd2l0aCBidWlsdC1pbiBtZXRob2RzLlxuICB2YXIgS0VZX1BSRUZJWCA9ICckbWFwXyc7XG5cbiAgLy8gVGhpcyBwcm9wZXJ0eSB3aWxsIGJlIHVzZWQgYXMgdGhlIGludGVybmFsIHNpemUgdmFyaWFibGUgdG8gZGlzYWxsb3dcbiAgLy8gd3JpdGluZyBhbmQgdG8gaXNzdWUgd2FybmluZ3MgZm9yIHdyaXRpbmdzIGluIGRldmVsb3BtZW50LlxuICB2YXIgU0VDUkVUX1NJWkVfUFJPUDtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBTRUNSRVRfU0laRV9QUk9QID0gJyRzaXplJyArIGd1aWQoKTtcbiAgfVxuXG4gIC8vIEluIG9sZElFIHdlIHVzZSB0aGUgRE9NIE5vZGUgYHVuaXF1ZUlEYCBwcm9wZXJ0eSB0byBnZXQgY3JlYXRlIHRoZSBoYXNoLlxuICB2YXIgT0xEX0lFX0hBU0hfUFJFRklYID0gJ0lFX0hBU0hfJztcblxuICBjbGFzcyBNYXAge1xuXG4gICAgLyoqXG4gICAgICogMjMuMS4xLjFcbiAgICAgKiBUYWtlcyBhbiBgaXRlcmFibGVgIHdoaWNoIGlzIGJhc2ljYWxseSBhbnkgb2JqZWN0IHRoYXQgaW1wbGVtZW50cyBhXG4gICAgICogU3ltYm9sLml0ZXJhdG9yIChAQGl0ZXJhdG9yKSBtZXRob2QuIFRoZSBpdGVyYWJsZSBpcyBleHBlY3RlZCB0byBiZSBhXG4gICAgICogY29sbGVjdGlvbiBvZiBwYWlycy4gRWFjaCBwYWlyIGlzIGEga2V5L3ZhbHVlIHBhaXIgdGhhdCB3aWxsIGJlIHVzZWRcbiAgICAgKiB0byBpbnN0YW50aWF0ZSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBpdGVyYWJsZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGl0ZXJhYmxlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHRoaXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1dyb25nIG1hcCBvYmplY3QgdHlwZS4nKTtcbiAgICAgIH1cblxuICAgICAgaW5pdE1hcCh0aGlzKTtcblxuICAgICAgaWYgKGl0ZXJhYmxlICE9IG51bGwpIHtcbiAgICAgICAgdmFyIGl0ID0gdG9JdGVyYXRvcihpdGVyYWJsZSk7XG4gICAgICAgIHZhciBuZXh0O1xuICAgICAgICB3aGlsZSAoIShuZXh0ID0gaXQubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgaWYgKCFpc09iamVjdChuZXh0LnZhbHVlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgaXRlcmFibGUgaXRlbXMgdG8gYmUgcGFpciBvYmplY3RzLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnNldChuZXh0LnZhbHVlWzBdLCBuZXh0LnZhbHVlWzFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDIzLjEuMy4xXG4gICAgICogQ2xlYXJzIHRoZSBtYXAgZnJvbSBhbGwga2V5cyBhbmQgdmFsdWVzLlxuICAgICAqL1xuICAgIGNsZWFyKCkge1xuICAgICAgaW5pdE1hcCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAyMy4xLjMuN1xuICAgICAqIENoZWNrIGlmIGEga2V5IGV4aXN0cyBpbiB0aGUgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0ga2V5XG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBoYXMoa2V5KSB7XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleCh0aGlzLCBrZXkpO1xuICAgICAgcmV0dXJuICEhKGluZGV4ICE9IG51bGwgJiYgdGhpcy5fbWFwRGF0YVtpbmRleF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDIzLjEuMy45XG4gICAgICogQWRkcyBhIGtleS92YWx1ZSBwYWlyIHRvIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBrZXlcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAgICogQHJldHVybiB7bWFwfVxuICAgICAqL1xuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleCh0aGlzLCBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggIT0gbnVsbCAmJiB0aGlzLl9tYXBEYXRhW2luZGV4XSkge1xuICAgICAgICB0aGlzLl9tYXBEYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5kZXggPSB0aGlzLl9tYXBEYXRhLnB1c2goW1xuICAgICAgICAgIGtleSxcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICBdKSAtIDE7XG4gICAgICAgIHNldEluZGV4KHRoaXMsIGtleSwgaW5kZXgpO1xuICAgICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICAgIHRoaXNbU0VDUkVUX1NJWkVfUFJPUF0gKz0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNpemUgKz0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAyMy4xLjMuNlxuICAgICAqIEdldHMgYSB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggYSBrZXkgaW4gdGhlIGNvbGxlY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IGtleVxuICAgICAqIEByZXR1cm4geyp9XG4gICAgICovXG4gICAgZ2V0KGtleSkge1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXgodGhpcywga2V5KTtcbiAgICAgIGlmIChpbmRleCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwRGF0YVtpbmRleF1bMV07XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiAyMy4xLjMuM1xuICAgICAqIERlbGV0ZSBhIGtleS92YWx1ZSBmcm9tIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBrZXlcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBrZXkgd2FzIGZvdW5kIGFuZCBkZWxldGVkLlxuICAgICAqL1xuICAgIGRlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4KHRoaXMsIGtleSk7XG4gICAgICBpZiAoaW5kZXggIT0gbnVsbCAmJiB0aGlzLl9tYXBEYXRhW2luZGV4XSkge1xuICAgICAgICBzZXRJbmRleCh0aGlzLCBrZXksIHVuZGVmaW5lZCk7XG4gICAgICAgIHRoaXMuX21hcERhdGFbaW5kZXhdID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICAgIHRoaXNbU0VDUkVUX1NJWkVfUFJPUF0gLT0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNpemUgLT0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAyMy4xLjMuNFxuICAgICAqIFJldHVybnMgYW4gaXRlcmF0b3Igb3ZlciB0aGUga2V5L3ZhbHVlIHBhaXJzIChpbiB0aGUgZm9ybSBvZiBhbiBBcnJheSkgaW5cbiAgICAgKiB0aGUgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge01hcEl0ZXJhdG9yfVxuICAgICAqL1xuICAgIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gbmV3IE1hcEl0ZXJhdG9yKHRoaXMsIEtJTkRfS0VZX1ZBTFVFKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAyMy4xLjMuOFxuICAgICAqIFJldHVybnMgYW4gaXRlcmF0b3Igb3ZlciB0aGUga2V5cyBpbiB0aGUgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge01hcEl0ZXJhdG9yfVxuICAgICAqL1xuICAgIGtleXMoKSB7XG4gICAgICByZXR1cm4gbmV3IE1hcEl0ZXJhdG9yKHRoaXMsIEtJTkRfS0VZKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAyMy4xLjMuMTFcbiAgICAgKiBSZXR1cm5zIGFuIGl0ZXJhdG9yIG92ZXIgdGhlIHZhbHVlcyBwYWlycyBpbiB0aGUgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge01hcEl0ZXJhdG9yfVxuICAgICAqL1xuICAgIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBuZXcgTWFwSXRlcmF0b3IodGhpcywgS0lORF9WQUxVRSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogMjMuMS4zLjVcbiAgICAgKiBJdGVyYXRlcyBvdmVyIHRoZSBrZXkvdmFsdWUgcGFpcnMgaW4gdGhlIGNvbGxlY3Rpb24gY2FsbGluZyBgY2FsbGJhY2tgXG4gICAgICogd2l0aCBbdmFsdWUsIGtleSwgbWFwXS4gQW4gb3B0aW9uYWwgYHRoaXNBcmdgIGNhbiBiZSBwYXNzZWQgdG8gc2V0IHRoZVxuICAgICAqIGNvbnRleHQgd2hlbiBgY2FsbGJhY2tgIGlzIGNhbGxlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSB0aGlzQXJnXG4gICAgICovXG4gICAgZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYWxsYmFjayBtdXN0IGJlIGNhbGxhYmxlLicpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYm91bmRDYWxsYmFjayA9IGNhbGxiYWNrLmJpbmQodGhpc0FyZyB8fCB1bmRlZmluZWQpO1xuICAgICAgdmFyIG1hcERhdGEgPSB0aGlzLl9tYXBEYXRhO1xuXG4gICAgICAvLyBOb3RlIHRoYXQgYG1hcERhdGEubGVuZ3RoYCBzaG91bGQgYmUgY29tcHV0ZWQgb24gZWFjaCBpdGVyYXRpb24gdG9cbiAgICAgIC8vIHN1cHBvcnQgaXRlcmF0aW5nIG92ZXIgbmV3IGl0ZW1zIGluIHRoZSBtYXAgdGhhdCB3ZXJlIGFkZGVkIGFmdGVyIHRoZVxuICAgICAgLy8gc3RhcnQgb2YgdGhlIGl0ZXJhdGlvbi5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFwRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZW50cnkgPSBtYXBEYXRhW2ldO1xuICAgICAgICBpZiAoZW50cnkgIT0gbnVsbCkge1xuICAgICAgICAgIGJvdW5kQ2FsbGJhY2soZW50cnlbMV0sIGVudHJ5WzBdLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIDIzLjEuMy4xMlxuICBNYXAucHJvdG90eXBlW3RvSXRlcmF0b3IuSVRFUkFUT1JfU1lNQk9MXSA9IE1hcC5wcm90b3R5cGUuZW50cmllcztcblxuICBjbGFzcyBNYXBJdGVyYXRvciB7XG5cbiAgICAvKipcbiAgICAgKiAyMy4xLjUuMVxuICAgICAqIENyZWF0ZSBhIGBNYXBJdGVyYXRvcmAgZm9yIGEgZ2l2ZW4gYG1hcGAuIFdoaWxlIHRoaXMgY2xhc3MgaXMgcHJpdmF0ZSBpdFxuICAgICAqIHdpbGwgY3JlYXRlIG9iamVjdHMgdGhhdCB3aWxsIGJlIHBhc3NlZCBhcm91bmQgcHVibGljaWx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHttYXB9IG1hcFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBraW5kXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobWFwLCBraW5kKSB7XG4gICAgICBpZiAoIShpc09iamVjdChtYXApICYmIG1hcC5fbWFwRGF0YSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0IGlzIG5vdCBhIG1hcC4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKFtLSU5EX0tFWSwgS0lORF9LRVlfVkFMVUUsIEtJTkRfVkFMVUVdLmluZGV4T2Yoa2luZCkgPT09IC0xKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpdGVyYXRpb24ga2luZC4nKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fbWFwID0gbWFwO1xuICAgICAgdGhpcy5fbmV4dEluZGV4ID0gMDtcbiAgICAgIHRoaXMuX2tpbmQgPSBraW5kO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDIzLjEuNS4yLjFcbiAgICAgKiBHZXQgdGhlIG5leHQgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxuICAgICAqL1xuICAgIG5leHQoKSB7XG4gICAgICBpZiAoIXRoaXMgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdG8gYmUgY2FsbGVkIG9uIGEgTWFwSXRlcmF0b3IuJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBtYXAgPSB0aGlzLl9tYXA7XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLl9uZXh0SW5kZXg7XG4gICAgICB2YXIga2luZCA9IHRoaXMuX2tpbmQ7XG5cbiAgICAgIGlmIChtYXAgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW50cmllcyA9IG1hcC5fbWFwRGF0YTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJpZXNbaW5kZXhdO1xuXG4gICAgICAgIGluZGV4ICs9IDE7XG4gICAgICAgIHRoaXMuX25leHRJbmRleCA9IGluZGV4O1xuXG4gICAgICAgIGlmIChyZWNvcmQpIHtcbiAgICAgICAgICBpZiAoa2luZCA9PT0gS0lORF9LRVkpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHJlY29yZFswXSwgZmFsc2UpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoa2luZCA9PT0gS0lORF9WQUxVRSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QocmVjb3JkWzFdLCBmYWxzZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChraW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdChyZWNvcmQsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fbWFwID0gdW5kZWZpbmVkO1xuXG4gICAgICByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFdlIGNhbiBwdXQgdGhpcyBpbiB0aGUgY2xhc3MgZGVmaW5pdGlvbiBvbmNlIHdlIGhhdmUgY29tcHV0ZWQgcHJvcHNcbiAgLy8gdHJhbnNmb3JtLlxuICAvLyAyMy4xLjUuMi4yXG4gIE1hcEl0ZXJhdG9yLnByb3RvdHlwZVt0b0l0ZXJhdG9yLklURVJBVE9SX1NZTUJPTF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogSGVscGVyIEZ1bmN0aW9ucy5cbiAgICovXG5cbiAgLyoqXG4gICAqIFJldHVybiBhbiBpbmRleCB0byBtYXAuW1tNYXBEYXRhXV0gYXJyYXkgZm9yIGEgZ2l2ZW4gS2V5LlxuICAgKlxuICAgKiBAcGFyYW0ge21hcH0gbWFwXG4gICAqIEBwYXJhbSB7Kn0ga2V5XG4gICAqIEByZXR1cm4gez9udW1iZXJ9XG4gICAqL1xuICBmdW5jdGlvbiBnZXRJbmRleChtYXAsIGtleSkge1xuICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICB2YXIgaGFzaCA9IGdldEhhc2goa2V5KTtcbiAgICAgIHJldHVybiBtYXAuX29iamVjdEluZGV4W2hhc2hdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ZWRLZXkgPSBLRVlfUFJFRklYICsga2V5O1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBtYXAuX3N0cmluZ0luZGV4W3ByZWZpeGVkS2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBtYXAuX290aGVySW5kZXhbcHJlZml4ZWRLZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR1cCBhbiBpbmRleCB0aGF0IHJlZmVyIHRvIHRoZSBrZXkncyBsb2NhdGlvbiBpbiBtYXAuW1tNYXBEYXRhXV0uXG4gICAqXG4gICAqIEBwYXJhbSB7bWFwfSBtYXBcbiAgICogQHBhcmFtIHsqfSBrZXlcbiAgICovXG4gIGZ1bmN0aW9uIHNldEluZGV4KG1hcCwga2V5LCBpbmRleCkge1xuICAgIHZhciBzaG91bGREZWxldGUgPSBpbmRleCA9PSBudWxsO1xuXG4gICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgIHZhciBoYXNoID0gZ2V0SGFzaChrZXkpO1xuICAgICAgaWYgKHNob3VsZERlbGV0ZSkge1xuICAgICAgICBkZWxldGUgbWFwLl9vYmplY3RJbmRleFtoYXNoXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hcC5fb2JqZWN0SW5kZXhbaGFzaF0gPSBpbmRleDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeGVkS2V5ID0gS0VZX1BSRUZJWCArIGtleTtcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoc2hvdWxkRGVsZXRlKSB7XG4gICAgICAgICAgZGVsZXRlIG1hcC5fc3RyaW5nSW5kZXhbcHJlZml4ZWRLZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hcC5fc3RyaW5nSW5kZXhbcHJlZml4ZWRLZXldID0gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzaG91bGREZWxldGUpIHtcbiAgICAgICAgICBkZWxldGUgbWFwLl9vdGhlckluZGV4W3ByZWZpeGVkS2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXAuX290aGVySW5kZXhbcHJlZml4ZWRLZXldID0gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW5zdGFudGlhdGUgYSBtYXAgd2l0aCBpbnRlcm5hbCBzbG90cy5cbiAgICpcbiAgICogQHBhcmFtIHttYXB9IG1hcFxuICAgKi9cbiAgZnVuY3Rpb24gaW5pdE1hcChtYXApIHtcbiAgICAvLyBEYXRhIHN0cnVjdHVyZSBkZXNpZ24gaW5zcGlyZWQgYnkgVHJhY2V1cidzIE1hcCBpbXBsZW1lbnRhdGlvbi5cbiAgICAvLyBXZSBtYWludGFpbiBhbiBpbnRlcm5hbCBhcnJheSBmb3IgYWxsIHRoZSBlbnRyaWVzLiBUaGUgYXJyYXkgaXMgbmVlZGVkXG4gICAgLy8gdG8gcmVtZW1iZXIgb3JkZXIuIEhvd2V2ZXIsIHRvIGhhdmUgYSByZWFzb25hYmxlIEhhc2hNYXAgcGVyZm9ybWFuY2VcbiAgICAvLyBpLmUuIE8oMSkgZm9yIGluc2VydGlvbiwgZGVsZXRpb24sIGFuZCByZXRyaWV2YWwuIFdlIG1haW50YWluIGluZGljZXNcbiAgICAvLyBpbiBvYmplY3RzIGZvciBmYXN0IGxvb2sgdXBzLiBJbmRpY2VzIGFyZSBzcGxpdCB1cCBhY2NvcmRpbmcgdG8gZGF0YVxuICAgIC8vIHR5cGVzIHRvIGF2b2lkIGNvbGxpc2lvbnMuXG4gICAgbWFwLl9tYXBEYXRhID0gW107XG5cbiAgICAvLyBPYmplY3QgaW5kZXggbWFwcyBmcm9tIGFuIG9iamVjdCBcImhhc2hcIiB0byBpbmRleC4gVGhlIGhhc2ggYmVpbmcgYSB1bmlxdWVcbiAgICAvLyBwcm9wZXJ0eSBvZiBvdXIgY2hvb3NpbmcgdGhhdCB3ZSBhc3NvY2lhdGUgd2l0aCB0aGUgb2JqZWN0LiBBc3NvY2lhdGlvblxuICAgIC8vIGlzIGRvbmUgYnkgd2F5cyBvZiBrZWVwaW5nIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgb24gdGhlIG9iamVjdC5cbiAgICAvLyBJZGVhbGx5IHRoZXNlIHdvdWxkIGJlIGBPYmplY3QuY3JlYXRlKG51bGwpYCBvYmplY3RzIGJ1dCBzaW5jZSB3ZSdyZVxuICAgIC8vIHRyeWluZyB0byBzdXBwb3J0IEVTMyB3ZSdsbCBoYXZlIHRvIGdhdXJkIGFnYWluc3QgY29sbGlzaW9ucyB1c2luZ1xuICAgIC8vIHByZWZpeGVzIG9uIHRoZSBrZXlzIHJhdGhlciB0aGFuIHJlbHkgb24gbnVsbCBwcm90b3R5cGUgb2JqZWN0cy5cbiAgICBtYXAuX29iamVjdEluZGV4ID0ge307XG5cbiAgICAvLyBTdHJpbmcgaW5kZXggbWFwcyBmcm9tIHN0cmluZ3MgdG8gaW5kZXguXG4gICAgbWFwLl9zdHJpbmdJbmRleCA9IHt9O1xuXG4gICAgLy8gTnVtYmVycywgYm9vbGVhbnMsIHVuZGVmaW5lZCwgYW5kIG51bGwuXG4gICAgbWFwLl9vdGhlckluZGV4ID0ge307XG5cbiAgICAvLyBVbmZvcnR1bmF0ZWx5IHdlIGhhdmUgdG8gc3VwcG9ydCBFUzMgYW5kIGNhbm5vdCBoYXZlIGBNYXAucHJvdG90eXBlLnNpemVgXG4gICAgLy8gYmUgYSBnZXR0ZXIgbWV0aG9kIGJ1dCBqdXN0IGEgcmVndWxhciBtZXRob2QuIFRoZSBiaWdnZXN0IHByb2JsZW0gd2l0aFxuICAgIC8vIHRoaXMgaXMgc2FmZXR5LiBDbGllbnRzIGNhbiBjaGFuZ2UgdGhlIHNpemUgcHJvcGVydHkgZWFzaWx5IGFuZCBwb3NzaWJseVxuICAgIC8vIHdpdGhvdXQgbm90aWNpbmcgKGUuZy4gYGlmIChtYXAuc2l6ZSA9IDEpIHsuLn1gIGtpbmQgb2YgdHlwbykuIFdoYXQgd2VcbiAgICAvLyBjYW4gZG8gdG8gbWl0aWdhdGUgdXNlIGdldHRlcnMgYW5kIHNldHRlcnMgaW4gZGV2ZWxvcG1lbnQgdG8gZGlzYWxsb3dcbiAgICAvLyBhbmQgaXNzdWUgYSB3YXJuaW5nIGZvciBjaGFuZ2luZyB0aGUgYHNpemVgIHByb3BlcnR5LlxuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBpZiAoaXNFUzUpIHtcbiAgICAgICAgLy8gSWYgdGhlIGBTRUNSRVRfU0laRV9QUk9QYCBwcm9wZXJ0eSBpcyBhbHJlYWR5IGRlZmluZWQgdGhlbiB3ZSdyZSBub3RcbiAgICAgICAgLy8gaW4gdGhlIGZpcnN0IGNhbGwgdG8gYGluaXRNYXBgIChlLmcuIGNvbWluZyBmcm9tIGBtYXAuY2xlYXIoKWApIHNvXG4gICAgICAgIC8vIGFsbCB3ZSBuZWVkIHRvIGRvIGlzIHJlc2V0IHRoZSBzaXplIHdpdGhvdXQgZGVmaW5pbmcgdGhlIHByb3BlcnRpZXMuXG4gICAgICAgIGlmIChtYXAuaGFzT3duUHJvcGVydHkoU0VDUkVUX1NJWkVfUFJPUCkpIHtcbiAgICAgICAgICBtYXBbU0VDUkVUX1NJWkVfUFJPUF0gPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtYXAsIFNFQ1JFVF9TSVpFX1BST1AsIHtcbiAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobWFwLCAnc2l6ZScsIHtcbiAgICAgICAgICAgIHNldDogKHYpID0+IHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICAnUExFQVNFIEZJWCBNRTogWW91IGFyZSBjaGFuZ2luZyB0aGUgbWFwIHNpemUgcHJvcGVydHkgd2hpY2ggJyArXG4gICAgICAgICAgICAgICAgJ3Nob3VsZCBub3QgYmUgd3JpdGFibGUgYW5kIHdpbGwgYnJlYWsgaW4gcHJvZHVjdGlvbi4nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIG1hcCBzaXplIHByb3BlcnR5IGlzIG5vdCB3cml0YWJsZS4nKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQ6ICgpID0+IG1hcFtTRUNSRVRfU0laRV9QUk9QXVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTk9URTogRWFybHkgcmV0dXJuIHRvIGltcGxlbWVudCBpbW11dGFibGUgYC5zaXplYCBpbiBERVYuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGlzIGlzIGEgZGl2aWF0aW9uIGZyb20gdGhlIHNwZWMuIGBzaXplYCBzaG91bGQgYmUgYSBnZXR0ZXIgb25cbiAgICAvLyBgTWFwLnByb3RvdHlwZWAuIEhvd2V2ZXIsIHdlIGhhdmUgdG8gc3VwcG9ydCBJRTguXG4gICAgbWFwLnNpemUgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHNvbWV0aGluZyBpcyBhbiBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gb1xuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gaXNPYmplY3Qobykge1xuICAgIHJldHVybiBvICE9IG51bGwgJiYgKHR5cGVvZiBvID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgbyA9PT0gJ2Z1bmN0aW9uJyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGl0ZXJhdGlvbiBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHBhcmFtIHtib29sZWFufSBkb25lXG4gICAqIEByZXR1cm4ge29iamVjdH1cbiAgICovXG4gIGZ1bmN0aW9uIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodmFsdWUsIGRvbmUpIHtcbiAgICByZXR1cm4ge3ZhbHVlLCBkb25lfTtcbiAgfVxuXG4gIC8vIEFyZSB3ZSBpbiBhIGxlZ2l0IEVTNSBlbnZpcm9ubWVudC4gU3BvaWxlciBhbGVydDogdGhhdCBkb2Vzbid0IGluY2x1ZGUgSUU4LlxuICB2YXIgaXNFUzUgPSAoZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3gnLCB7fSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9KSgpO1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBvYmplY3QgY2FuIGJlIGV4dGVuZGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdHxhcnJheXxmdW5jdGlvbnxyZWdleHB9IG9cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShvKSB7XG4gICAgaWYgKCFpc0VTNSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBPYmplY3QuaXNFeHRlbnNpYmxlKG8pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJRSBoYXMgYSBgdW5pcXVlSURgIHNldCBvbiBldmVyeSBET00gbm9kZS4gU28gd2UgY29uc3RydWN0IHRoZSBoYXNoIGZyb21cbiAgICogdGhpcyB1bmlxdWVJRCB0byBhdm9pZCBtZW1vcnkgbGVha3MgYW5kIHRoZSBJRSBjbG9uZU5vZGUgYnVnIHdoZXJlIGl0XG4gICAqIGNsb25lcyBwcm9wZXJ0aWVzIGluIGFkZGl0aW9uIHRvIHRoZSBhdHRyaWJ1dGVzLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbm9kZVxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfVxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0SUVOb2RlSGFzaChub2RlKSB7XG4gICAgdmFyIHVuaXF1ZUlEO1xuICAgIHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xuICAgICAgY2FzZSAxOiAvLyBFbGVtZW50XG4gICAgICAgIHVuaXF1ZUlEID0gbm9kZS51bmlxdWVJRDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDk6IC8vIERvY3VtZW50XG4gICAgICAgIHVuaXF1ZUlEID0gbm9kZS5kb2N1bWVudEVsZW1lbnQudW5pcXVlSUQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHVuaXF1ZUlEKSB7XG4gICAgICByZXR1cm4gIE9MRF9JRV9IQVNIX1BSRUZJWCArIHVuaXF1ZUlEO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICB2YXIgZ2V0SGFzaCA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG4gICAgdmFyIGhhc2hQcm9wZXJ0eSA9IGd1aWQoKTtcbiAgICB2YXIgaGFzaENvdW50ZXIgPSAwO1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBcImhhc2hcIiBhc3NvY2lhdGVkIHdpdGggYW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R8YXJyYXl8ZnVuY3Rpb258cmVnZXhwfSBvXG4gICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBnZXRIYXNoKG8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zaGFkb3dcbiAgICAgIGlmIChvW2hhc2hQcm9wZXJ0eV0pIHtcbiAgICAgICAgcmV0dXJuIG9baGFzaFByb3BlcnR5XTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzRVM1ICYmXG4gICAgICAgICAgICAgICAgICBvLnByb3BlcnR5SXNFbnVtZXJhYmxlICYmXG4gICAgICAgICAgICAgICAgICBvLnByb3BlcnR5SXNFbnVtZXJhYmxlW2hhc2hQcm9wZXJ0eV0pIHtcbiAgICAgICAgcmV0dXJuIG8ucHJvcGVydHlJc0VudW1lcmFibGVbaGFzaFByb3BlcnR5XTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzRVM1ICYmXG4gICAgICAgICAgICAgICAgICBpc05vZGUobykgJiZcbiAgICAgICAgICAgICAgICAgIGdldElFTm9kZUhhc2gobykpIHtcbiAgICAgICAgcmV0dXJuIGdldElFTm9kZUhhc2gobyk7XG4gICAgICB9IGVsc2UgaWYgKCFpc0VTNSAmJiBvW2hhc2hQcm9wZXJ0eV0pIHtcbiAgICAgICAgcmV0dXJuIG9baGFzaFByb3BlcnR5XTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRXh0ZW5zaWJsZShvKSkge1xuICAgICAgICBoYXNoQ291bnRlciArPSAxO1xuICAgICAgICBpZiAoaXNFUzUpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgaGFzaFByb3BlcnR5LCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogaGFzaENvdW50ZXJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChvLnByb3BlcnR5SXNFbnVtZXJhYmxlKSB7XG4gICAgICAgICAgLy8gU2luY2Ugd2UgY2FuJ3QgZGVmaW5lIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgb24gdGhlIG9iamVjdFxuICAgICAgICAgIC8vIHdlJ2xsIGhpamFjayBvbmUgb2YgdGhlIGxlc3MtdXNlZCBub24tZW51bWVyYWJsZSBwcm9wZXJ0aWVzIHRvXG4gICAgICAgICAgLy8gc2F2ZSBvdXIgaGFzaCBvbiBpdC4gQWRkaW90aW9uYWxseSwgc2luY2UgdGhpcyBpcyBhIGZ1bmN0aW9uIGl0XG4gICAgICAgICAgLy8gd2lsbCBub3Qgc2hvdyB1cCBpbiBgSlNPTi5zdHJpbmdpZnlgIHdoaWNoIGlzIHdoYXQgd2Ugd2FudC5cbiAgICAgICAgICBvLnByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvcElzRW51bWVyYWJsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgby5wcm9wZXJ0eUlzRW51bWVyYWJsZVtoYXNoUHJvcGVydHldID0gaGFzaENvdW50ZXI7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOb2RlKG8pKSB7XG4gICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCB3ZSBjb3VsZG4ndCBnZXQgdGhlIElFIGB1bmlxdWVJRGAgdG8gdXNlIGFzIGEgaGFzaFxuICAgICAgICAgIC8vIGFuZCB3ZSBjb3VsZG4ndCB1c2UgYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eSB0byBleHBsb2l0IHRoZVxuICAgICAgICAgIC8vIGRvbnRFbnVtIGJ1ZyBzbyB3ZSBzaW1wbHkgYWRkIHRoZSBgaGFzaFByb3BlcnR5YCBvbiB0aGUgbm9kZVxuICAgICAgICAgIC8vIGl0c2VsZi5cbiAgICAgICAgICBvW2hhc2hQcm9wZXJ0eV0gPSBoYXNoQ291bnRlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBzZXQgYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eSBvbiBvYmplY3QuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhhc2hDb3VudGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb24tZXh0ZW5zaWJsZSBvYmplY3RzIGFyZSBub3QgYWxsb3dlZCBhcyBrZXlzLicpO1xuICAgICAgfVxuICAgIH07XG4gIH0pKCk7XG5cbiAgcmV0dXJuIE1hcDtcbn0pKEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCkpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy1mdW5jXG4iXX0=